<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>plugin on 老高的技术博客</title>
    <link>https://phpgao.github.io/tags/plugin/</link>
    <description>Recent content in plugin on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 03 Dec 2015 11:23:00 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/tags/plugin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sublime-配置-插件-主题总结</title>
      <link>https://phpgao.github.io/go_sublime.html</link>
      <pubDate>Thu, 03 Dec 2015 11:23:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/go_sublime.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/3173255088.png&#34; alt=&#34;sublime&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;可自用，可参考，欢迎大家补充！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程7---Helper类</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-7.html</link>
      <pubDate>Tue, 02 Jun 2015 03:00:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-7.html</guid>
      <description>&lt;p&gt;&lt;code&gt;Helper&lt;/code&gt;类为我们封装了很多与插件有关的操作，并且全部是公共静态方法，比如获取系统配置、添加路由、添加面板等功能，是开发插件必不可少的工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插件帮手将默认出现在所有的typecho发行版中.因此你可以放心使用它的功能, 以方便你的插件安装在用户的系统里.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Helper类的注释已经写的很清楚了，老高在此仅挑几个常用的方法讲讲。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>缓存插件TpCache-for-Typecho</title>
      <link>https://phpgao.github.io/tpcache_for_typecho.html</link>
      <pubDate>Sun, 24 May 2015 13:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/tpcache_for_typecho.html</guid>
      <description>&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;p&gt;减缓网站并发压力而开发的缓存插件。&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;支持&lt;strong&gt;Memcache&lt;/strong&gt;，&lt;strong&gt;Redis&lt;/strong&gt;，&lt;strong&gt;Mysql&lt;/strong&gt;三种驱动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非js方式的&lt;/strong&gt;访问统计插件会失效&lt;/li&gt;
&lt;li&gt;BUG请在&lt;a href=&#34;https://blog.phpgao.com/tpcache_for_typecho.html&#34;&gt;缓存插件TpCache for Typecho&lt;/a&gt;页汇报&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程6---调用接口</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-6.html</link>
      <pubDate>Wed, 20 May 2015 12:39:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-6.html</guid>
      <description>&lt;p&gt;此篇我们开始调用接口，我们在插件类中新定义一个方法，起名为&lt;code&gt;send_post&lt;/code&gt;，在方法中我们通过系统配置获取接口调用地址。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程5---核心代码</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-5.html</link>
      <pubDate>Wed, 20 May 2015 10:47:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-5.html</guid>
      <description>&lt;p&gt;之前啰嗦了很多，现在开始写核心代码。&lt;/p&gt;
&lt;p&gt;分析一下，发布文章的时候，我们需要的信息就是当前文章的URL，我们需要想办法从&lt;code&gt;$contents&lt;/code&gt;、 &lt;code&gt;$class&lt;/code&gt;中拿到他。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程4---插件点</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-4.html</link>
      <pubDate>Wed, 20 May 2015 05:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-4.html</guid>
      <description>&lt;p&gt;终于，在能够保存配置信息后，我们可以开始编写插件的挂载功能了。&lt;/p&gt;
&lt;p&gt;首先我们需要知道系统为我们在各个关键的环节都预留了插件点给我们，系统运行到插件点时，会检测到是否有插件挂在这个点上，然后执行插件的逻辑！&lt;/p&gt;
&lt;p&gt;插件的工作就是找到合适的插件点，挂上去，然后执行自己的逻辑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程3---保存配置</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-3.html</link>
      <pubDate>Wed, 20 May 2015 02:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-3.html</guid>
      <description>&lt;p&gt;上一节我们制作了一个裸插件，下面我们开始让我们的插件开始工作！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程2---新插件</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-2.html</link>
      <pubDate>Wed, 20 May 2015 01:05:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-2.html</guid>
      <description>&lt;p&gt;第一节我们了解了一个插件的基本构成，下面我们需要一个实例练习巩固。&lt;/p&gt;
&lt;p&gt;真赶巧，老高最近正在改版&lt;a href=&#34;https://blog.phpgao.com/typecho_plugin_baidusubmit.html&#34;&gt;百度sitemap提交插件for typecho&lt;/a&gt;，下面和老高一起改版吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程1---从HelloWorld说起</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-1.html</link>
      <pubDate>Tue, 19 May 2015 13:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-1.html</guid>
      <description>&lt;p&gt;最近老高正在编写一个关于typecho的插件，由于typecho不像wordpress，有那么多的文档参考，写一个插件还是遇到了很多的坑，不过随着研究的不断深入，老高也慢慢上手了，于是总结出此篇编写教程分享给大家！&lt;/p&gt;
&lt;p&gt;如果你对typecho的源码有兴趣，可以参考老高的系列文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.phpgao.com/typecho_source_code_init.html&#34;&gt;typecho源代码解析1 - 系统初始化&lt;/a&gt;
&lt;a href=&#34;https://blog.phpgao.com/typecho_source_code_plugin.html&#34;&gt;typecho源代码解析2 - 插件机制&lt;/a&gt;
&lt;a href=&#34;https://blog.phpgao.com/typecho_source_code_dispatch.html&#34;&gt;typecho源代码解析3 - 路由分发&lt;/a&gt;
&lt;a href=&#34;https://blog.phpgao.com/typecho_source_code_business_logic.html&#34;&gt;typecho源代码解析4 - 业务逻辑&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文章目录-Table-Of-Contents-for-Typecho</title>
      <link>https://phpgao.github.io/table_of_contents_for_typecho.html</link>
      <pubDate>Wed, 13 May 2015 14:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/table_of_contents_for_typecho.html</guid>
      <description>&lt;p&gt;Table Of Contents大家都懂得，效果可以看老高的博客。&lt;/p&gt;
&lt;p&gt;欢迎使用！欢迎FORK！欢迎star！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/05/3482950149.png&#34; alt=&#34;Table Of Contents&#34;  title=&#34;Table Of Contents 截图&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>百度sitemap提交插件-for-Typecho</title>
      <link>https://phpgao.github.io/typecho_plugin_baidusubmit.html</link>
      <pubDate>Sun, 25 Jan 2015 03:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_baidusubmit.html</guid>
      <description>&lt;p&gt;几经开发，这款工具终于可以进入测试阶段。&lt;/p&gt;
&lt;p&gt;其主要内容是向百度提交sitemap，参考了站长工具里wp的插件制作。&lt;/p&gt;
&lt;p&gt;老高目测对SEO还是有一些用处的。&lt;/p&gt;
&lt;p&gt;目前没有做分页sitemap，如果大家有这个需求，老高会考虑加上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho源代码解析2---插件机制</title>
      <link>https://phpgao.github.io/typecho_source_code_plugin.html</link>
      <pubDate>Sun, 12 Oct 2014 01:24:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_source_code_plugin.html</guid>
      <description>上一节
上次我们讲到了系统完成了初始化，这一篇我们会更加深入typecho，同时会介绍typecho的插件机制。
插件点 热心的读者肯定会问，什么是插件点？当然你会不知道，因为这个名词是老高想出来的ಠ౪ಠ，本次要讲的插件机制的基础知识可以参考我的另一片博文thinkphp钩子的实现。钩子这个词比较粗俗，其实高大上的叫法就是插件，而老高自创的插件点就是事件的意思。
index.php中Typecho_Plugin::factory(&#39;index.php&#39;)-&amp;gt;begin()，其实就是通知挂载到&amp;rsquo;index.php&amp;rsquo;这个事件的插件可以执行了。
具体流程如下：
Typecho_Plugin::factory(&amp;lsquo;index.php&amp;rsquo;)返回了Typecho_Plugin的实例，构造函数中确定了唯一的句柄，即&amp;rsquo;index.php&#39;，紧接着执行了该实例的begin()方法，由于该方法不存在，所以调用了魔术方法__call，最后由__call方法执行所有在这个插件点挂载的插件。
__call方法源代码：
public function __call($component, $args) { $component = $this-&amp;gt;_handle . &amp;#39;:&amp;#39; . $component; $last = count($args); $args[$last] = $last &amp;gt; 0 ? $args[0] : false; if (isset(self::$_plugins[&amp;#39;handles&amp;#39;][$component])) { $args[$last] = NULL; $this-&amp;gt;_signal = true; foreach (self::$_plugins[&amp;#39;handles&amp;#39;][$component] as $callback) { $args[$last] = call_user_func_array($callback, $args); } } return $args[$last]; } 关键点：
 __call是可以带参数的 $callback是二位数组，一个类名，一个方法名 在该类init方法中，activated和handles是分开保存的，因为activated以插件名做键名，而handles以插件点为键，目的不同 插件的关联信息保存在数据库中typecho_options表中的plugins 需要禁用再启用才能使修改后的插件生效  当完成了第一个插件点的挂载后，程序开始路由分发。
下一节
码字不易，转载请注明出处。</description>
    </item>
    
  </channel>
</rss>
