<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>api on 老高的技术博客</title>
    <link>https://phpgao.github.io/tags/api/</link>
    <description>Recent content in api on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 May 2018 03:28:00 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用markdown编写简单的接口文档</title>
      <link>https://phpgao.github.io/markdown_api_doc.html</link>
      <pubDate>Wed, 09 May 2018 03:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/markdown_api_doc.html</guid>
      <description>如题，使用markdown格式写接口文档效率还是挺高的，因为你只需要关系接口的功能和内容，而不用在意排版，顺带提一下使用这个工具markdown_tables创建markdown格式的表格不要太方便！
 需要说明的是如果是大型多人合作项目，还是老老实实用apidoc等工具吧。
 接口大类 ----------- [toc] ----------- ### 接口1 #### 接口功能 &amp;gt; 接口说明 #### 接口地址 &amp;gt; 接口地址 #### 返回格式 &amp;gt; JSON #### 请求方式 &amp;gt; GET #### 请求参数 | 参数 | 必选 | 类型 | 默认值 | 说明 | |------|------|--------|--------|-----------------------------------------| | name | ture | string | foo | 请求的项目名 | | type | true | int | bar | 请求项目的类型。1：类型一；2：类型二 。 | #### 返回字段 | 返回字段 | 字段类型 | 说明 | |----------|----------|----------------------------------| | result | int | 返回结果状态。0：正常；1：错误。 | | reason | string | 错误说明 | | data | string | 数据 | #### 字段变化 字段变化说明 #### 接口示例 &amp;gt; 地址：接口地址示例 #```json { &amp;#34;result&amp;#34;: 0, &amp;#34;reason&amp;#34;: &amp;#34;success&amp;#34;, &amp;#34;data&amp;#34;: [] } #```  代码里的#请删除</description>
    </item>
    
    <item>
      <title>微信公众号内容接口</title>
      <link>https://phpgao.github.io/wechat_public_user_api.html</link>
      <pubDate>Thu, 22 Jan 2015 08:39:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/wechat_public_user_api.html</guid>
      <description>今天在V2EX上发现了一个上搜索微信内容的好网站
http://weixin.sogou.com/
练习爬虫的同学有福了，没事儿干可以试试。
接口地址：
http://weixin.sogou.com/gzhjs
获取方式:
GET
参数:
  cb 必须 固定值 sogou.weixin.gzhcb
  openid 必须 公众号的唯一ID，可以通过搜索结果页面获得
  page 可选 页码 默认第一页 每页最多十条记录
  t 可选 请求发送的时间，目测没啥大用
  最近貌似对openid加密了，等高人破解吧。
dmsYotdg%2F1V4oas03wIdducg7w5SL9M%2BYAL3GsHdR%2Fw9aG9Qzsh6XnA%2FUqKuQ66p8tRkK oIWsFt4Dl6kREBsD_KrMA84ThiIA wDssoe6gmmM8o%2FDMnpcWKuHwEPHxqeOZXzd%2FXytWShm4vQlImQmVes2pA7cYWfc%2FwudCK oIWsFt5sM7wz7isNXkl01is9M834 IAsHogvgG8dho2KKG6sO2uI3QooM18Hx%2BZF7o7%2BjinhzOVx5t3EcYmhn93gQQgsYira4N oIWsFt0fiD095kHlyHMIXEM7PrZc M8sGoC2gu6ZRohqri5nKnuau%2FD8g0jkqKyfAW8cjgPLn1e3wwAZSEM%2FMsVhWFQqp7%2Bz%2B9 oIWsFtwFWRis8pbm2-hOgllnpZfw 6Ss7od5gsiLBoala%2BGkVduU4PRslLs6USIzFeWxJXDR4oyMBZNvWwNovVPSmZJ6GVI7PG oIWsFt4UdPREjjItJo-JsJhoTjSU Qqsoo2gg7EDuovYnPkpxGu22Hv1%2FLF9MkC4AtaAGVcP%2B49dhr5tmnOpMZFpMtNQfp%2BnRv oIWsFt-abnxH6yhUGXNtgwhtsvS4 </description>
    </item>
    
    <item>
      <title>新浪微博商业API使用参考</title>
      <link>https://phpgao.github.io/sina_weibo_business_api.html</link>
      <pubDate>Mon, 12 May 2014 06:07:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sina_weibo_business_api.html</guid>
      <description>工作中需要微博的商业API，记录一下 不了解的TX先去看说说明 http://open.weibo.com/wiki/商业数据API
 商业数据API：包括数据分析、舆情监测、获取全量粉丝三大特性，同时还有实时数据推送、历史数据检索、监测粉丝变化趋势、活跃&amp;amp;活动粉丝分析等多项功能，协助和指引企业开展社会化营销，让真实的用户数据变为企业的决策。  申请试用 申请试用的邮箱为 businessapi@staff.sina.com.cn 给这个地址发邮件说明意图即可 这一步挺麻烦的，需要提供很多企业信息，需要注意的是：商业API只提供商业用途，所以如果你的APP的服务对象不是企业，请绕道。 然后填写两张申请单，分别为 订阅服务申请单、REST接口申请单-测试版。 一个是订阅微博，粉丝登上数据用的，另一个是标准API，可以使用搜索等高级接口！
价格 确定试用时间 试用时间一般两周，请充分利用好这宝贵的时间吧！
测试 REST接口很简单，和普通接口一样直接调用。就是订阅接口比较麻烦，当你生成订阅列表后，他会把满足你需要的数据放进一个类似队列的东西，然后你需要不断从这个队列中取出你需要的信息，而且这个获取过程需要HTTP长链接。。。。。。说起来很复杂，其实做起来更复杂 :mad: ！ 下面就来讲讲订阅接口，先看看这两个文档：
 订阅接口的服务手册 http://open.weibo.com/wiki/Subscription_guide 订阅管理接口 http://open.weibo.com/wiki/C/2/subscribe/update_subscribe  看完这两个接口就基本知道了订阅到底是干啥用的。
订阅开启 首先，开启了订阅接口服务以后，你会有推送时间，还有推送IP等很多需要设置的东西，当然完成了这些基本设置后，就可以开始配置订阅规则了，订阅规则基于以下两个条件：
  订阅用户
  订阅关键字 从subscribe/update_subscribe这个接口的示例来看，订阅有以下特点：
 订阅规则即刻生效 规则可以添加，修改 规则可以随时查询 每次修改量很有限（用户：50个；关键词：20个）    使用订阅 添加与删除一样 需要说明的是：
$params[&#39;subid&#39;] = &#39;***&#39;; //你的订阅ID 新浪提供$params[&#39;source&#39;] = &#39;***&#39;; //你的APPidsession_start();include_once( &#39;config.php&#39; );include_once( &#39;saetv2.ex.class.php&#39; );$c = new SaeTClientV2( WB_AKEY , WB_SKEY , $_SESSION[&#39;token&#39;][&#39;access_token&#39;] );$uid_get = $c-&amp;gt;get_uid();$uid = $uid_get[&#39;uid&#39;];//获取所有关注，默认一次50个，可以自己写循环$friends = $c-&amp;gt;friends_by_id($uid);$subscribe = &#39;&#39;;foreach( $friends[&#39;users&#39;] as $value ){$subscribe .</description>
    </item>
    
  </channel>
</rss>
