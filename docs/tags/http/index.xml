<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>http on 老高的技术博客</title>
    <link>https://phpgao.github.io/tags/http/</link>
    <description>Recent content in http on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Dec 2015 15:26:00 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用nc发送http请求</title>
      <link>https://phpgao.github.io/nc_http.html</link>
      <pubDate>Fri, 11 Dec 2015 15:26:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nc_http.html</guid>
      <description>echo -n &amp;#34;GET / HTTP/1.0\n\n\n&amp;#34;|nc phpgao.com 80 -vv nc phpgao.com 80 &amp;lt;&amp;lt;END HEAD / HTTP/1.1 Host: phpgao.com END </description>
    </item>
    
    <item>
      <title>http库测试工具---httpbin</title>
      <link>https://phpgao.github.io/how-to-httpbin.html</link>
      <pubDate>Sat, 27 Jun 2015 11:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/how-to-httpbin.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/727407702.jpg&#34; alt=&#34;http&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个人想学习爬虫技术，我会首先推荐他学会使用httpbin！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;httpbin(&lt;a href=&#34;http://httpbin.org&#34;&gt;官网&lt;/a&gt;|&lt;a href=&#34;https://github.com/Runscope/httpbin&#34;&gt;github&lt;/a&gt;)是一个很不错测试工具，你可以放心大胆的&lt;strong&gt;黑&lt;/strong&gt;他，而不用担心他报复你。他有点像一个蜜罐，时刻等待着你的光临，然后根据你的请求，给你返回你想要的东西&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近距离接触HTTP协议</title>
      <link>https://phpgao.github.io/socket-http.html</link>
      <pubDate>Wed, 24 Jun 2015 00:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/socket-http.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/4066750042.png&#34; alt=&#34;HTTP_logo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自WIKI)&lt;/p&gt;
&lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。我们打开浏览器输入网址&lt;code&gt;www.google.com&lt;/code&gt;，不对！刚才那个是一个不存在的网址，我们还是用&lt;code&gt;www.phpgao.com&lt;/code&gt;为例吧。我们(客户端)将老高的域名输入浏览器，浏览器就会为我们呈现老高的网页，首先我们能确定作为客户端，在此期间必定与老高的服务器发生了某种关系！但是具体发送了什么呢？作为一名WEB开发人员，这是我们必须知道的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>代理网站列表</title>
      <link>https://phpgao.github.io/proxy-list.html</link>
      <pubDate>Tue, 23 Jun 2015 09:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/proxy-list.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/4026837055.png&#34; alt=&#34;快递 代理&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;p&gt;代理是个好东西！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Privoxy将socks5代理转为http代理</title>
      <link>https://phpgao.github.io/privoxy-shadowsocks.html</link>
      <pubDate>Fri, 19 Jun 2015 02:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/privoxy-shadowsocks.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/13067004.png&#34; alt=&#34;访问谷歌&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;大家都知道shadowsocks只提供了SOCKS5的代理，而没有提供http代理，而很多软件仅提供了http代理的支持，比如老高需要使用shell命令行扶墙，或者使用git同步android的源代码，再或者更新android SDK，该怎么办呢？&lt;/p&gt;
&lt;p&gt;老高在此介绍一个软件&lt;a href=&#34;http://www.privoxy.org&#34;&gt;Privoxy&lt;/a&gt;，它可以作为&lt;strong&gt;代理的代理&lt;/strong&gt;，为我们解决上述问题！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Privoxy is a non-caching web proxy with advanced filtering capabilities for enhancing privacy, modifying web page data and HTTP headers, controlling access, and removing ads and other obnoxious Internet junk. Privoxy has a flexible configuration and can be customized to suit individual needs and tastes. It has application for both stand-alone systems and multi-user networks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由介绍看来，privoxy的功能可远远不止http代理这么简单！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>推荐两个sourceforge的FTP镜像(直接下载)</title>
      <link>https://phpgao.github.io/sourceforge_ftp.html</link>
      <pubDate>Sat, 28 Mar 2015 03:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sourceforge_ftp.html</guid>
      <description>一个FTP协议，一个http协议，实时更新，方便直接下载！
 ftp://ftp.jaist.ac.jp/pub/sourceforge/ http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/  顺便补充几个与路由器翻墙有关的地址
 http://openwrt-dist.sourceforge.net http://openwrt-dist.sourceforge.net/releases/ramips/packages/  </description>
    </item>
    
    <item>
      <title>HTTP状态码详解</title>
      <link>https://phpgao.github.io/http_status_code.html</link>
      <pubDate>Sat, 15 Mar 2014 15:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/http_status_code.html</guid>
      <description>什么是HTTP状态码 HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。
状态码的具体含义 1xx 消息
这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。
100
客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。
101
服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。
102
由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。
2xx 成功 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。
200
请求已成功，请求所希望的响应头或数据体将随此响应返回。
201
请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 &amp;lsquo;202 Accepted&amp;rsquo;。
202
服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。
203
服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。
204
服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。
205
服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。
206
服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</description>
    </item>
    
    <item>
      <title>PHP_cURL初始化和执行方法</title>
      <link>https://phpgao.github.io/curl_init.html</link>
      <pubDate>Sun, 02 Mar 2014 14:27:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/curl_init.html</guid>
      <description>这个是采集基础，最好熟悉一下
$ch = curl_init(); # 设定url和把结果返回，是否返回头部 curl_setopt($ch, CURLOPT_URL, &amp;#39;http://www.baidu.com/&amp;#39;); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($this-&amp;gt;ch, CURLOPT_HEADER, 1); # cookie文件设定 curl_setopt($this-&amp;gt;ch, CURLOPT_COOKIEJAR, $cookie_file); curl_setopt($this-&amp;gt;ch, CURLOPT_COOKIEFILE, $cookie_file); # 额外头部 curl_setopt($this-&amp;gt;ch, CURLOPT_HTTPHEADER, array(&amp;#39;User-Agent: Mozilla/5.0&amp;#39;)); # 设定post curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $poststring); # 连接、执行过期时间 curl_setopt($this-&amp;gt;ch, CURLOPT_CONNECTTIMEOUT, 5); curl_setopt($this-&amp;gt;ch, CURLOPT_TIMEOUT, 30); # 是否跟随301 302 curl_setopt($this-&amp;gt;ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($this-&amp;gt;ch, CURLOPT_MAXREDIRS, 10); # refer curl_setopt($this-&amp;gt;ch, CURLOPT_REFERER, $refer); # http版本和端口重用设置 curl_setopt($this-&amp;gt;ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1); curl_setopt($this-&amp;gt;ch, CURLOPT_FORBID_REUSE, 1); # 支持https curl_setopt($this-&amp;gt;ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($this-&amp;gt;ch, CURLOPT_SSL_VERIFYHOST, 0); # 如果需要进行毫秒超时，需要增加： curl_setopt($this-&amp;gt;ch, CURLOPT_NOSIGNAL, 1); # 执行 $response = curl_exec($ch); if(curl_errno($ch)){ curl_error($ch); exit(); } curl_close($ch); </description>
    </item>
    
  </channel>
</rss>
