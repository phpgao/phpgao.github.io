<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on 老高的技术博客</title>
    <link>https://phpgao.github.io/tags/git/</link>
    <description>Recent content in git on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Dec 2019 02:12:21 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git-批量删除tag</title>
      <link>https://phpgao.github.io/git_delete_tags.html</link>
      <pubDate>Fri, 13 Dec 2019 02:12:21 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_delete_tags.html</guid>
      <description>一句话代码
# 批量删除远程tag git tag -l|xargs git push origin --delete tag # 批量删除本地tag git tag -l|xargs git tag -d </description>
    </item>
    
    <item>
      <title>使用docker搭建私有git服务(gogs&#43;https)</title>
      <link>https://phpgao.github.io/gogs.html</link>
      <pubDate>Mon, 01 Jul 2019 06:18:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/gogs.html</guid>
      <description>&lt;p&gt;为什么有了github还要有自己的平台？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码审计安全(不会随便被删除)&lt;/li&gt;
&lt;li&gt;自己团队需要&lt;/li&gt;
&lt;li&gt;速度更快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么选择gogs?&lt;/p&gt;
&lt;p&gt;请移步&lt;a href=&#34;https://gogs.io/&#34;&gt;官网&lt;/a&gt;学习，配置文件请参考&lt;a href=&#34;https://gogs.io/docs/advanced/configuration_cheat_sheet&#34;&gt;配置文件手册&lt;/a&gt;，配置样例请访问&lt;a href=&#34;https://github.com/gogs/gogs/blob/master/conf/app.ini&#34;&gt;app.ini&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>所有平台可用的GIT管理工具</title>
      <link>https://phpgao.github.io/git_gui_tool.html</link>
      <pubDate>Wed, 18 Oct 2017 03:54:53 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_gui_tool.html</guid>
      <description>丢个链接走人，老高现在正在用sourceTree，最近是越来越卡，准备换一个。
GUI Clients</description>
    </item>
    
    <item>
      <title>GIT添加空文件夹方法</title>
      <link>https://phpgao.github.io/git_empty_dir.html</link>
      <pubDate>Tue, 14 Feb 2017 03:26:23 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_empty_dir.html</guid>
      <description>add a .gitignore file :
* !.gitignore </description>
    </item>
    
    <item>
      <title>Centos搭建GIT服务器</title>
      <link>https://phpgao.github.io/build-git-server.html</link>
      <pubDate>Mon, 14 Mar 2016 05:36:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/build-git-server.html</guid>
      <description>&lt;h2 id=&#34;server&#34;&gt;server&lt;/h2&gt;
&lt;p&gt;1.首先安装git&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>git支持socks5和HTTP代理</title>
      <link>https://phpgao.github.io/git_on_socks5.html</link>
      <pubDate>Thu, 10 Dec 2015 07:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_on_socks5.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/3997949415.png&#34; alt=&#34;git logo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;一直以来，老高都是用proxychains用的git，原来发现git本来就支持socks5代理!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文章目录-Table-Of-Contents-for-Typecho</title>
      <link>https://phpgao.github.io/table_of_contents_for_typecho.html</link>
      <pubDate>Wed, 13 May 2015 14:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/table_of_contents_for_typecho.html</guid>
      <description>&lt;p&gt;Table Of Contents大家都懂得，效果可以看老高的博客。&lt;/p&gt;
&lt;p&gt;欢迎使用！欢迎FORK！欢迎star！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/05/3482950149.png&#34; alt=&#34;Table Of Contents&#34;  title=&#34;Table Of Contents 截图&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为SourceTree添加Kaleidoscope的external-diff支持</title>
      <link>https://phpgao.github.io/sourcetree_kaleidoscope.html</link>
      <pubDate>Tue, 12 May 2015 16:41:06 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sourcetree_kaleidoscope.html</guid>
      <description>编辑 ~/.gitconfig
# add [difftool &amp;#34;sourcetree&amp;#34;] cmd = /usr/local/bin/ksdiff -- \&amp;#34;$LOCAL\&amp;#34; \&amp;#34;$REMOTE\&amp;#34; path = [mergetool &amp;#34;sourcetree&amp;#34;] cmd = /usr/local/bin/ksdiff --merge --output \&amp;#34;$MERGED\&amp;#34; --base \&amp;#34;$BASE\&amp;#34; -- \&amp;#34;$LOCAL\&amp;#34; \&amp;#34;$REMOTE\&amp;#34; trustExitCode = true 参考
https://ruby-china.org/topics/14404</description>
    </item>
    
    <item>
      <title>git的submodule的使用总结</title>
      <link>https://phpgao.github.io/git_submodule.html</link>
      <pubDate>Tue, 12 May 2015 06:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_submodule.html</guid>
      <description>&lt;p&gt;老高最近的项目用到了git的submodule，期间遇到了很多坑，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何更新submodule
如何修改并提交submodule
如何将submodule的变更在父项目中提交&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>windows环境下快速搭建开发环境</title>
      <link>https://phpgao.github.io/windows_programmer_for_php.html</link>
      <pubDate>Wed, 11 Mar 2015 07:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/windows_programmer_for_php.html</guid>
      <description>&lt;p&gt;先留坑，以后慢慢补充&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git仓库删除敏感信息</title>
      <link>https://phpgao.github.io/git_remove_sensitive_data.html</link>
      <pubDate>Fri, 13 Feb 2015 01:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_remove_sensitive_data.html</guid>
      <description>如果不小心再某一次commit了一个含有敏感信息的文件，如公共的数据库配置。然后又不小心上传至github或者其他远程仓库中，那么想要彻底把此文件删除确实不是一件简单的事情。
因为如果只是在下一次提交中删除或修改了某文件，在git提交的历史中还是能够找到修改前的版本，这个操作无非是掩耳盗铃。
听说前一阵有人专门写爬虫，专门爬云储存的用户名密码，不少人都被黑了。所以如果不小心在git中可能包含敏感信息，commit前一定要仔细检查。
那么如何用正确的姿势删除git中的敏感信息呢？下面看看官方给出的解决步骤：
git删除敏感信息
Reference:
https://help.github.com/articles/remove-sensitive-data/</description>
    </item>
    
    <item>
      <title>SVN命令行操作</title>
      <link>https://phpgao.github.io/svn_cli.html</link>
      <pubDate>Thu, 29 Jan 2015 06:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/svn_cli.html</guid>
      <description>&lt;p&gt;svn命令和git很像啊！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git的一些特殊操作</title>
      <link>https://phpgao.github.io/git_useful_command.html</link>
      <pubDate>Mon, 26 Jan 2015 02:54:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_useful_command.html</guid>
      <description>删除本地提交并推至origin # 第一步 ## 删除本地提交(HEAD为最近一次提交,HEAD^上上次) git reset --hard commit-id # 第二步 ## 强制推送 git push origin +master ## 或 git push origin HEAD --force RESET 根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:
 git reset –mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息 git reset –soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容
 关闭ISSUE 在提交的message中添加如下内容会自动与issue #id关联。是不是很方便啊！
 fixes #xxx fixed #xxx fix #xxx closes #xxx close #xxx closed #xxx  Reference：
http://www.cnblogs.com/shure/archive/2012/11/07/2758663.html http://blog.csdn.net/hshl1214/article/details/8084423</description>
    </item>
    
    <item>
      <title>git的tag操作</title>
      <link>https://phpgao.github.io/git_tag.html</link>
      <pubDate>Sun, 25 Jan 2015 12:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_tag.html</guid>
      <description>&lt;h2 id=&#34;什么是tag&#34;&gt;什么是tag&lt;/h2&gt;
&lt;p&gt;很简单，tag的字面意思是标签。在git中tag的功能就是把开发阶段做一个总结，打上标签，方便以后的查看与管理，通常用于版本发布。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将你的git协议由https变为ssh</title>
      <link>https://phpgao.github.io/github_https_to_ssh.html</link>
      <pubDate>Thu, 15 Jan 2015 12:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/github_https_to_ssh.html</guid>
      <description>你是不是已经厌倦了每次git push的时候每次都要输入用户名密码，使用下面的方法可以让你使用ssh协议通过密钥验证的方式让你得到解脱。
有两种修改方法
不过再实施前，请先准备好自己的密钥
ssh-keygen -t rsa -C &amp;#34;your_name&amp;#34; 然后登录https://github.com/settings/ssh，添加当前计算机的~/.ssh/id_rsa.pub公钥内容到github。
之后我们使用ssh git@github.com验证是否添加成功，如果返回以下内容，即代表添加成功！
 Hi phpgao! You&amp;rsquo;ve successfully authenticated, but GitHub does not provide shell access.
 下一步就是让我们的git使用公钥验证。
clone 保存你的最后一次修改并提交。
删除项目
使用下面的命令clone项目
# 采用ssh的方式克隆项目 # someaccount/someproject.git 中 some account为github用户名/someproject为仓库名 git clone git@github.com:phpgao/BaiduSubmit.git 修改https git remote set-url origin git@github.com:someaccount/someproject.git 顺便提一下，老高的git push总是报warning: push.default is unset错误，今天终于知道为啥了。原来是版本兼容性的原因，低版本的git push如果不指定分支名，就会全部推送，而新版只会推送当前分支。
解决的办法也很简单，我们只需要明确指定应该推送方式即可，至于选择哪种方式，It&amp;rsquo;s up to you.
# 全部推送 git config --global push.default matching # 部分推送 git config --global push.default simple 完</description>
    </item>
    
    <item>
      <title>VPS重做系统都需要做什么</title>
      <link>https://phpgao.github.io/vps_renew.html</link>
      <pubDate>Thu, 25 Dec 2014 10:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/vps_renew.html</guid>
      <description>&lt;p&gt;重做系统都快成日常了，看来还是需要整理一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git-fetch和pull的区别</title>
      <link>https://phpgao.github.io/git_fetch_pull.html</link>
      <pubDate>Thu, 11 Dec 2014 01:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_fetch_pull.html</guid>
      <description>转自 http://blog.csdn.net/hudashi/article/details/7664457
Git中从远程的分支获取最新的版本到本地有这样2个命令：
1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge
git fetch origin master git log -p master..origin/master git merge origin/master 以上命令的含义：
 首先从远程的origin的master主分支下载最新的版本到origin/master分支上 然后比较本地的master分支和origin/master分支的差别 最后进行合并
 上述过程其实可以用以下更清晰的方式来进行：
git fetch origin master : tmp git diff tmp git merge tmp 从远程获取最新的版本到本地的test分支上 之后再进行比较合并
2.git pull：相当于是从远程获取最新版本并merge到本地
git pull origin master 述命令其实相当于git fetch 和 git merge 在实际使用中，git fetch更安全一些 因为在merge前，我们可以查看更新情况，然后再决定是否合并</description>
    </item>
    
    <item>
      <title>git使用笔记</title>
      <link>https://phpgao.github.io/note_for_git.html</link>
      <pubDate>Sun, 02 Nov 2014 13:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/note_for_git.html</guid>
      <description>GIT虽然概念比较难理解，但不得不说他是一款开发利器。
老高总结出了一些GIT中很常见的操作命令，分享给大家。但由于GIT命令繁多，所以我将分为基础和进阶两部分。
基础篇： 帮助 git help # 获取帮助，内容如下 usage: git [--version] [--exec-path[=GIT_EXEC_PATH]] [--html-path] [-p|--paginate|--no-pager] [--no-replace-objects] [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE] [--help] COMMAND [ARGS] The most commonly used git commands are: add Add file contents to the index bisect Find by binary search the change that introduced a bug branch List, create, or delete branches checkout Checkout a branch or paths to the working tree clone Clone a repository into a new directory commit Record changes to the repository diff Show changes between commits, commit and working tree, etc fetch Download objects and refs from another repository grep Print lines matching a pattern init Create an empty git repository or reinitialize an existing one log Show commit logs merge Join two or more development histories together mv Move or rename a file, a directory, or a symlink pull Fetch from and merge with another repository or a local branch push Update remote refs along with associated objects rebase Forward-port local commits to the updated upstream head reset Reset current HEAD to the specified state rm Remove files from the working tree and from the index show Show various types of objects status Show the working tree status tag Create, list, delete or verify a tag object signed with GPG 配置git # 查看配置 git config -l/--list # 以下是可能出现的配置 core.</description>
    </item>
    
    <item>
      <title>git在公司内部的使用实践</title>
      <link>https://phpgao.github.io/using_git.html</link>
      <pubDate>Wed, 08 Oct 2014 09:52:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/using_git.html</guid>
      <description>&lt;p&gt;搜索git使用方法是发现这篇文章，几经搜索终于找到原作者的博客，找到了原文，现在分享给大家，希望能够普及git的使用。&lt;/p&gt;
&lt;p&gt;以下：&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
