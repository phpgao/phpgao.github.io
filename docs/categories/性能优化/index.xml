<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>性能优化 on 老高的技术博客</title>
    <link>https://phpgao.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 性能优化 on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Apr 2016 03:50:00 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker打包优化</title>
      <link>https://phpgao.github.io/docker_build_optimize.html</link>
      <pubDate>Fri, 01 Apr 2016 03:50:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_build_optimize.html</guid>
      <description>&lt;p&gt;老高最近快被工作掩埋了，各种赶上线，各种修BUG，真凄惨！
今天来说说Docker打包的优化问题。为什么要说这个问题呢？请听我慢慢道来。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/04/1459029166.png&#34; alt=&#34;Docker&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>大流量网站怎么优化</title>
      <link>https://phpgao.github.io/large_scale_web_site_optimize.html</link>
      <pubDate>Mon, 24 Aug 2015 10:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/large_scale_web_site_optimize.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/09/1782607352.png&#34; alt=&#34;流量！&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最近面试总是多多少少会出现这个问题，虽然老高的网站流量不大，但是如果解决这个问题，但是在理论上还是能回答的。&lt;/p&gt;
&lt;p&gt;首先能够明确的是，一般问这个问题的人应该没听过&lt;strong&gt;C10K&lt;/strong&gt;这个问题吧，注意修饰词&lt;strong&gt;一般&lt;/strong&gt;。所以你有挺高的概率&lt;strong&gt;不需要&lt;/strong&gt;从更底层的回答这个问题，比如多线程和多进程的取舍，或者使用异步和非阻塞等等。。。不过老高还是建议你去了解一下&lt;strong&gt;C10K&lt;/strong&gt;这个概念！这个地方有原文&lt;a href=&#34;http://www.kegel.com/c10k.html&#34;&gt;点我&lt;/a&gt;，这个地方有翻译&lt;a href=&#34;http://www.cnblogs.com/fll/archive/2008/05/17/1201540.html&#34;&gt;点我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个问题回答的方式，出发点很多。老高认为这样回答比较好：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS精简命令</title>
      <link>https://phpgao.github.io/centos_lite.html</link>
      <pubDate>Fri, 19 Sep 2014 05:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/centos_lite.html</guid>
      <description>删除自带web、数据库、php
yum remove httpd* php* mysql-server mysql* php-mysql -y 删除不需要的程序
yum remove Deployment_Guide-en-US finger cups-libs cups ypbind bluez-libs desktop-file-utils ppp rp-pppoe wireless-tools irda-utils sendmail* samba* talk-server finger-server bind* xinetd nfs-utils nfs-utils-lib rdate fetchmail eject ksh mkbootdisk mtools syslinux tcsh startup-notification talk apmd rmt dump setserial portmap yp-tools -yyum groupremove &amp;quot;Mail Server&amp;quot; &amp;quot;Games and Entertainment&amp;quot; &amp;quot;X Window System&amp;quot; &amp;quot;X Software Development&amp;quot; &amp;quot;Development Libraries&amp;quot; &amp;quot;Dialup Networking Support&amp;quot; &amp;quot;Games and Entertainment&amp;quot; &amp;quot;Sound and Video&amp;quot; &amp;quot;Graphics&amp;quot; &amp;quot;Editors&amp;quot; &amp;quot;Text-based Internet&amp;quot; &amp;quot;GNOME Desktop Environment&amp;quot; &amp;quot;GNOME Software Development&amp;quot; -yyum -y groupremove &amp;quot;FTP Server&amp;quot; &amp;quot;PostgreSQL Database client&amp;quot; &amp;quot;PostgreSQL Database server&amp;quot; &amp;quot;MySQL Database server&amp;quot; &amp;quot;MySQL Database client&amp;quot; &amp;quot;Web Server&amp;quot; &amp;quot;Office Suite and Productivity&amp;quot; &amp;quot;E-mail server&amp;quot; &amp;quot;Ruby Support&amp;quot; &amp;quot;Printing client&amp;quot; 关闭selinux</description>
    </item>
    
    <item>
      <title>为你的网站开启ssl支持</title>
      <link>https://phpgao.github.io/https_support.html</link>
      <pubDate>Sat, 13 Sep 2014 00:47:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/https_support.html</guid>
      <description>&lt;p&gt;前几天再Startssl已经为我的博客申请的证书通过，今天早上学习了RSA加密原理，趁着热乎劲还没过，下午就把本站全部升级为https啦！&lt;/p&gt;
&lt;p&gt;看到这个https，瞬间觉得高大上了许多。大家可能认为为自己的网站开启ssl功能很麻烦，其实不然。下面老高就简单的介绍一下开启的步骤，自己也做个记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同的服务器配置ssl的方法大题思路相同，本文以nginx为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然你还可以试试&lt;a href=&#34;https://blog.phpgao.com/let-us_encrypt.html&#34;&gt;使用Let&amp;rsquo;s Encrypt &amp;ndash; 免费的https证书&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>web开发者在发布你的作品前需要考虑的技术细节</title>
      <link>https://phpgao.github.io/technical_details.html</link>
      <pubDate>Sun, 17 Aug 2014 15:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/technical_details.html</guid>
      <description>这篇文章个人觉得很受用，故仔细翻译了一下，有些地方可能翻译的不好，请见谅！
翻译后发现貌似已经有人翻译过，但是翻译的水平就有点。。。。。那篇文章中不仅忽略了知识点，并且出现了明显的语义和语法错误，有一定的误导作用，所以请务必重新阅读老高的翻译。文章中容易出错的地方老高已经注释（在文章中以【】标出）。
如需转载，请注明出处！
web开发者在发布你的作品前需要考虑的技术细节 What technical details should a programmer of a web application consider before making the site public!
原文地址： 来自stackexchange.com quora的回答
界面和用户体验  要意识到浏览器的实现标准不一，请确保你的网站在主流浏览器中的正常展现。至少要针对一个最新的Gecko引擎（火狐）的浏览器、一个基于Webkit引擎（Safari或者其他移动端）的浏览器、Chrome、你想要支持的IE浏览器（可以借助IE应用程序兼容性VPC镜像）和Opera浏览器。同时需要考虑到在不同的操作系统下浏览器是如何渲染你的网站。 需要考虑来自其他浏览器的用户如何使用你的网站：智能手机、屏幕朗读器和搜索引擎，举个例子。&amp;ndash;一些易用性信息：网页易读性倡议（WAI）和网站508规范（Section508），移动站开发：移动互联网开发者论坛（MobiForge）。 构架：如果在不影响用户的情况下部署升级。有一个或者多个用来更改架构、代码或者内容更新的可用测试或运行环境，确保他们部署的可控性，以防止造成破坏。有一个自动化部署方案，用来提交更改到生产环境。最优的解决方案是结合使用一个版本控制系统（CVS, Subversion等【译者注：为啥没GIT】）或一个自动构造机制（Ant，NAnt等）。 不要直接给用户展现不友好的错误信息。 不要用纯文本的形式呈现用户的Email，否则他们会被垃圾邮件骚扰。 给用户生成的链接加上rel=&amp;quot;nofollow&amp;quot;属性，以避免SEO作弊。 为你的站点建立合理的限制机制，这一条同时属于安全细则。 理解什么是渐进增强（progressive enhancement）【译者注：与之相对的是优雅降级（graceful degradation）】。 如果一个请求提交成功，请重定向至其他地方，防止用户的重复提交。 不要忘了考虑无障碍阅读，这对网站的优化来讲是一个好主意，而且有些情况下他是法律强制必须有的。 无障碍网页应用（WAI-ARIA）和Web内容无障碍指南2（WCAG 2）在这方面可以帮到你！ 不要让用户思考该如何操作  安全  OWASP开发入门可能会让你花一些时间掌握，但是他涵盖了网站开发安全的方方面面。 了解注入，尤其是SQL注入，并知道如何防御注入。 永远不要相信用户的输入，还有请求中的所有信息（包括cookie和隐藏域）。 给你的密码加点盐后在使用哈希，并针对不同行使用不同的盐以防止彩虹攻击。使用慢速【短？】散列算法，如bcrypt（经过时间考验）或者scrypt(更强、比较新)(1, 2) ，针对如何保存密码请参考（如何保存你的密码）。美国国家标准与技术研究院表示支持使用PBKDF2 算法来加密，联邦信息处理标准在dotnet开发中也支持PBKDF2(更多信息)。避免直接使用MD5和SHA族算法来保存密码。 不要尝试使用自创的自以为NB的认证系统。因为你很容易在细节和无法测试的地方犯错误，也许被黑了以后你才会后知后觉。 了解信用卡的处理规则。（详见这个问题） 为登陆页面和任何需要输入敏感信息的页面使用SSL/HTTPS（如信用卡信息）。 避免跨站脚本攻击(XSS)。 避免跨站请求伪造(CSRF)。 避免点击劫持。 使你的系统更新到最新的补丁。 确保你的数据库连接信息是安全的。 时刻注意最新的攻击技术和影响你的平台的漏洞。 阅读谷歌浏览器安全手册。 阅读网络产品黑客手册。 考虑权限最小化原则。试着让你的应用服务器以非ROOT权限运行（以tomcat为例）。  性能  必要时使用缓存，理解并使用HTTP缓存技术和HTML5的Manifest技术。 图片优化 - 不要使用一个20KB大小的的图片最为重复背景。 学习如何使用gzip压缩内容。 合并/链接多个样式表或多个脚本文件以减少浏览器的请求数，并且使用gzip压缩文件中重复的内容。 看一看雅虎高性能站点，有很多不错的点子，包括提高前端性能和他们的YSlow工具（需求使用Firefox、Safira、Chrome、或Opera浏览器）。同时，Google page speed（使用浏览器插件）也是一个不错的性能调校工具，他同时也会优化你的图片。 针对小并且相关的图片使用CSS image sprite技术。 访问量大的站点需要考虑将不用内容分至不同的域名下。 静态内容（如图片、css、js脚本还有不需要cookie的普通内容）应该被分配到一个不使用cookie的域名下，因为一个域名下的所有cookie和子域下的cookie将会被包含在所有对应的域名下。一个好的主意是使用CND加速，但是考虑到CND可能会挂，到时候本地的拷贝也会提供服务。 最小化一个浏览器需要渲染一个页面所需要的请求数。 利用工具Google Closure Compiler最小化你的js文件，还有其他的最小化工具。 确保有一个favicon.</description>
    </item>
    
    <item>
      <title>typecho的优化设置</title>
      <link>https://phpgao.github.io/typecho.html</link>
      <pubDate>Fri, 25 Jul 2014 07:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho.html</guid>
      <description>[TOC]
typecho的出现让我终结了使用多年的WP，小巧的体积，不错的速度
markdown支持 如果你还不懂markdown语法，请参考markdown语法
由于typecho使用了md语法，那么强烈推荐这篇文章，为你的博客加入目录功能
伪静态 如果想让你的博文地址变成这个样子www.phpgao.com/typecho.html，那就需要开启地址重写功能，俗称伪静态。
这样需要在新链接形式和旧链接形式间做一些转换，而转换的规则就定义在.htaccess或httpd.ini文件里！
linux的下的.htaccess可以直接参考WP的配置，而windows下的IIS请参考如下配置，将下面的代码拷贝至httpd.ini文件，放置到web根目录下
[ISAPI_Rewrite]# 3600 = 1 hourCacheClockRate 3600RepeatLimit 32RewriteRule ^/(admin|usr)/(.*) /$1/$2 [L]RewriteRule ^/(.*).html$ /index.php/$1.html [L]RewriteRule ^/archives/(.*) /index.php/archives/$1 [L]RewriteRule ^/category/(.*) /index.php/category/$1 [L]RewriteRule ^/author/(.*) /index.php/author/$1 [L]RewriteRule ^/([0-9]+)/([0-9]+)/$ /index.php/$1/$2/ [L]RewriteRule ^/tag/(.*)/$ /index.php/tag/$1 [L]RewriteRule ^/search/(.*)/$ /index.php/search/$1 [L]RewriteRule ^/(.*)page/(.*) /index.php/$1page/$2 [L]RewriteRule ^/(feed.*) /index.php/$1 [L]RewriteRule ^/action/(.*) /index.php/action/$1 [L]RewriteRule ^/(.*)comment /index.php/$1/comment [L]RewriteRule ^/sitemap /index.php/sitemap [L]RewriteRule ^/go/(.</description>
    </item>
    
    <item>
      <title>让typecho支持table-of-contents</title>
      <link>https://phpgao.github.io/typecho_toc.html</link>
      <pubDate>Thu, 24 Jul 2014 08:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_toc.html</guid>
      <description>什么是toc? [toc]
 table of contents 即文章目录
 toc有什么用  废话，你说目录有啥用，方便查找呗
 使用typecho的TX，一定会一点markdown吧，在文章中如果出现##this&#39;s h2 tag##，会被程序转换为
&amp;lt;h2&amp;gt;this&#39;s h2 tag&amp;lt;/h2&amp;gt; 一个h标签就好比一本书的各个章节，如果我们能把他们清点一下，组成一个目录输出，岂不是妙哉！
TOC如何使用 简单到不能再简单，在你想插入目录的地方放一个[toc]或[TOC]即可(推荐大写)！
 [TOC]必须处于顶格
 typecho中的markdown typecho的源代码中已经使用了激进的MarkdownExtraExtended类来转化md文件，为什么说他很激进呢？因为他扩展了标准的markdown，添加了很多个性化的语法，如直接给元素添加id或者class，还有脚注、缩写词等，用起来确实很爽！但需要注意的是：太多的非标准语法可能会带来移植性差的问题
具体的语法参考请看这里php Markdown Extra
如何使typecho支持toc 要使typecho支持toc需要替换位于源程序中的/wwwroot/var/文件夹下的MarkdownExtraExtended.php 为 MarkdownExtraExtended.php
原理 这个文件的作用就是为typecho提供md2html的作用，我修改了MarkdownExtraExtended类的__construct方法，为block_gamut数组添加了 doToc 处理模块，并把优先级降到最低。
转换细节位于doToc与_doToc_callback中，在此不作赘述。
不完美的地方  要是能加入一个锚点之间平滑滚动的效果就更完美了，改天写个插件弄一弄 在首页也能看到目录，改天看看源代码研究一下，看能不能解决 希望后台加一个选项，自动生成目录，这个比较麻烦，以后看情况解决  </description>
    </item>
    
    <item>
      <title>如何防止你的网站被百度转码</title>
      <link>https://phpgao.github.io/baidu_siteapp_forbid.html</link>
      <pubDate>Wed, 18 Jun 2014 03:40:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/baidu_siteapp_forbid.html</guid>
      <description>&lt;p&gt;现在只要新一点的HTML页面都会支持响应式，但是在移动端百度会把本来整齐的页面强行转码成他所需要的格式来呈现，简直是丑爆了！而且URL也会变的很长，简直对不起我的伪静态！！最近UC（也可以说是阿里，更可以说是马大帅）也开始搞这个事儿了  &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>google被封的几个解决办法</title>
      <link>https://phpgao.github.io/higoogle.html</link>
      <pubDate>Fri, 13 Jun 2014 08:03:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/higoogle.html</guid>
      <description>唉。。。功夫网大开杀戒了。P民如何应对，请看下面的网址
http://www.googlestable.com/
https://s3-ap-southeast-1.amazonaws.com/google.cn/index.html
http://ls.ganquancun.com/ggip/
http://www.hotbot.com/
http://www.dogpile.com/
https://www.projecth.us/sources
这篇文章教你怎么配置go-agent代理*翻**q墙，推荐一下，点我</description>
    </item>
    
    <item>
      <title>windows远程连接优化</title>
      <link>https://phpgao.github.io/win7_mstsc.html</link>
      <pubDate>Mon, 09 Jun 2014 08:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/win7_mstsc.html</guid>
      <description>工作需要必须使用mstsc(Microsoft terminal services client)连接生产服务器，之前因为不知什么原因，mstsc开始很卡，所以用了teamviewer一段时间，感觉还是不如mstsc稳定
但是win7的mstsc问题多多，一个一个说吧
总是新建进程 每次使用保存好的密码登陆后总是和上一次显示的桌面环境不一样，就好像注销了一样，每次都要在任务管理器里切换一回，很是麻烦，原因是mstsc新建了一个进程，导致了操作环境的初始化，按照老高的方法试试：
  运行mstsc时在后面加上 /admin，原理是直接接管控制台
 mstsc /admin   在目标机器上设置一下 这是由于远程桌面允许一个用户可以有多个远程会话，如果不想有这个效果，可以在目标机器运行gpedit.msc，然后进入组策略-计算机设置-管理模板-终端服务，设置限制终端服务用户到一个远程会话为启用即可。
  3.开始-管理工具-终端服务配制-设置
 连接 - RDP-TCP - 网卡 - 2个链接 服务器设置 - 限制用户使用一个会话 开始&amp;mdash;控制面板&amp;mdash;授权&amp;mdash;选择“每设备或每用户”&amp;mdash;否&amp;mdash;确定
 连接后操作很卡 原因在于从vista开始，微软在TCP/IP协议栈里新加了一个叫做Window Auto-Tuning的功能。这个功能本身的目的是为了让操作系统根据网络的实时性能（比如响应时间）来动态调整网络上传输的数据窗口的大小，从而达到实时优化网络性能的目的。但是，在某种情况下，这个功能反而会使远程桌面的响应变的非常的慢。解决办法如下：
开始-运行-输入
netsh interface tcp set global autotuninglevel=disabled 端口修改 端口3389表示亚历山大！换一个自己喜欢的数字吧，嫌麻烦的TX可以直接百度 mstsc端口修改工具
 打开“开始→运行”，输入&amp;quot;regedit&amp;quot;，打开注册表，进入以下路径：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp, 修改PortNamber值3389为3390。 打开[HKEY_LOCAL_MACHINE\SYSTEM\CurrentContro1Set\Control\Tenninal Server\WinStations\RDP\Tcp, 将PortNumber值3389为3390。 修改完毕，重启以下服务(控制面板中的服务中)： Microsoft Remote Desktop Connection 和 Remote Desktop Services UserMode Port Redirector 登陆方式[IP:3390] 部分转自网络！  </description>
    </item>
    
    <item>
      <title>PHP之负载均衡下的session共用(Memcache实现)</title>
      <link>https://phpgao.github.io/memcache_session.html</link>
      <pubDate>Mon, 19 May 2014 08:08:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/memcache_session.html</guid>
      <description>转自http://www.cnblogs.com/see7di/p/3560329.html
此代码片段的功能是在做均衡负载的时候将session的维护工作交给Memcached，这样不仅性能上来了，session不同步的问题也解决了！
但是要求做Memcache的计算机内存要足够大！
$_ENV=array(&#39;SYS&#39;=&amp;gt;array(&#39;Memip&#39;=&amp;gt;&#39;127.0.0.1&#39;, //MEMCACHE的ip&#39;Mempt&#39;=&amp;gt;11211, //MEMCACHE的port&#39;Memtim&#39;=&amp;gt;10, //MEMCACHE的超时时间));//托管SESSION到MEMCACHE,如果开启失败,则说明MEMCACHE没有配置正确final class S{public static function open(){//禁止session自动开启session_write_close();ini_set(&#39;session.auto_start&#39;,0);//使用五十分之一的概率启动GC清理会话ini_set(&#39;session.gc_probability&#39;,1);ini_set(&#39;session.gc_divisor&#39;,50);ini_set(&#39;session.use_cookies&#39;,1);//session的寿命//ini_set(&#39;session.gc_maxlifetime&#39;,$_ENV[&#39;SYS&#39;][&#39;Memtim&#39;]);//ini_set(&#39;session.cookie_lifetime&#39;,$_ENV[&#39;SYS&#39;][&#39;Memtim&#39;]);//ini_set(&#39;session.save_handler&#39;,&#39;files&#39;);//ini_set(&#39;session.save_path&#39;,Run.&#39;_tmp&#39;);//ini_set(&#39;session.save_handler&#39;,&#39;memcache&#39;);//ini_set(&#39;session.save_path&#39;,&#39;tcp://127.0.0.1:11211&#39;);//$_ENV[&#39;S_tim&#39;] = ini_get(&#39;session.gc_maxlifetime&#39;);//建立memcache对象$_ENV[&#39;S_mem&#39;]=new Memcache;$_ENV[&#39;S_mem&#39;]-&amp;gt;connect($_ENV[&#39;SYS&#39;][&#39;Memip&#39;],$_ENV[&#39;SYS&#39;][&#39;Mempt&#39;]) or die(&#39;Memcache连接失败!&#39;);return TRUE;}/**读取返回:读到的内容/**/public static function read($id){return $_ENV[&#39;S_mem&#39;]-&amp;gt;get(&#39;s_&#39;.$id);}/**写入返回:bool/**/public static function write($id,$data){return $_ENV[&#39;S_mem&#39;]-&amp;gt;set(&#39;s_&#39;.$id,$data,MEMCACHE_COMPRESSED,$_ENV[&#39;SYS&#39;][&#39;Memtim&#39;]);}/**关闭返回:bool/**/public static function close(){$_ENV[&#39;S_mem&#39;]-&amp;gt;close();unset($_ENV[&#39;S_mem&#39;],$_ENV[&#39;SYS&#39;][&#39;Memtim&#39;]);return TRUE;}/**删除返回:bool/**/public static function destroy($id){return $_ENV[&#39;S_mem&#39;]-&amp;gt;delete(&#39;s_&#39;.</description>
    </item>
    
    <item>
      <title>搜索引擎优化入门</title>
      <link>https://phpgao.github.io/seo.html</link>
      <pubDate>Sun, 11 May 2014 03:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/seo.html</guid>
      <description>本文适合新手老手，有不对的地方欢迎指正！ 如果有什么问题或者建议，请务必留言， :-)
老高很高兴与大家交流！ 同时欢迎关注我的微博
写在前面：搜索引擎是个很神奇的东西，脾气捉摸不定，动不动就学个新算法让你不得安居乐业。许多新手都会觉得想让搜索引擎收录真难啊！ 那么对于刚刚建成的新站和收录有问题的旧站，如何才能让搜索引擎顺利的收录你的网站呢？ 花点时间看完本文，我相信你对SEO的理解一定会更加透彻。 预先约定几个说法(不分大小写)
 wordpress -&amp;gt;wp Search Engine Optimization-&amp;gt;SEO Uniform Resource Locator -&amp;gt;URL 下面老高就针对wordpress的SEO优化讲讲具体的步骤：  浅谈URL的优化 说到SEO，最先想到的应该是URL了，什么！你不知道URL是啥？ 8-O 简单地说，URL就是
 统一资源定位符（Uniform Resource Locator，缩写为URL）是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。https://blog.phpgao.com/ 就是一个URL，访客和搜索引擎就是靠他找到你的资源。URL的优化其实很简单，做到以下几点就OK!
 伪静态 美化你的URL显示格式，即做好伪静态，打个例子，本文的URL默认为www.phpgao.com/?p=***|的形式，\*|为文章的数字ID，但是实际上他显示为www.phpgao.com/seo.html，如果这两个URL都指向同一篇文章，哪一个更能勾起你的欲望呢？同样的，搜索引擎也会试着理解你的URL ，然后抓取你的内容，分以适当的权重 -&amp;ndash;|- 那么如何设置成这样的形式呢？首先需要了解伪静态、404错误、linux、win主机等概念，后面章节有讲。
网站地图 URL格式确定以后下面就要把你的URL告诉搜索引擎了，所以你需要一个**网站地图**，他可以告诉搜索引擎网站是什么结构，哪些页面比较重要，哪些可以忽略，有利于搜索引擎抓取。
robots.txt robots的作用是控制爬虫的抓取范围，举个比方，你可以禁止爬虫收录你的wp-admin文件夹下所有文件，这样可以保证安全性。你需要明确的是，爬虫来到你的网站，就像吃货进了一个自助餐馆一样，只要能吃的他都不放过，如果你放任不管，那么可能他会把你和你太太盘子里的饭菜都会吃掉。所以你必须告诉他：“爬虫兄啊，你不能吃这个，这个是桌子！”。简单的介绍一下用法：
 请将robots.txt放到网站的根目录下，你可以参考一下www.taobao.com/robots.txt(百度中枪) 编码无所谓，一般不会出现中文 第一行写User-agent: * 意思只针对所有搜索引擎的爬虫 紧接着Disallow: /wp-* 意思是不允许看wp-开头的所有文件 你可以写很多个Disallow规则，记得首字母要大写 你还可以在文件中指明sitemap路径 Sitemap: https://blog.phpgao.com/sitemap robots.txt不要过于复杂 robots文件真的很重要，老高之前写过一个爬网页的程序放到了某个二级目录下，并在首页加了链接，但是忘记了屏蔽搜索引擎，导致谷歌收录了本站的9000多个垃圾内容页 :-( ，悲剧啊！话说百度还是很谨慎的，就是不收录！  提交入口&amp;ndash;来我家玩吧! 提供几个提交网站的入口，此步是通知搜索引擎来收录你的网站
 百度网站登录入口 Google网站登录入口 360网站登录入口 Bing网站登录入口 搜狗网站收录提交入口这步最简单了！不要偷懒哦！ 8-)  站长工具&amp;ndash;查询收录的利器 站长工具就站长管理网站收录，转化率等信息的瑞士军刀</description>
    </item>
    
    <item>
      <title>为wordpress精简head标签</title>
      <link>https://phpgao.github.io/cut_head.html</link>
      <pubDate>Sat, 10 May 2014 04:24:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/cut_head.html</guid>
      <description>一般wordpress主题都会在head标签之间使用wp_head()函数，因为这是个很重要的头部函数，很多功能插件都会用到它。 不过，如果你的wordpress主题用到了该函数，则会在head头部显示许多冗余的代码。
如果希望移除wordpress头部的多余代码，可以使用以下方法解决： 在主题文件夹下的functions.php文件中加入以下代码：
remove_action( &#39;wp_head&#39;, &#39;wp_generator&#39; );//WordPress版本信息。remove_action( &#39;wp_head&#39;, &#39;parent_post_rel_link&#39;, 10, 0 );//最后文章的urlremove_action( &#39;wp_head&#39;, &#39;start_post_rel_link&#39;, 10, 0 );//最前文章的urlremove_action( &#39;wp_head&#39;, &#39;adjacent_posts_rel_link_wp_head&#39;, 10, 0 );//上下文章的urlremove_action( &#39;wp_head&#39;, &#39;feed_links_extra&#39;, 3 );//去除评论feedremove_action( &#39;wp_head&#39;, &#39;feed_links&#39;, 2 );//去除文章的feedremove_action( &#39;wp_head&#39;, &#39;rsd_link&#39; );//针对Blog的离线编辑器开放接口所使用remove_action( &#39;wp_head&#39;, &#39;wlwmanifest_link&#39; );//如上remove_action( &#39;wp_head&#39;, &#39;index_rel_link&#39; );//当前页面的urlremove_action( &#39;wp_head&#39;, &#39;wp_shortlink_wp_head&#39;, 10, 0 );//短地址 来源: http://www.daxiawp.com/remove-wordpress-head-code.html</description>
    </item>
    
    <item>
      <title>WordPress首页文章不显示全文的方法</title>
      <link>https://phpgao.github.io/wordpress_excerpt.html</link>
      <pubDate>Sat, 10 May 2014 03:50:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/wordpress_excerpt.html</guid>
      <description>博客用的国外的主题，对中文处理不是太好。尤其是首页会把文章的全部内容都输出，使首页变得很长，对于我这种爱贴代码的程序猿来说，这个病，必须治！
解决办法有三种：
 more标签 自己写方法截取文字 the_excerpt()  more标签 以下引用sumile_ting 的话：
这种方法是在每次写文章时在文章中插入一个More标签。
添加More标签的方法：
 写文章时，在需要作为摘要的地方点击编辑器中的More标签，或在HTML编辑状态加加入&amp;lt;!–more–&amp;gt;，或者直接按Alt+Shift+T,3种方法任选其一。
 这种方法使用起来太麻烦，要求每一篇文章都得手动加，一不小心可能就忘记了。还不如修改主题模板来的方便快捷。
自造方法 自己写方法必须对function.php和content.php做改写，先找到
&amp;lt;?php the_content(); ?&amp;gt; the_content()方法返回了文章的内容，处理一下就可以限制字数了，具体方法请自查。
但是对于我还是不合适，因为此时文章还没有被插件渲染，文章内的代码会被直接以纯文本的形式展示，很不和谐。 所以这个方案，pass
the_excerpt() 此方法是wordpress显示文章摘要的API，效果与the_content() 一样，只是这个函数对中文支持不好，需要处理一下
以下是步骤：
方法2的the_content()修改为the_excerpt() 在function下加入以下代码
function custom_excerpt_length( $length ) {return 200;}add_filter( &#39;excerpt_length&#39;, &#39;custom_excerpt_length&#39;, 999 ); 给readmore加个链接，同样在functions.php中添加：
function new_excerpt_more( $more ) {return &#39;&amp;lt;a href=&amp;quot;&#39; . get_permalink() . &#39;&amp;quot;&amp;gt;阅读全文&amp;lt;/a&amp;gt;&#39;;}add_filter(&#39;excerpt_more&#39;, &#39;new_excerpt_more&#39;); 完美解决
参考：
http://sumile.blog.hexun.com/63924812_d.html
http://www.gemshe.com/fashion/suneyeglass/wordpress%E7%9A%84%E6%96%87%E7%AB%A0%E5%BD%A2%E5%BC%8Fget_post_format/
http://www.seanstudio.com/archives/2558
http://www.daxiawp.com/change-to-excerpt.html</description>
    </item>
    
    <item>
      <title>Windows下Apache的配置文件httpd.conf</title>
      <link>https://phpgao.github.io/win-httpd.html</link>
      <pubDate>Sat, 10 May 2014 01:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/win-httpd.html</guid>
      <description>&lt;p&gt;apache的配置文件一直看得我云里雾里的，今天好好把配置文件研究了一下，还是有点收获的。 看httpd.conf的内容，它主要分成3大部分：&lt;/p&gt;
&lt;p&gt;Section 1:Global Environment 
Section 2:&amp;lsquo;Main&amp;rsquo; server configuration 
Section 3:Virtual Hosts&lt;/p&gt;
&lt;p&gt;以后修改配置的时候一定要注意，不要写错了地方&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网站搭建手记</title>
      <link>https://phpgao.github.io/build_notes.html</link>
      <pubDate>Sat, 10 May 2014 01:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/build_notes.html</guid>
      <description>简单的记录一下搭建自己的博客需要做的事情！
确定主题 一个网站的主题很重要，要不然你会无从下手，所以千万不要像我这样开一个这么无聊的blog。为什么说此步骤最难，就是因为点子是最重要的，只要主题（目标）明确，那么建立（实现）它就是易如反掌了。
选域名 域名是什么？其实就是一个网站的艺名而已。人家的网站叫“234.156.78.90”，你的叫“ccav.com”，那么你说那个更容易出名呢？所以，好的域名可能让你的网站迅速火起来。举个小栗子,以前的京东商城的域名是360buy.com，不懂英语的人当然不好记了，现在改名jd.com，既好记又提升了企业形象，何乐而不为呢？（估计这个域名京东花了不少钱）。不建议大家购买com以外的域名，尤其是cn结尾的，至于为什么大家可以自己研究。域名选好了后，就购买空间了。
虚拟主机（网站空间） 光是有了像phpgao.com这样的域名是不够的，因为你需要把你的文章放到互联网上供大家访问，所以你需要一个专用服务器，当然自己搭建服务器也是可以的，但是如果是个规模不大的网站老高建议还是租用吧，我的空间就是淘宝上买的，28半年，香港主机，速度还行。（为什么是香港空间？免备案呗！）
域名与空间的绑定 GOOD！既然你已经有了域名和空间，是时候将它们相互关联了。这一步比较关键！为了让大家更好的理解这一节。老高来举个大栗子，某一天老高要孤身一人拜访位从未谋面的远房亲戚，远程通话后确定目的地，坐飞机2小时（想的好美啊），下飞机后找那个举着牌子的人，我才能顺利见到那位亲戚。也就是说，我从出发到坐飞机，到达后根据牌子辨认身份这一系列的动作如果有一个失误，我的此次出行就是失败的，之后我只能沮丧的回家了。。。反应到现实就是：和我通话的那个人就是域名，他告诉我他在哪个IP等我，等我通过IP到站后，找那个举着牌子的人，这样就完成了一次“见面”。简单的说空间有个IP，你的域名必须解析到那个IP才行，当然不要忘了空间需要和你的域名绑定。
最后的工作 如果域名没有备案的话，那么你的空间应该和我一样不在内地吧。不过不要紧，能访问就行。想要搭建WP这类博客，你的空间还需要一个不是太小的MYSQL空间，也就是传说中的数据库。我的空间是200M+200M型，也就是说我的空间能放小于200M的MP3文件并且在数据库能够存放200M的数据。其实这么点空间建一个站已经很富裕了。（注：国外的空间不是很稳定，一定要定期备份！）</description>
    </item>
    
    <item>
      <title>IIS下wordpress伪静态的配置</title>
      <link>https://phpgao.github.io/iis_static.html</link>
      <pubDate>Sat, 10 May 2014 01:25:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/iis_static.html</guid>
      <description>IIS服务器下伪静态的配置需要参照Apache.htaccess文件。 首先要使IIS支持URL Rewrite，所以必须让服务器加载ISAPI_Rewrite！ 什么是ISAPI_Rewrite？ ISAPI 翻译为：英特网服务器应用编程接口。
最常用的用途是URL Rewrite，辅助动态网站（主要为PHP脚本的程序）实现伪静态功能。
IIS支持ISAPI后就剩下两个步骤了：
1.建立一个httpd.ini文件，文件内容如下：
[ISAPI_Rewrite]# 3600 = 1 hourCacheClockRate 3600RepeatLimit 32# Protect httpd.ini and httpd.parse.errors files# from accessing through HTTP# Rules to ensure that normal content gets throughRewriteRule /sitemap.xml /sitemap.xml [L]RewriteRule /favicon.ico /favicon.ico [L]RewriteRule /sitemap_baidu.xml /sitemap_baidu.xml [L]RewriteRule /sitemap.html /sitemap.html [L]RewriteRule /archivers/(.*) /archivers/$1 [L]# For file-based wordpress content (i.e. theme), admin, etc.RewriteRule /wp-(.</description>
    </item>
    
    <item>
      <title>网页跳转方法集合</title>
      <link>https://phpgao.github.io/page_jumping.html</link>
      <pubDate>Sat, 10 May 2014 01:23:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/page_jumping.html</guid>
      <description>有些网站经常要用到跳转，比如商务通啊，支付宝啊，下面是我总结的几种方法，包括HTML,JS,PHP
PHP的header() &amp;lt;?php//重定向浏览器header(&amp;quot;Location: http://www.phpgao.com&amp;quot;);//确保重定向后，后续代码不会被执行exit();//or die;?&amp;gt; Meta标签 &amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;页面只停留一秒……&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;  JS的location.href //注：此方法容易被拦截&amp;lt;/span&amp;gt;**&amp;lt;script&amp;gt;url=&#39;http://www.phpgao.com&#39;;window.open(url,&#39;_self&#39;); //更改&#39;_self&#39; 就可以实现跳转限制原窗口还是父窗口,子窗口或者新窗口&amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>让使用Apache的网站速度更快</title>
      <link>https://phpgao.github.io/faster_apache.html</link>
      <pubDate>Sun, 20 Apr 2014 15:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/faster_apache.html</guid>
      <description>Apache 2.0在性能上的改善最吸引人.在支持POSIX线程的Unix系统上,Apache可以通过不同的MPM运行在一种多进程与多线程相混合的模式下,增强部分配置的可扩充性能.相比于Apache 1.3,2.0版本做了大量的优化来提升处理能力和可伸缩性,并且大多数改进在默认状态下即可生效.但是在编译和运行时刻,2.0也有许多可以显著提高性能的选择.
MPM（Multi -Processing Modules,多道处理模块） MPM是Apache2.0中影响性能的最核心特性.
毫不夸张地说,MPM的引入是Apache 2.0最重要的变化.大家知道,Apache是基于模块化的设计,而Apache 2.0更扩展了模块化设计到Web服务器的最基本功能.服务器装载了一种多道处理模块,负责绑定本机网络端口、接受请求,并调度子进程来处理请求.扩展模块化设计有两个重要好处:
 apache可以更简洁、有效地支持多种操作系统; 务器可以按站点的特殊需要进行自定制.  在用户级,MPM看起来和其它Apache模块非常类似.主要区别是在任意时刻只能有一种MPM被装载到服务器中. 下面以Linux RedHat AS3为平台,演示一下在Apache 2.0中如何指定MPM.
# wget http://archive.apache.org/dist/httpd/httpd-2.0.52.tar.bz2 # tar jxvf httpd-2.0.52.tar.bz2 # cd httpd-2.0.52 # ./configure ——help|grep mpm  显示如下:
——with-mpm=MPM Choose the process model for Apache to use. MPM={beos|worker|prefork|mpmt\_os2| perchild|leader|threadpool}  上述操作用来选择要使用的进程模型,即哪种MPM模块.Beos、mpmt_os2分别是BeOS和OS/2上缺省的MPM, perchild主要设计目的是以不同的用户和组的身份来运行不同的子进程.这在运行多个需要CGI的虚拟主机时特别有用,会比1.3版中的SuExec 机制做得更好.leader和threadpool都是基于worker的变体,还处于实验性阶段,某些情况下并不会按照预期设想的那样工作,所以 Apache官方也并不推荐使用.因此,我们主要阐述prefork和worker这两种和性能关系最大的产品级MPM.
prefork的工作原理 如果不用“——with-mpm”显式指定某种MPM,prefork就是Unix平台上缺省的MPM.它所采用的预派生子进程方式也是 Apache 1.3中采用的模式.prefork本身并没有使用到线程,2.0版使用它是为了与1.3版保持兼容性;另一方面,prefork用单独的子进程来处理不同的请求,进程之间是彼此独立的,这也使其成为最稳定的MPM之一.
prefork的工作原理是,控制进程在最初建立“StartServers”个子进程后,为了满足MinSpareServers设置的需要创建一个进程,等待一秒钟,继续创建两个,再等待一秒钟,继续创建四个……如此按指数级增加创建的进程数,最多达到每秒32个,直到满足 MinSpareServers设置的值为止.这就是预派生（prefork）的由来.这种模式可以不必在请求到来时再产生新的进程,从而减小了系统开销以增加性能.
worker的工作原理 相对于prefork,worker是2.0 版中全新的支持多线程和多进程混合模型的MPM.由于使用线程来处理,所以可以处理相对海量的请求,而系统资源的开销要小于基于进程的服务器.但是, worker也使用了多进程,每个进程又生成多个线程,以获得基于进程服务器的稳定性.这种MPM的工作方式将是Apache 2.0的发展趋势. worker的工作原理是,由主控制进程生成“StartServers”个子进程,每个子进程中包含固定的ThreadsPerChild 线程数,各个线程独立地处理请求.同样,为了不在请求到来时再生成线程,MinSpareThreads和MaxSpareThreads设置了最少和最多的空闲线程数;而MaxClients设置了所有子进程中的线程总数.如果现有子进程中的线程总数不能满足负载,控制进程将派生新的子进程.
下面我以worker模式进行编译安装
# ./configure --prefix=/usr/local/apache --with-mpm=worker --enable-so# #注释（让它支持DSO功能,这样以后可以动态加载模块）# make# make install# cd /usr/local/apache/conf# vi httpd.</description>
    </item>
    
    <item>
      <title>CSS十条速记口诀</title>
      <link>https://phpgao.github.io/10_css_mnemonics.html</link>
      <pubDate>Thu, 10 Apr 2014 15:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/10_css_mnemonics.html</guid>
      <description>如果在用CSS设计布局时遇到BUG，请认真阅读以下内容，非常容易记忆的，不知道哪位高人把CSS BUG编成了顺口溜了！看看好不好记住呢？
 IE边框若显若无，须注意，定是高度设置已忘记 浮动产生有缘故，若要父层包含住，紧跟浮动要清除，容器自然显其中 三像素文本慢移不必慌，高度设置帮你忙 兼容各个浏览须注意，默认设置行高可能是杀手 独立清除浮动须铭记，行高设无，高设零，设计效果兼浏览 学布局须思路，路随布局原理自然直，轻松驾驭html，流水布局少hack，代码清爽，兼容好，友好引擎喜欢迎。 所有标签皆有源，只是默认各不同，span是无极，无极生两仪—内联和块级，img较特殊，但也遵法理，其他只是改造各不同，一个*号全归原，层叠样式理须多练习，万物皆规律。 图片链接排版须小心，图片链接文字链接若对齐，padding和vertical-align:middle要设定，虽差微细倒无妨。 IE浮动双边距，请用display：inline拘。 列表横向排版，列表代码须紧靠，空隙自消须铭记。 (转自php100)  </description>
    </item>
    
    <item>
      <title>WP常用SQL总结</title>
      <link>https://phpgao.github.io/wordpress_sql.html</link>
      <pubDate>Wed, 02 Apr 2014 15:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/wordpress_sql.html</guid>
      <description>运行SQL一定要备份，以防万一！先来看看每个表的功能吧 wp_commentmeta：存储评论的元数据 wp_comments：存储评论 wp_links：存储友情链接（Blogroll） wp_options：存储WordPress系统选项和插件、主题配置 wp_postmeta：存储文章（包括页面、上传文件、修订）的元数据 wp_posts：存储文章（包括页面、上传文件、修订） wp_terms：存储每个目录、标签 wp_term_relationships：存储每个文章、链接和对应分类的关系 wp_term_taxonomy：存储每个目录、标签所对应的分类 wp_usermeta：存储用户的元数据 wp_users：存储用户信息 删除残留垃圾数据 使用WordPress经常换主题删主题，装插件删插件很正常，但是简单的删除并不彻底，数据库会有残留，多余的数据保留在post_meta表格里，久而久之就成了一堆可观的垃圾。可使用下面的SQL语句来清除不需要的postmeta值。有益于加快数据库运行速度，减小数据。 执行SQL语句
DELETE FROM wp_postmeta WHERE meta_key = &#39;_edit_lock&#39;;DELETE FROM wp_postmeta WHERE meta_key = &#39;_edit_last&#39;; 删除草稿修订版本 在WordPress后台中编辑文章时，系统会自动保存许多修订的副本。过多的修订记录会加重数据库的负担并造成了资源的浪费。数据库越来越庞大，增加了数据检索影响页面的加载时间。 执行SQL语句
DELETE a,b,c FROM wp_posts aLEFT JOIN wp_term_relationships b ON (a.ID = b.object_id)LEFT JOIN wp_postmeta c ON (a.ID = c.post_id)WHERE a.post_type = &#39;revision&#39; 注意：此方法将删除所有的文章的所有修订版，包括相关的meta数据。
处理未使用的标签 在WordPress数据库中，如果你使用一个查询语句手动来删除旧的文章，旧的标签却仍然会保留并在你的标签云/列表中出现。你可以使用下面的方法识别未使用的标签并将它删除。 执行SQL语句
SELECT * FROM wp_terms wtINNER JOIN wp_term_taxonomy wtt ON wt.</description>
    </item>
    
    <item>
      <title>dede栏目路径自动生成</title>
      <link>https://phpgao.github.io/dede_catalog.html</link>
      <pubDate>Sat, 29 Mar 2014 15:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/dede_catalog.html</guid>
      <description>&lt;p&gt;抽空写了个这。。。虽然很头大，但是还是写完了。 下面由我来翻译下面这一大段话，首先，函数使用了PINYIN函数，将栏目名称转化成英文缩写，剩下的工作就是拼接和查询了，其实原理很简单。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wordpress自动生成文章目录</title>
      <link>https://phpgao.github.io/auto_index.html</link>
      <pubDate>Sun, 16 Mar 2014 15:20:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/auto_index.html</guid>
      <description>看过百度百科的同学都知道，如果百科文章比较长，那么他会生成一个目录，不仅增强了用户体验，还为文章引入了锚点内链，对SEO优化起到了十分积极的作用。
请不要以为这个功能很复杂，其实目录功能只是牵扯到一个正则，一个JS和一个CSS而已，对于我们wordpress来说，很多插件已经实现了此功能。
老高@PHPer使用的是一款名叫Content Index for WordPress的国人自制插件，功能强大，使用方便。
Content Index for WordPress 安装 wordpress内置的插件管理器搜索&amp;quot;Content Index for WordPress&amp;quot;，安装即可。
使用 安装后请至wordpress后台-&amp;gt;设置-&amp;gt;文章内索引： 老高@PHPer使用如下配置：
开启 插件默认对所有文章关闭，如果你想在某一篇文章中使用目录，请在编辑日志页面勾选  在此文章/页面中开启
 Tips 也许你已经发现了，PHPer@老高使用了锚点之间的平滑滚动，如果你也希望实现此效果，请将下面的代码引入你的文章模板中
$(document).ready(function() {$(&#39;a[href*=#]&#39;).click(function() {if (location.pathname.replace(/^\//, &#39;&#39;) == this.pathname.replace(/^\//, &#39;&#39;) &amp;amp;&amp;amp; location.hostname == this.hostname) {var $target = $(this.hash);$target = $target.length &amp;amp;&amp;amp; $target || $(&#39;[name=&#39; + this.hash.slice(1) + &#39;]&#39;);if ($target.length) {var targetOffset = $target.offset().top;$(&#39;html,body&#39;).animate({scrollTop: targetOffset},1000);return false;}}});}); 注意 可能你还没发现，上面的代码会出现一些小问题，比如你的网站留言也会出现某些锚点，点击它们将会出现很多意想不到的效果，所以我们需要将锚点控制在目录范围内 因此，我们需要在第二行的Jquery代码做一些修改 $(&#39;a[href*=#]&#39;).</description>
    </item>
    
    <item>
      <title>HTTP状态码详解</title>
      <link>https://phpgao.github.io/http_status_code.html</link>
      <pubDate>Sat, 15 Mar 2014 15:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/http_status_code.html</guid>
      <description>什么是HTTP状态码 HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。所有状态码的第一个数字代表了响应的五种状态之一。
状态码的具体含义 1xx 消息
这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。
100
客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。
101
服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。
102
由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。
2xx 成功 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。
200
请求已成功，请求所希望的响应头或数据体将随此响应返回。
201
请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 &amp;lsquo;202 Accepted&amp;rsquo;。
202
服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。
203
服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。
204
服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。
205
服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。
206
服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 响应必须包含如下的头部域： Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 Date ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</description>
    </item>
    
    <item>
      <title>新思路解决网站301重定向</title>
      <link>https://phpgao.github.io/301_redirect.html</link>
      <pubDate>Fri, 14 Mar 2014 15:15:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/301_redirect.html</guid>
      <description>对于一个新手站长来说，当你选定了主域名后，首先要做的就是将另一个域名301重定向至主域名，这样有利于增加首页的权重。当然，301重定向技术还有很多用处，但本文主要阐述相同域名间的301跳转。
什么是301重定向？ 其实很简单，当你的页面需要删除或者移动时，如果只是一个简单的跳转，虽然说在功能上实现了网页的重定向，但是这样做是对搜索引擎很不利的。也就是说，搜索引擎看不懂这样的跳转，他只会认为你的网页内容空了，所以必须要通过一个信号来告诉搜索引擎这个地址确实改变了，这个信号的实现就是3××，即以3开头的HTTP状态码(状态码参见 HTTP状态码详解)。
测试方法 了解了301重定向后，下面几个网站可以提供301跳转的检测
 中文：http://tool.chinaz.com/pagestatus/?url=phpgao.com 英文：http://www.seoconsultants.com/tools/check-server-headers-tool/  实现方法 废话不多说，下面我们探讨一下301重定向的具体实现方法：
linux主机的301重定向 linux主机非常适合wordpress，因为他有一个强大的**.htaccess**文件，当浏览器或搜索引擎spider发送一个页面请求时，Web服务器就会检查**.htaccess**文件，这个文件指明了如何处理页面请求，通过修改他就可以告知搜索引擎某个页面是302转向(临时跳转)还是301重定向(永久性跳转)。
下面的例子的作用是将phpgao.com的请求301重定向至www.phpgao.com
Options +FollowSymLinksRewriteEngine onrewritecond %{http_host} ^phpgao.com$ [nc]rewriterule ^(.*)$ https://blog.phpgao.com/$1 [r=301,nc]或RewriteEngine OnRewriteCond %{HTTP_HOST} !^phpgao.com$ [NC]RewriteRule ^(.*)$ https://blog.phpgao.com/$1 [L,R=301] windows主机的301重定向 windows主机基本使用的都是IIS服务器，所以需要服务器支持ISAPI_Rewrite，他是类似Apache mod_rewrite功能的第三方Rewrite组件，使用httpd.ini为配置文件,一般空间都是支持的，如果是自己的服务器，那么可能需要你自己安装此组件，所需组件可以在http://www.isapirewrite.com/下载，该组件有免费Lite版本以及商业版，免费版只支持全局的httpd.conf 配置，商业版支持用户自定义httpd.ini文件，支持目录和站点级的类似.htaccess的配置，现在最新版本是3.0。例子如下：
# ISAPI_Rewrite 1.3 版本[ISAPI_Rewrite]# 3600 = 1 hourCacheClockRate 3600RepeatLimit 32RewriteCond Host: ^phpgao\.com$RewriteRule (.*) http\://www\.phpgao\.com$1 [I,R]# ISAPI_Rewrite 2.x 版本[ISAPI_Rewrite]# 3600 = 1 hourCacheClockRate 3600RepeatLimit 32RewriteCond Host: ^phpgao\.</description>
    </item>
    
    <item>
      <title>美化Apache的文件列表</title>
      <link>https://phpgao.github.io/prettify_index.html</link>
      <pubDate>Fri, 28 Feb 2014 07:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/prettify_index.html</guid>
      <description>此篇针对apache服务器，其他服务器还在研究中 PC端：
手机端：
此为原帖地址，讲得有点简单了，本人总结并修改了一下，发现只要遵循我的步骤，一定能开启！ (系统不限win,linux)
开启美化文件列表步骤：
 打开Apache的autoindex模块 开启htaccess及includes  &amp;lt;Directory &amp;#34;../htdocs&amp;#34;&amp;gt; Options Indexes FollowSymLinks MultiViews IncludesNoExec AllowOverride All Order allow,deny allow from all 打开ssi(shtml)功能 去注释 AddType text/html .shtml AddOutputFilter INCLUDES .shtml 将压缩包解压至web根目录 enjoy  下载地址提取码：rod5</description>
    </item>
    
    <item>
      <title>favicon优化</title>
      <link>https://phpgao.github.io/favicon.html</link>
      <pubDate>Fri, 14 Feb 2014 07:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/favicon.html</guid>
      <description>现代浏览器会自动识别favicon，只要放到网站根目录就OK，但是完美一点的话就参考以下代码：
&amp;lt;link href=&amp;#34;/favicon.ico&amp;#34; mce_href=&amp;#34;/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;/favicon.ico&amp;#34; mce_href=&amp;#34;/favicon.ico&amp;#34; rel=&amp;#34;bookmark&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;apple-touch-icon&amp;#34; href=&amp;#34;https://blog.phpgao.com/usr/themes/default/img/apple-touch-icon-57x57.png&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;apple-touch-icon&amp;#34; sizes=&amp;#34;72x72&amp;#34; href=&amp;#34;https://blog.phpgao.com/usr/themes/default/img/apple-touch-icon-72x72.png&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;apple-touch-icon&amp;#34; sizes=&amp;#34;114x114&amp;#34; href=&amp;#34;https://blog.phpgao.com/usr/themes/default/img/apple-touch-icon-114x114.png&amp;#34; /&amp;gt;&amp;lt;link rel=&amp;#34;apple-touch-icon&amp;#34; sizes=&amp;#34;120x120&amp;#34; href=&amp;#34;https://blog.phpgao.com/usr/themes/default/img/apple-touch-icon-120x120.png&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;apple-touch-icon&amp;#34; sizes=&amp;#34;152x152&amp;#34; href=&amp;#34;https://blog.phpgao.com/usr/themes/default/img/apple-touch-icon-152x152.png&amp;#34; /&amp;gt; 很简单吧，根据rel属性就能判断出来，shortcut icon为默认的图标，bookmark就是加入收藏栏的图标，最后一个就是在IOS系统上使用的图标啦</description>
    </item>
    
  </channel>
</rss>
