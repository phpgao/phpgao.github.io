<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>代码人生 on 老高的技术博客</title>
    <link>https://phpgao.github.io/categories/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/</link>
    <description>Recent content in 代码人生 on 老高的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Oct 2020 08:04:00 +0000</lastBuildDate><atom:link href="https://phpgao.github.io/categories/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>获取QQ头像</title>
      <link>https://phpgao.github.io/qq_face_url.html</link>
      <pubDate>Mon, 26 Oct 2020 08:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/qq_face_url.html</guid>
      <description>&lt;p&gt;最近有一个需求，某个需求的某个功能是获取QQ号码的头像，虽然QQ内部有方法能够获取到这个头像的URL，但是多一次请求总是会对性能有影响，所以最后搜索到了一种方法，只要只到对方的QQ号码，就可以拿到Ta的头像。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git-批量删除tag</title>
      <link>https://phpgao.github.io/git_delete_tags.html</link>
      <pubDate>Fri, 13 Dec 2019 02:12:21 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_delete_tags.html</guid>
      <description>一句话代码
# 批量删除远程tag git tag -l|xargs git push origin --delete tag # 批量删除本地tag git tag -l|xargs git tag -d </description>
    </item>
    
    <item>
      <title>golang的goproxy</title>
      <link>https://phpgao.github.io/goproxy.html</link>
      <pubDate>Tue, 26 Nov 2019 05:13:26 +0000</pubDate>
      
      <guid>https://phpgao.github.io/goproxy.html</guid>
      <description>既然go module已经官方支持，那么以后新建项目就直接go mod init了，但是老高在最近的开发中遇到了一个超级难题，包下不下来。。。
经过一番摸索和尝试，发现最好用的还是GOPROXY，于是给大家推荐几个GOPROXY地址，方便后期使用
export GOPROXY=https://goproxy.cn,direct, export GOPROXY=https://goproxy.io,direct, export GOPROXY=https://mirrors.aliyun.com/goproxy,direct, </description>
    </item>
    
    <item>
      <title>一个flag引发的惨案(memcached)</title>
      <link>https://phpgao.github.io/memcached_flag_error.html</link>
      <pubDate>Wed, 20 Nov 2019 05:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/memcached_flag_error.html</guid>
      <description>&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;老高最近在重构一个服务，流程中有一步需要将数据格式化后放入memcached中，改数据之后会被另一个服务消费。老高使用的Python的&lt;code&gt;pymemcache&lt;/code&gt;包，调用add方法后没有错误。然后通知另一个JAVA服务来读数据，JAVA使用的包名为&lt;code&gt;com.danga.MemCached&lt;/code&gt;。该服务接受到消费任务后就来找之前放在memecached中的数据，好的！问题来了。&lt;/p&gt;
&lt;p&gt;JAVA用什么方法都读不到Python放进去的数据，但是JAVA自己放自己取是能读到的。
PYTHON同理，能够读到自己设置的数据，但是读取JAVA程序设置的值有乱码。
通过命令行设置的值JAVA读取有问题，Python没问题。&lt;/p&gt;
&lt;p&gt;程序猿的直觉告诉我，肯定是库出了问题！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>玩转VPS之快速搭建HTTP代理</title>
      <link>https://phpgao.github.io/vps_tinyproxy.html</link>
      <pubDate>Sat, 31 Aug 2019 03:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/vps_tinyproxy.html</guid>
      <description>&lt;p&gt;起因：今天想给家里的服务器装一个MacOS，于是果断打开小兵的下载页面，找到最新的14版系统，但是发现一个问题，不论怎么操作，下载速度都不会超过200KB/S，只有氪金了(迅雷)速度才能达到5M，这可难倒了老高！&lt;/p&gt;
&lt;p&gt;不过随着老高的不断尝试，发现使用搬瓦工VPS，直接wget下载速度是8M，稳定的8M，竟然比迅雷都快一点。好嘛，找到了突破口，下面的事情就是如何通过VPS把这个6G大的镜像运到本地！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次frp的被阻断的问题</title>
      <link>https://phpgao.github.io/frp_tcp_reset.html</link>
      <pubDate>Fri, 30 Aug 2019 16:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/frp_tcp_reset.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作为一个合格的程序员，应该抱着在哪里都要加班的理想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了在家调试方便，老高使用frp将自己放在公司的开发机器的ssh端口开放出来了，但是配置frp客户端的过程中总是出现下面的一句话：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;2019/08/30 23:42:47 [W] [service.go:82] login to server failed: EOF
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开始怀疑是frp的版本问题，于是客户端和服务端都换上了最新的版本，结果还是无法解决问题，继续尝试更换端口，问题依旧。&lt;/p&gt;
&lt;p&gt;网上搜索一圈，发现遇到&lt;code&gt;login to server failed: EOF&lt;/code&gt;问题的人还真不少，下面看看老高是如何解决的吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chrome再一次隐藏了http(s)和www</title>
      <link>https://phpgao.github.io/chrome_hide_https_www.html</link>
      <pubDate>Sat, 10 Aug 2019 09:50:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/chrome_hide_https_www.html</guid>
      <description>&lt;p&gt;Google又出来作恶了，虽然比上一次能好那么一点，只隐藏了www一个二级域名，话不多说，赶紧改回来！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2019/08/751830664.png&#34; alt=&#34;https://blog.phpgao.com&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始编译wow私服</title>
      <link>https://phpgao.github.io/wow_server.html</link>
      <pubDate>Sat, 27 Jul 2019 08:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/wow_server.html</guid>
      <description>&lt;p&gt;自从魔兽世界开始转为月卡时，老高就基本AFK了。。。直到偶然听到歌单里的灰熊丘陵、风暴群山的BGM，又一次的手痒了，不过这次我们不冲点卡，我们以学习的态度搭建一个专属自己的魔兽世界服务器！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Charles的代理设置</title>
      <link>https://phpgao.github.io/setup_charles.html</link>
      <pubDate>Mon, 08 Jul 2019 02:12:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/setup_charles.html</guid>
      <description>&lt;p&gt;MacOS下的开发少不了抓包调试，而Charles绝对是开发者必不可少的抓包工具！&lt;/p&gt;
&lt;p&gt;不过老高在使用Charles时遇到了不少坑，下面总结一下再MacOS下Charles的使用方法吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>炉石传说有多少张卡牌</title>
      <link>https://phpgao.github.io/scrapy_hearthstone.html</link>
      <pubDate>Fri, 05 Jul 2019 02:46:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/scrapy_hearthstone.html</guid>
      <description>&lt;p&gt;炉石传说从老高入坑倒退坑，已经过了好几个年头，玩了这么久，你知道炉石传说有多少张卡牌吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是标准目前914多张，至于狂野模式是多少，点进来我告诉你。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>抖音的学习研究</title>
      <link>https://phpgao.github.io/douyin_spider.html</link>
      <pubDate>Tue, 25 Jun 2019 07:18:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/douyin_spider.html</guid>
      <description>&lt;p&gt;老高由于一些目的，需要研究学习一下抖音视频。记录一下过程，以作备忘。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重要声明，本教程仅供参考，请勿直接通过本教程的代码或思路爬取抖音视频，否则后果自负！&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>迫于自如甲醛超标，我也来直播一下处理流程</title>
      <link>https://phpgao.github.io/f_ziroom_k.html</link>
      <pubDate>Mon, 17 Jun 2019 03:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/f_ziroom_k.html</guid>
      <description>坐标上海，5月底房子到期，刚好公司在此时和自如有合作，最终整租了一间40平一室一厅的非首次出租的自如房，房租半年付，使用公司的优惠便宜了大约300元。
直到一周后搬进去后，我和女友都出现了嗓子疼，咳嗽的症状，而且时间长不通风的情况下一股刺鼻的味道，睡一觉早上醒来嗓子干疼，于是在搬进去的第二天晚上，我开始以关键字 甲醛 自如 学习研究，发现这样住下去肯定命不久矣，于是买了一些初级的检测设备，联系管家，发了自测的甲醛和tvoc超标的图。
而管家的回复让我很郁闷，总结一下：
 这个房子不是首次出租，所以应该不会有问题(我能确定部分墙面肯定是新刷的) 之前住这里的是一家子人，还有一个小孩子，没说有问题 你的设备检测不准  套路过后，他们表示只承认cma报告，可以自己联系或者申请自如检测(后者可能要等很久)。
同时我也把我们公司负责自如的对接人，还有自如方的对接人，管家拉到群里，一起讨论这个问题，果然还是套路回答。这个也在预料之内，于是当天打电话预约了一家有cma资质的检测机构(不打广告了)，第二天早上请假做检测，一个点500，带发票550，7个工作日出结果(那周刚好有端午节，多等了几天)，邮寄纸质cma报告。
等报告期间我住过酒店，不过太贵了就又回去住了几天，一直保持通风，睡觉头都是朝着过道，嗓子又疼了一周。然后找到了新的住处，挑了一个周末搬过去了(还是老房子好啊!)。
终于在过了很久后的今天(20190617)，我终于收到了通知电话，结果确实是甲醛超标，而且只有甲醛超标，听到这个结果我是比较开心的，不是因为得到了有利的证据，而是tvoc没有超标，这玩意儿才是真正的大佬!
纸质报告明天才会拿到，不过之前的电话是有录音的</description>
    </item>
    
    <item>
      <title>docker-最新安装命令</title>
      <link>https://phpgao.github.io/install_docker_in_centos.html</link>
      <pubDate>Fri, 26 Apr 2019 14:18:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/install_docker_in_centos.html</guid>
      <description>&lt;p&gt;docker就不多说了，按照贴出的代码一步一步就可以安装成功&lt;/p&gt;
&lt;p&gt;安装之前最好手动关闭selinux&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;setenforce 0
getenforce
# Permissive
sed -i &amp;#39;s/SELINUX=enforcing/SELINUX=disabled/&amp;#39; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>go文章和项目收集</title>
      <link>https://phpgao.github.io/golang_project.html</link>
      <pubDate>Fri, 15 Feb 2019 03:37:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/golang_project.html</guid>
      <description>工作学习中遇到了很多有趣的go项目和文章，收集一下
文章或视频 https://golang.org/doc/codewalk/sharemem/ https://blog.labix.org/2011/10/09/death-of-goroutines-under-control https://blog.golang.org/share-memory-by-communicating https://golang.org/doc/codewalk/sharemem/ https://www.youtube.com/watch?v=lLDWF59aZAo http://satran.in/2017/11/15/Implementing_tails_follow_in_go.html https://www.flysnow.org/ https://github.com/polaris1119/The-Golang-Standard-Library-by-Example https://projecteuler.net/ 学习资料 https://github.com/mikespook/Learning-Go-zh-cn https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/ https://gobyexample.com/ https://github.com/Unknwon/go-fundamental-programming https://github.com/Unknwon/go-rock-libraries-showcases https://golang.org/doc/effective_go.html https://blog.golang.org/laws-of-reflection https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw 项目 https://github.com/go-cmd/cmd https://github.com/fsnotify/fsnotify https://github.com/nathany/looper https://github.com/hpcloud/tail https://gopkg.in/tomb.v2 https://github.com/fatih/color https://github.com/mattn/go-colorable https://github.com/gongo/9t https://github.com/shanghai-edu/multissh https://github.com/gogs/gogs https://github.com/pkg/errors </description>
    </item>
    
    <item>
      <title>golang预定义的系统名称</title>
      <link>https://phpgao.github.io/go_system_cons.html</link>
      <pubDate>Fri, 18 Jan 2019 06:45:22 +0000</pubDate>
      
      <guid>https://phpgao.github.io/go_system_cons.html</guid>
      <description>Golang syslist
Golang预定义的OS列表 aix android darwin dragonfly freebsd hurd js linux nacl netbsd openbsd plan9 solaris windows zos Golang预定义的Arch(架构)列表 386 amd64 amd64p32 arm armbe arm64 arm64be ppc64 ppc64le mips mipsle mips64 mips64le mips64p32 mips64p32le ppc riscv riscv64 s390 s390x sparc sparc64 wasm 你认识几个？</description>
    </item>
    
    <item>
      <title>2018面试总结</title>
      <link>https://phpgao.github.io/2018_new_start.html</link>
      <pubDate>Thu, 29 Nov 2018 14:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/2018_new_start.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2018/11/3936467250.jpg&#34; alt=&#34;程序猿面试&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;找新工作的念头是在今年6月开始萌发的，其实当时已经开始投简历了，结果因为种种原因(主要是忙?)拖到这会儿才真正开始面试。投简历的平台是boss直聘，简历用的jobDeer的模板，用md写好，生成pdf和doc格式，挂在自己的网站下，方便下载和浏览。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python-堆排序算法</title>
      <link>https://phpgao.github.io/heap_sort.html</link>
      <pubDate>Mon, 13 Aug 2018 15:41:35 +0000</pubDate>
      
      <guid>https://phpgao.github.io/heap_sort.html</guid>
      <description>&lt;p&gt;老高最近在准备面试，正好复习到堆排序，正好总结一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KMP算法笔记II--------学会计算next数组</title>
      <link>https://phpgao.github.io/kmp_2_get_next.html</link>
      <pubDate>Sun, 05 Aug 2018 16:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/kmp_2_get_next.html</guid>
      <description>&lt;p&gt;第一次学习KMP算法走了不少弯路，下面老高按照自己的学习步骤，总结一下KMP算法的要点，如果有错误或者疑问，欢迎指正！&lt;/p&gt;
&lt;p&gt;老高使用python语言实现算法，实现的语言不重要，重要的是他的思想！(其实老高的C语言早已年久失修?)&lt;/p&gt;
&lt;p&gt;本文是系列的第二篇，主要探讨一下KMP算法的思维方式并引出next数组概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KMP算法笔记I-------先学会朴素算法</title>
      <link>https://phpgao.github.io/kmp_1_the_basic.html</link>
      <pubDate>Sat, 04 Aug 2018 13:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/kmp_1_the_basic.html</guid>
      <description>&lt;p&gt;第一次学习KMP算法走了不少弯路，下面老高按照自己的学习步骤，总结一下KMP算法的要点，如果有错误或者疑问，欢迎指正！&lt;/p&gt;
&lt;p&gt;老高使用python语言实现算法，实现的语言不重要，重要的是他的思想！(其实老高的C语言早已年久失修?)&lt;/p&gt;
&lt;p&gt;本文是系列的第一篇，学习KMP之前最好了解一下朴素算法的写法，为以后的学习最好铺垫，此为渐进式学习！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单循环链表</title>
      <link>https://phpgao.github.io/single_cycle_linked_list.html</link>
      <pubDate>Thu, 02 Aug 2018 14:34:35 +0000</pubDate>
      
      <guid>https://phpgao.github.io/single_cycle_linked_list.html</guid>
      <description>#!/usr/bin/env python3 # coding=utf-8 class Node: def __init__(self, data): self._data = data self._next = None def set_next(self, node): self._next = node def set_data(self, data): self._data = data def get_data(self): return self._data def get_next(self): return self._next class SingleCycleLinkedList: def __init__(self): self.head = Node(None) self.head.set_next(self.head) # 清空/初始化 def clear(self): self.head.set_next(self.head) # 是否为空 def is_empty(self): return self.head.get_next() == self.head # 获取大小 def size(self): count = 0 cur = self.head.get_next() while cur != self.head: count = count + 1 cur = cur.</description>
    </item>
    
    <item>
      <title>正确下载youtube视频的方式</title>
      <link>https://phpgao.github.io/youtube-dl-the-right-way.html</link>
      <pubDate>Mon, 30 Jul 2018 03:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/youtube-dl-the-right-way.html</guid>
      <description>&lt;p&gt;youtube这个&lt;strong&gt;不存在&lt;/strong&gt;的网站上有很多有用的资料，一般来说我们是可以下载所有视频到本地以供离线的情况下的研究学习，网上有很多工具提供了下载功能，但是在试用了很多标称很好用的软件后，老高发现，真的没有一个能和youtube-dl相提并论，所以老高还是记录一下如何使用正确使用youtube-dl！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次黑苹果的安装</title>
      <link>https://phpgao.github.io/first_tonymacx86.html</link>
      <pubDate>Fri, 27 Jul 2018 01:27:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/first_tonymacx86.html</guid>
      <description>&lt;p&gt;最近老高的MBP和MACmini卡的不行，想换硬件吧，硬件直接焊死，简直&lt;em&gt;良心苹果&lt;/em&gt;，参考了很多黑苹果的安装贴后果断决定在我的台式机上安装最新版的macOS-High-Sierra-10.13.6，系统选择的是&lt;a href=&#34;https://blog.daliansky.net/macOS-High-Sierra-10.13.6-17G65-Release-Version-with-Clover-4596-original-mirror.html&#34;&gt;【黑果小兵】&lt;/a&gt;，确实好用，老高十分推荐！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2018/07/2089683343.png&#34; alt=&#34;blackapple&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;先来贴一波老高的渣渣台式机配置吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CPU: i56500
主板: GA b150m power2 小板
内存: 16G 海盗船8*2套装
硬盘: 850evo 750evo(MacOS) SM951(win10) 西数4T红盘你懂的
WIFI: BCM943602CS (黑苹果免驱，win10需要安装驱动)
显卡: 七彩虹 烈焰战神 1066 特供版(穷)
显示器: DELL UP2516D 2k分辨率(开启HiDPI后凑活能看)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总结一下：&lt;/p&gt;
&lt;p&gt;安装黑苹果需要你对U盘装系统、BIOS、EFI有一个大致的了解，否则还是先补课再来吧，除非你不怕把数据弄丢，或者不管弄成啥样你都有办法重新装Windows系统，那就OK，请瞎折腾吧！！&lt;/p&gt;
&lt;p&gt;还有一点，如果新装机的同学有安装黑苹果的打算，请务必挑选技嘉的板子，老高用这个板子安装黑苹果确实没有遇到什么神坑，过程还算比较顺利，目前老高的黑苹果系统运行流程稳定，睡眠唤醒都很正常，估计也是托了技嘉的福?。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用markdown编写简单的接口文档</title>
      <link>https://phpgao.github.io/markdown_api_doc.html</link>
      <pubDate>Wed, 09 May 2018 03:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/markdown_api_doc.html</guid>
      <description>如题，使用markdown格式写接口文档效率还是挺高的，因为你只需要关系接口的功能和内容，而不用在意排版，顺带提一下使用这个工具markdown_tables创建markdown格式的表格不要太方便！
 需要说明的是如果是大型多人合作项目，还是老老实实用apidoc等工具吧。
 接口大类 ----------- [toc] ----------- ### 接口1 #### 接口功能 &amp;gt; 接口说明 #### 接口地址 &amp;gt; 接口地址 #### 返回格式 &amp;gt; JSON #### 请求方式 &amp;gt; GET #### 请求参数 | 参数 | 必选 | 类型 | 默认值 | 说明 | |------|------|--------|--------|-----------------------------------------| | name | ture | string | foo | 请求的项目名 | | type | true | int | bar | 请求项目的类型。1：类型一；2：类型二 。 | #### 返回字段 | 返回字段 | 字段类型 | 说明 | |----------|----------|----------------------------------| | result | int | 返回结果状态。0：正常；1：错误。 | | reason | string | 错误说明 | | data | string | 数据 | #### 字段变化 字段变化说明 #### 接口示例 &amp;gt; 地址：接口地址示例 #```json { &amp;#34;result&amp;#34;: 0, &amp;#34;reason&amp;#34;: &amp;#34;success&amp;#34;, &amp;#34;data&amp;#34;: [] } #```  代码里的#请删除</description>
    </item>
    
    <item>
      <title>小米系统MIUI的证书管理(删除和导入)</title>
      <link>https://phpgao.github.io/miui_cert.html</link>
      <pubDate>Fri, 13 Apr 2018 08:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/miui_cert.html</guid>
      <description>找了好久，直接在设置里搜索凭据二次即可！
or
设置\更多设置\系统安全\加密与凭据\信任的凭据 设置\更多设置\系统安全\加密与凭据\从储存设备安装 如果上面的地方找不到，说明你是最新的MIUI系统，证书和凭据的位置搬家了！
设置 -&amp;gt; 密码、隐私与安全 -&amp;gt; 系统安全 -&amp;gt; 加密与凭据 英文系统
Setting -&amp;gt; Password &amp;amp; security -&amp;gt; Privacy -&amp;gt; Encryption &amp;amp; credentials  吐槽一下，为啥MIUI不能直接用证书跳转到这个配置页面。
 </description>
    </item>
    
    <item>
      <title>Ubuntu-系统一键安装-Shadowsocks-和-KCPTUN-加速</title>
      <link>https://phpgao.github.io/auto_install_shadowsocks_and_kcptun-html.html</link>
      <pubDate>Wed, 14 Mar 2018 07:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/auto_install_shadowsocks_and_kcptun-html.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.phpgao.com/auto_install_shadowsocks_and_kcptun.html&#34;&gt;Centos7 一键安装 Shadowsocks 和 KCPTUN 加速&lt;/a&gt;的兄弟篇，基于&lt;strong&gt;Ubuntu 16.04&lt;/strong&gt;编写，兼容性未测试。&lt;/p&gt;
&lt;p&gt;卸载命令参考&lt;a href=&#34;https://blog.phpgao.com/auto_install_shadowsocks_and_kcptun.html&#34;&gt;Centos7 一键安装 Shadowsocks 和 KCPTUN 加速&lt;/a&gt;里的说明，操作一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记录一下Telegram的IP地址</title>
      <link>https://phpgao.github.io/telegram_ip.html</link>
      <pubDate>Fri, 09 Mar 2018 03:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/telegram_ip.html</guid>
      <description>&lt;p&gt;斐讯K3刷的官改版用GFWlist上不了TG，估计是TG的服务器IP没有进黑名单，解决办法是手动加入到GFW强制走代理列表。&lt;/p&gt;
&lt;p&gt;20181115更新&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自从玩了塞尔达...</title>
      <link>https://phpgao.github.io/zelda_saigao.html</link>
      <pubDate>Mon, 05 Mar 2018 11:01:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/zelda_saigao.html</guid>
      <description>&lt;p&gt;过年前托朋友入手港版NS，于是过年到现在沉迷塞尔达无法自拔。。。年后又入了DLC季票，大师模式又新开档，目前过了4神兽，就剩加农没打了。。。每天刷刷人马，刷刷Amiibo，捡捡流星也是乐在其中！这篇文章没什么主题，就是想吹吹塞尔达有多好玩！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2018/03/15830282.jpg&#34; alt=&#34;NS 双红&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常用dig命令</title>
      <link>https://phpgao.github.io/dig.html</link>
      <pubDate>Fri, 02 Feb 2018 07:37:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/dig.html</guid>
      <description>+noall表示隐藏所有内容 +answer 表示显示响应内容
+[no]question,+[no]answer,+[no]authority,+[no]stat,+short
# 直接查询根DNS dig # 指定解析服务器为8.8.8.8 dig @8.8.8.8 phpgao.com # 查询DNS记录 dig -t NS phpgao.com +noall +answer # 查询MX记录 dig -t MX phpgao.com +noall +answer </description>
    </item>
    
    <item>
      <title>PHP验证IP</title>
      <link>https://phpgao.github.io/php_valid_ip.html</link>
      <pubDate>Tue, 23 Jan 2018 06:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_valid_ip.html</guid>
      <description>正则的效率是在比不上原生的，所以丢个链接(过滤器函数)走人。
二逼正则:
$valid = preg_match(&amp;#39;/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\z/&amp;#39;, $string); 正确正则:
preg_match(&amp;#39;/^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$/&amp;#39;, $ipAddress); 过滤器的选项，比如可以过滤私有IP地址等。
用法参考Validating an IP address with PHP&amp;rsquo;s filter_var function</description>
    </item>
    
    <item>
      <title>数据库的优化</title>
      <link>https://phpgao.github.io/fuck_db.html</link>
      <pubDate>Thu, 18 Jan 2018 02:15:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/fuck_db.html</guid>
      <description>&lt;p&gt;在实际工作中，通常会遇到某个进程或者请求运行的十分缓慢，其中大部分的时间都花在了数据库的查询和写入上，每次遇到这个问题就十分头痛。首先，鉴于我们是很底层的程序员，没法花钱给企业加硬件，那我们能完成的事情就是用头脑取分析并优化每一条查询，来获得查询效率的提升。&lt;/p&gt;
&lt;p&gt;老高总结了一下工作中遇到的问题，以后再遇到相同的问题后可以快速排查。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老高持有的虚拟币(附糖果链接)</title>
      <link>https://phpgao.github.io/shit_coin.html</link>
      <pubDate>Tue, 09 Jan 2018 06:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/shit_coin.html</guid>
      <description>总结一下目前持有的币种吧(排名不分先后，量也都不大)
 BTC(比特币) ETH(以太坊) ETC(以太坊经典) QTUM(量子链) BAT(注意力币) PAY DOGE(狗币) EMC2(爱因斯坦币) RDD XVG OMG(嫩模币) JNT(2月上B网)  唉，错过了成为百万负翁的机会，买这个就当买个彩票吧 ?
 顺便分享一波糖果：
需认证  币乎社区注册送7万KEY，2月上交易所，算了一下大概值300，应该靠谱，不过需要实名认证，老高已经领了。。。  无需认证   iost糖果 链接 ，注册后需要到 telegram 发一下注册码就算激活了
  全民持股 BestBi 交易平台全新上线，点击或复制链接到浏览器进行注册，领取免费糖果：best.bi
  www.btcaso.com支持币币和C2C交易，注册就送50个CAC币，交易费全返邀请人。
  </description>
    </item>
    
    <item>
      <title>查询IOS可降级版本</title>
      <link>https://phpgao.github.io/f_ck_ios.html</link>
      <pubDate>Wed, 13 Dec 2017 03:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/f_ck_ios.html</guid>
      <description>&lt;p&gt;IP6用到现在，系统版本已经是11了，眼看着系统越来越卡，到现在逛个淘宝都不想用IP看了。废话不多说，这篇文章就是想记录一下查询能够降级的最低版本，让IP6再能撑几年吧。&lt;/p&gt;
&lt;p&gt;下面两个地址可以查询能降级的版本，二者好像数据不太一致，待我降级完成后更新。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>保持ssh不自动断开</title>
      <link>https://phpgao.github.io/keep_connect_ssh.html</link>
      <pubDate>Thu, 07 Dec 2017 08:14:38 +0000</pubDate>
      
      <guid>https://phpgao.github.io/keep_connect_ssh.html</guid>
      <description>&lt;p&gt;在mac上ssh自己的服务器后总是会断开，比如wget某一个东西，或者tar一个大文件，如果你总是受此困扰，不妨尝试一下此文里的配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos升级内核版本以支持overlay2</title>
      <link>https://phpgao.github.io/update_linux_kernel.html</link>
      <pubDate>Thu, 30 Nov 2017 05:00:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/update_linux_kernel.html</guid>
      <description>&lt;p&gt;搬瓦工新入的KVM架构的机器，默认内核版本是&lt;code&gt;4.10.4&lt;/code&gt;，如果是本地用ISO安装的系统，默认内核版本可能更低，比如&lt;code&gt;3.10.0&lt;/code&gt;，如果我们想要获取到最新的Linux特性，那么就必须升级内核版本到最新，我们可以用很简单的几个命令就可做到。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php返回json格式的{}花括号</title>
      <link>https://phpgao.github.io/php_return_empty_class.html</link>
      <pubDate>Thu, 23 Nov 2017 06:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_return_empty_class.html</guid>
      <description>方括号的[]在json中调试是一个数组，而花括号{}在json中表示一个对象，不过二者在PHP中基本上一个empty就可以判断为i空了，但在js里好像就有一些麻烦了，可能需要下面的判断方式。
p = [] if((Array.isArray(p) &amp;amp;&amp;amp; p.length === 0)){ alert(&amp;#39;[]&amp;#39;); } p = {} if(Object.prototype.isPrototypeOf(p) &amp;amp;&amp;amp; Object.keys(p).length === 0){ alert(&amp;#39;{}&amp;#39;); } WAY1:
$a = json_decode(&amp;#39;{}&amp;#39;); echo json_encode($a); WAY2:
$a = new stdclass; // $a = new ArrayObject(); echo json_encode($a); 虽然花括号{}和方括号的[]二者在PHP和JSON中都表示不同的东西，但是突然要返回空对象还是冷不丁的想一下，我上哪儿去找一个空对象啊? ?</description>
    </item>
    
    <item>
      <title>NProgress-and-DocReady</title>
      <link>https://phpgao.github.io/nprogress_docready.html</link>
      <pubDate>Thu, 16 Nov 2017 06:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nprogress_docready.html</guid>
      <description>&amp;lt;script&amp;gt; NProgress.start(); (function(funcName, baseObj) { // The public function name defaults to window.docReady  // but you can pass in your own object and own function name and those will be used  // if you want to put them in a different namespace  funcName = funcName || &amp;#34;docReady&amp;#34;; baseObj = baseObj || window; var readyList = []; var readyFired = false; var readyEventHandlersInstalled = false; // call this when the document is ready  // this function protects itself against being called more than once  function ready() { if (!</description>
    </item>
    
    <item>
      <title>按模板生成组合</title>
      <link>https://phpgao.github.io/2754.html</link>
      <pubDate>Tue, 31 Oct 2017 09:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/2754.html</guid>
      <description>&lt;p&gt;收集了一些方法，用来生产域名然后查询注册信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx配置一篇足矣</title>
      <link>https://phpgao.github.io/nginx_config.html</link>
      <pubDate>Wed, 18 Oct 2017 07:58:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nginx_config.html</guid>
      <description>&lt;p&gt;nginx的一些配置记录&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>所有平台可用的GIT管理工具</title>
      <link>https://phpgao.github.io/git_gui_tool.html</link>
      <pubDate>Wed, 18 Oct 2017 03:54:53 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_gui_tool.html</guid>
      <description>丢个链接走人，老高现在正在用sourceTree，最近是越来越卡，准备换一个。
GUI Clients</description>
    </item>
    
    <item>
      <title>解决rename不支持正则的问题</title>
      <link>https://phpgao.github.io/rename_to_prename.html</link>
      <pubDate>Fri, 13 Oct 2017 11:02:51 +0000</pubDate>
      
      <guid>https://phpgao.github.io/rename_to_prename.html</guid>
      <description>&lt;p&gt;一句话命令&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PhpStorm-一些配置</title>
      <link>https://phpgao.github.io/phpstorm_config.html</link>
      <pubDate>Wed, 11 Oct 2017 08:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpstorm_config.html</guid>
      <description>&lt;p&gt;代码写时间长了难免有重装的时候，然后之前一些自定义的东西就没了，主要是一些格式化，模板等一些规范化的东西，之前看好像有配置导出功能，但是用了一次，貌似没什么卵用，所以还是记下来吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在linux或MacOS统创建和解压cab(cabinet)文件</title>
      <link>https://phpgao.github.io/create_and_extract_cab_file_in_linux_or_macos.html</link>
      <pubDate>Mon, 07 Aug 2017 16:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/create_and_extract_cab_file_in_linux_or_macos.html</guid>
      <description>&lt;p&gt;由于工作原因，需要在Linux下操作cab文件，拜访Google后得到两枚神器，在此与大家分享。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2017/08/3551035709.jpeg&#34; alt=&#34;cab file&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Centos7-系统一键安装-Shadowsocks-和-KCPTUN-加速</title>
      <link>https://phpgao.github.io/auto_install_shadowsocks_and_kcptun.html</link>
      <pubDate>Thu, 03 Aug 2017 04:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/auto_install_shadowsocks_and_kcptun.html</guid>
      <description>&lt;p&gt;新安装的centos7系统可以使用下面的安装脚本一键安装$$，如果嫌复制粘贴麻烦，可以到&lt;a href=&#34;https://github.com/phpgao/my_scripts/tree/master/code&#34;&gt;脚本地址&lt;/a&gt;下载&lt;/p&gt;
&lt;h2 id=&#34;安装命令&#34;&gt;安装命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/phpgao/my_scripts/master/code/ss_for_centos.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 或者&lt;/span&gt;

sudo sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/phpgao/my_scripts/master/code/ss_for_centos.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完毕后查看ss配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cat /etc/ss-config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看kcptun配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;/etc/kcp-config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要修改，使用vi命令即可。修改完记得重启服务才能生效！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# 重启ss服务
systemctl restart shadowsocks-server

# 重启kcptun服务
systemctl restart kcp-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>系统下载</title>
      <link>https://phpgao.github.io/system_ed2k.html</link>
      <pubDate>Mon, 10 Jul 2017 08:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/system_ed2k.html</guid>
      <description>&lt;p&gt;记录一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang简介</title>
      <link>https://phpgao.github.io/golang.html</link>
      <pubDate>Fri, 23 Jun 2017 05:13:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/golang.html</guid>
      <description>&lt;h1 id=&#34;golang简介&#34;&gt;Golang简介&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>Laravel的容器的工作原理</title>
      <link>https://phpgao.github.io/laravel_container.html</link>
      <pubDate>Tue, 14 Mar 2017 16:08:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/laravel_container.html</guid>
      <description>&lt;p&gt;使用Laravel有一段时间了，终于抽点了时间看了一下其laravel实现的IOC控制反转的概念，确实很有意思。&lt;/p&gt;
&lt;p&gt;Laravel的容器虽然和docker的容器概念不同，但是都一样承载了十分重要的信息！docker的容器为程序提供了可读写的环境，Lravel的容器为类的初始化提供了便利，解决了以依赖注入和资源获取的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows10,Windows7复原音量合成器</title>
      <link>https://phpgao.github.io/win10_sound_mixer_reset.html</link>
      <pubDate>Thu, 09 Mar 2017 14:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/win10_sound_mixer_reset.html</guid>
      <description>&lt;p&gt;有时候临时降低了某个程序的音量，但是之后如何恢复默认设置确实是个麻烦事儿，&lt;/p&gt;
&lt;p&gt;网上搜索了一堆教程有的教程竟然叫你重新安装声卡驱动，简直要死了。。。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2017/03/2809581131.png&#34; alt=&#34;sound_mixer&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一句话命令</title>
      <link>https://phpgao.github.io/simple_command_line.html</link>
      <pubDate>Thu, 09 Mar 2017 09:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/simple_command_line.html</guid>
      <description>&lt;p&gt;记录一些比较简单又懒得记得命令&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用docker运行redmine</title>
      <link>https://phpgao.github.io/docker_remine.html</link>
      <pubDate>Wed, 08 Mar 2017 13:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_remine.html</guid>
      <description>&lt;p&gt;网上的都不太靠谱，还是自己过一遍吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为python的logging加点颜色吧</title>
      <link>https://phpgao.github.io/python_colorful_log.html</link>
      <pubDate>Wed, 22 Feb 2017 15:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_colorful_log.html</guid>
      <description>&lt;p&gt;代码原理很简单，在需要加颜色的地方加上控制颜色显示的语义即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些神代码注释</title>
      <link>https://phpgao.github.io/no_comments.html</link>
      <pubDate>Mon, 20 Feb 2017 08:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/no_comments.html</guid>
      <description>&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GIT添加空文件夹方法</title>
      <link>https://phpgao.github.io/git_empty_dir.html</link>
      <pubDate>Tue, 14 Feb 2017 03:26:23 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_empty_dir.html</guid>
      <description>add a .gitignore file :
* !.gitignore </description>
    </item>
    
    <item>
      <title>转的</title>
      <link>https://phpgao.github.io/repost.html</link>
      <pubDate>Wed, 28 Dec 2016 03:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/repost.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.verycd.com/topics/2837883/&#34;&gt;《Android开发视频教学》www.marsdroid.org/Android开发视频教程&amp;ndash;更新第五季第五集/Mars is back!!![MP4] - VeryCD电驴大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;展望未来，总结过去10年的程序员生涯，给程序员小弟弟小妹妹们的一些总结性忠告 
走过的路，回忆起来是那么曲折，把自己的一些心得体会分享给程序员兄弟姐妹们，虽然时代在变化，但是很可能你也会走我已经做过的10年的路程，有些心得体会你可以借鉴一下，觉得说得有道理的你就接纳，觉得说得没道理的，你就抛弃，以下是我发自内心的，给大家的忠告，特别是针对那些小弟弟妹妹们。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP判断网络连通</title>
      <link>https://phpgao.github.io/php_test_network.html</link>
      <pubDate>Mon, 19 Dec 2016 06:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_test_network.html</guid>
      <description>&lt;p&gt;PHP代理其实挺麻烦的。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老高推荐的VPS---virmach</title>
      <link>https://phpgao.github.io/virmach.html</link>
      <pubDate>Fri, 09 Dec 2016 02:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/virmach.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/12/3240554130.png&#34; alt=&#34;virmach&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;特价页地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://virmach.com/manage/aff.php?aff=1248&amp;amp;gid=22&#34;&gt;Cheap Windows VPS &amp;amp; Linux VPS - VirMach.com | The Best &amp;amp; Cheapest VPS Cloud Hosting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐理由：&lt;/p&gt;
&lt;p&gt;价格低廉，支持中文，可以与搬瓦工一战！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker使用笔记VII----Scrapy</title>
      <link>https://phpgao.github.io/docker_install_scrapy.html</link>
      <pubDate>Tue, 15 Nov 2016 07:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_install_scrapy.html</guid>
      <description>&lt;p&gt;最近在研究Scrapy的安装，发现在centos上安装还是挺麻烦的，于是总结出来所有的依赖和加速的问题，终于能用了！&lt;/p&gt;
&lt;p&gt;下面看看老高是怎么在Centos下安装Scrapy！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/11/95790073.png&#34; alt=&#34;sc.png&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>当用户不存在时执行adduser</title>
      <link>https://phpgao.github.io/adduser_if_user_do_not_exist.html</link>
      <pubDate>Fri, 21 Oct 2016 07:49:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/adduser_if_user_do_not_exist.html</guid>
      <description>使用了id工具，构建docker镜像的时候这一句很有用！
id -u laogao &amp;amp;&amp;gt;/dev/null || useradd -u 30105 laogao </description>
    </item>
    
    <item>
      <title>离线安装setuptools</title>
      <link>https://phpgao.github.io/install_setuptools_offline.html</link>
      <pubDate>Wed, 12 Oct 2016 11:00:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/install_setuptools_offline.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/10/1048756566.png&#34; alt=&#34;setuptools.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;由于某些原因，没法在线安装setuptools，研究了一下官方提供的安装脚本，发现原来想要离线安装setuptools很简单。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>转到VScode</title>
      <link>https://phpgao.github.io/visual_studio_code.html</link>
      <pubDate>Fri, 19 Aug 2016 06:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/visual_studio_code.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/08/4023163725.png&#34; alt=&#34;integrated-terminal_integrated-terminal.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;放弃atom，投入巨硬的怀抱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一行代码更改密码</title>
      <link>https://phpgao.github.io/change_passwd_in_one_line.html</link>
      <pubDate>Thu, 14 Jul 2016 08:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/change_passwd_in_one_line.html</guid>
      <description>&lt;p&gt;修改密码的时候，大家是不是都有输入两次密码的经历，这种交互适合终端操作，而不是用于脚本操作，对于老高这种一言不合就写Dockerfile的猿，真是很不友好。&lt;/p&gt;
&lt;p&gt;下面老高就教你怎么使用一行代码更改密码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unicode标准日期格式</title>
      <link>https://phpgao.github.io/date_format_patterns.html</link>
      <pubDate>Thu, 14 Jul 2016 05:49:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/date_format_patterns.html</guid>
      <description>丢个链接闪人 → → → Appendix F: Date Format Patterns
顺便加上python的日期格式化 → → → strftime-strptime-behavior</description>
    </item>
    
    <item>
      <title>Python-代码片段总结</title>
      <link>https://phpgao.github.io/python_function.html</link>
      <pubDate>Thu, 16 Jun 2016 07:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_function.html</guid>
      <description>&lt;p&gt;慢慢积累吧！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/06/2183667823.jpeg&#34; alt=&#34;python&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Linux下建立自签名的https网站</title>
      <link>https://phpgao.github.io/self_signed_ssl_site.html</link>
      <pubDate>Thu, 09 Jun 2016 13:32:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/self_signed_ssl_site.html</guid>
      <description>&lt;p&gt;学习完了&lt;a href=&#34;https://blog.phpgao.com/encryption_decryption.html&#34;&gt;证书，密钥，加密，rsa到底是啥？&lt;/a&gt;一文后，我们就可以开始着手建立一个自签名的网站了！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>证书，密钥，加密，rsa到底是啥？</title>
      <link>https://phpgao.github.io/encryption_decryption.html</link>
      <pubDate>Fri, 03 Jun 2016 06:27:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/encryption_decryption.html</guid>
      <description>&lt;p&gt;简单的回答：&lt;/p&gt;
&lt;p&gt;证书也叫CA(Certification Authority)证书；密钥就是用来加解密用的文件或者字符串；rsa即非对称加密算法。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/06/2098671918.png&#34; alt=&#34;RSA&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下简单计算md5,base64,sha1,sha2</title>
      <link>https://phpgao.github.io/md5_sha1_sha2_in_linux.html</link>
      <pubDate>Wed, 01 Jun 2016 03:25:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/md5_sha1_sha2_in_linux.html</guid>
      <description>&lt;p&gt;经常加密的同学，算个md5真是顺手的事儿。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>把zsh放到docker里</title>
      <link>https://phpgao.github.io/zsh_in_docker.html</link>
      <pubDate>Fri, 20 May 2016 11:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/zsh_in_docker.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/05/3841937683.png&#34; alt=&#34;zsh &amp;#43; oh-my-zsh&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;每次进入docker容器内操作一些东西时，那效率简直太低！吓得老高赶紧把&lt;strong&gt;zsh + oh-my-zsh&lt;/strong&gt;打包塞进去，终于可以愉快的开发了！zsh都装了，sshd也一起开了得了！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让-PHPSTORM-更智能的支持-Laravel</title>
      <link>https://phpgao.github.io/laravel_on_phpstorm.html</link>
      <pubDate>Fri, 13 May 2016 07:39:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/laravel_on_phpstorm.html</guid>
      <description>&lt;p&gt;PHPSTORM已经很智能了，但是laravel更狡猾，比如如下的代码就没法实现动态跟踪，因为此处使用到了Laravel的Facades。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx&#43;php-上传大文件</title>
      <link>https://phpgao.github.io/nginx_php_upload_big_file.html</link>
      <pubDate>Fri, 13 May 2016 03:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nginx_php_upload_big_file.html</guid>
      <description>&lt;p&gt;有时候确实需要上传一些比较大的文件，老高的服务器是nginx+php，二者都需要配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python守护进程---python-daemon</title>
      <link>https://phpgao.github.io/python-daemon.html</link>
      <pubDate>Wed, 11 May 2016 10:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python-daemon.html</guid>
      <description>&lt;p&gt;python的守护进程模块，遵循&lt;a href=&#34;https://www.python.org/dev/peps/pep-3143&#34;&gt;PEP 3143&lt;/a&gt;，很好很强大！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关闭OSX的rootless和修改MAMP的php.ini配置</title>
      <link>https://phpgao.github.io/rootless_and_mamp.html</link>
      <pubDate>Thu, 05 May 2016 11:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/rootless_and_mamp.html</guid>
      <description>&lt;p&gt;记录一下最近遇到的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laracasts视频下载工具</title>
      <link>https://phpgao.github.io/laracasts_downloader.html</link>
      <pubDate>Mon, 25 Apr 2016 13:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/laracasts_downloader.html</guid>
      <description>&lt;p&gt;最近老高在看laravel框架，巧遇laracasts，发现还是老外讲课有深度啊！这么好的视频，有很多还是免费的，果断下载下来保存。&lt;/p&gt;
&lt;p&gt;于是，就诞生了这篇文章！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel-非常规教程之1-生命周期</title>
      <link>https://phpgao.github.io/laravel_lesson1.html</link>
      <pubDate>Fri, 22 Apr 2016 11:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/laravel_lesson1.html</guid>
      <description>&lt;p&gt;上一节老高零(瞎)散(扯)的讲了一下laravel的基本知识，不知道你现在搞清楚symfony vs laravel的关系了吗？其实没多大关系，l借用了s的组件，laravel的屏蔽了框架复杂的内部实现，让程序猿们注重业务的开发，而symfony的学习曲线很陡峭，需要你掌握框架的运行机制和各种组件的关系。&lt;/p&gt;
&lt;p&gt;本节关注一次请求在Laravel中的生命周期！就是从接收到请求到返回请求整个过程中都发生了哪些比较重要的事件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Laravel-非常规教程之0-引入篇</title>
      <link>https://phpgao.github.io/laravel_lesson0.html</link>
      <pubDate>Fri, 22 Apr 2016 05:50:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/laravel_lesson0.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/04/2314951677.jpg&#34; alt=&#34;laravel logo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;hi!大家好。老高又开始折腾laravel了 :-D&lt;/p&gt;
&lt;p&gt;(基于Laravel 5.2)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用命令行下载youtube的视频和字幕</title>
      <link>https://phpgao.github.io/download_youtube_via_cmd.html</link>
      <pubDate>Tue, 19 Apr 2016 14:24:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/download_youtube_via_cmd.html</guid>
      <description>&lt;p&gt;老高买使用搬瓦工有好久了，但是直到今天才想起来用命令行下载youtube的视频，实在是惭愧。赶紧加班写篇文章赎罪！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/04/2588463203.png&#34; alt=&#34;youtube.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;今天的主角在这儿&lt;a href=&#34;https://rg3.github.io/youtube-dl/download.html&#34;&gt;youtube-dl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源代码点这儿&lt;a href=&#34;https://github.com/rg3/youtube-dl&#34;&gt;rg3/youtube-dl&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在线OCR工具</title>
      <link>https://phpgao.github.io/orc.html</link>
      <pubDate>Mon, 18 Apr 2016 13:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/orc.html</guid>
      <description>onlineocr free! 在线文字识别 convertpdftoword 转换器 百度OCR识别
百度OCR识别企业版</description>
    </item>
    
    <item>
      <title>6元RMB入手Surge的小弟Shadowrocket</title>
      <link>https://phpgao.github.io/shadowrocket.html</link>
      <pubDate>Mon, 18 Apr 2016 06:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/shadowrocket.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/04/3746704404.png&#34; alt=&#34;ss.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;自从IOS9开放了一些之前必须交钱才能使用的更底层的网络接口后(Network Extension)，类似Surge的APP不断涌现。&lt;/p&gt;
&lt;p&gt;而老高的手机早早已经越狱，当时没有这方面的需求。而当我想购买Surge的时候，却又经历了Surge的下架，再加价上架，看到现在的价格，老高只能表示呵呵了。&lt;/p&gt;
&lt;p&gt;昨天在APP商店里搜了一下ss，发现了Shadowrocket，竟然只卖6元，果断入手！&lt;/p&gt;
&lt;p&gt;注：文末有下载链接&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卸载思科any-connect-OS-X客户端</title>
      <link>https://phpgao.github.io/uninstall_cisco_any_connect_client-1.html</link>
      <pubDate>Mon, 18 Apr 2016 05:35:41 +0000</pubDate>
      
      <guid>https://phpgao.github.io/uninstall_cisco_any_connect_client-1.html</guid>
      <description>一句话命令
sudo pkgutil --forget com.cisco.pkg.anyconnect.vpn </description>
    </item>
    
    <item>
      <title>golang使用multiconfig后导致glog无法接受命令行参数</title>
      <link>https://phpgao.github.io/multiconfig_vs_glog.html</link>
      <pubDate>Fri, 18 Mar 2016 06:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/multiconfig_vs_glog.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/03/506524902.png&#34; alt=&#34;flag&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;老高在最近的一个项目(GOLANG)中加入了&lt;a href=&#34;https://github.com/koding/multiconfig&#34;&gt;koding/multiconfig&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个包可以用默认值(struct tag)&amp;lt;文件&amp;lt;环境变量&amp;lt;命令行参数的顺序设置参数，很好很强大，极大地方便了测试和开发。&lt;/p&gt;
&lt;p&gt;但是同时他也带来了一个问题，和glog一起工作的时候会报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flag provided but not defined: -alsologtostderr&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>python守护进程demo</title>
      <link>https://phpgao.github.io/pythond.html</link>
      <pubDate>Tue, 23 Feb 2016 04:11:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pythond.html</guid>
      <description>&lt;p&gt;代码网上copy的，原理基本一致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker-批量删除名字为none的镜像</title>
      <link>https://phpgao.github.io/docker_rmi_none_name.html</link>
      <pubDate>Wed, 20 Jan 2016 03:58:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_rmi_none_name.html</guid>
      <description>下面代码的意思是批量停止已经Exited的容器，然后删除之，最后删除，因为名称为none的镜像可能还没有退出，这样做也保险一点。
docker stop $(docker ps -a -q -f status=exited) docker rm -v $(docker ps -a -q -f status=exited) docker images|grep none|awk &amp;#39;{print $3 }&amp;#39;|xargs docker rmi 如果要直接删除所有的容器，可以这样：
docker kill $(docker ps -a -q) docker rm -v $(docker ps -a -q) </description>
    </item>
    
    <item>
      <title>一个很无力的403错误</title>
      <link>https://phpgao.github.io/mess_with_error_403.html</link>
      <pubDate>Mon, 18 Jan 2016 03:38:23 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mess_with_error_403.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/01/875541267.png&#34; alt=&#34;403错误&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;老高为了省时省力，在window平台下的开发环境使用了&lt;a href=&#34;http://www.upupw.net/&#34;&gt;UPUPW&lt;/a&gt;，这个环境使得老高可以在5min内搭建出一个完整的(nginx/apache) + PHP + my*开发环境。&lt;/p&gt;
&lt;p&gt;但是最近在调试接口的时候，偶尔会有几个接口直接报错403，于是开始了无尽的403折磨之路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go下载</title>
      <link>https://phpgao.github.io/goalng_download_file.html</link>
      <pubDate>Sat, 16 Jan 2016 14:40:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/goalng_download_file.html</guid>
      <description>&lt;p&gt;今天处理GO下载的时候遇到一个问题：如果调用readall去读取response，会造成很大的内存消耗，并且无法获取下载的进度。&lt;/p&gt;
&lt;p&gt;直到搜到&lt;a href=&#34;https://www.reddit.com/r/golang/comments/2bmnoq/ioutilreadallhttpresponsebody_memory_consumption/&#34;&gt;ioutil.ReadAll(httpResponse.Body) memory consumption&lt;/a&gt;，才解决了我的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跑在raspberry上的docker</title>
      <link>https://phpgao.github.io/docker_on_raspberry_pi.html</link>
      <pubDate>Fri, 08 Jan 2016 11:15:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_on_raspberry_pi.html</guid>
      <description>&lt;p&gt;老高的树莓派昨天(2016-01-07)到货，配件果断买买买（其实只买了SD卡和亚克力盒子）。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/01/293942554.jpg&#34; alt=&#34;树莓派&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;你能找到树莓派藏在哪儿吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在SourceTree取消被忽略的文件</title>
      <link>https://phpgao.github.io/source_tree_cancel_ignore_files.html</link>
      <pubDate>Tue, 05 Jan 2016 05:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/source_tree_cancel_ignore_files.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/01/2444613047.png&#34; alt=&#34;SourceTree忽略文件&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;老高刚才不小心在SourceTree中忽略了一个上级文件夹(一样的名字没看清，并且勾选了全局忽略)，导致里面的所有文件都被忽略掉了，很是尴尬。。。&lt;/p&gt;
&lt;p&gt;搜了半天，总算在&lt;a href=&#34;https://answers.atlassian.com/questions/158997/how-to-track-an-ignored-file&#34;&gt;这里&lt;/a&gt;找到了有用的答案，原来被SourceTree全局忽略的文件会保存在一个文件中，而不是直接写到.gitignore里，否则就不会这么麻烦了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>梅林固件迅雷远程开机自启设置</title>
      <link>https://phpgao.github.io/merlin_xware_start_on_boot.html</link>
      <pubDate>Sat, 26 Dec 2015 14:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/merlin_xware_start_on_boot.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/2370665736.png&#34; alt=&#34;merlin_xware_start_on_boot&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2015年12月20日周总结</title>
      <link>https://phpgao.github.io/2015-12-20.html</link>
      <pubDate>Sun, 20 Dec 2015 08:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/2015-12-20.html</guid>
      <description>学习：
select、poll、epoll之间的区别总结[整理] I/O多路复用技术（multiplexing）是什么？ 所谓全栈——《Web全栈工程师的自我修养》读书笔记 Awesome Networking &amp;mdash; clowwindy 《理解网络IO模型》四部曲：从模型到实现，从select到poll，再到epoll，基于源码深层探究，一起看看 IOS9 SURGE Go语言TCP Socket编程 setsockopt中参数之SO_REUSEADDR的意义 select — Waiting for I/O completion socket — Low-level networking interface
工具：
PHP standards Dockerfile 语法检查及优化工具 搭建docker内网私服（docker-registry with nginx&amp;amp;ssl on centos） Centos 7.x 使用Docker registry镜像创建私有仓库</description>
    </item>
    
    <item>
      <title>使用nc发送http请求</title>
      <link>https://phpgao.github.io/nc_http.html</link>
      <pubDate>Fri, 11 Dec 2015 15:26:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nc_http.html</guid>
      <description>echo -n &amp;#34;GET / HTTP/1.0\n\n\n&amp;#34;|nc phpgao.com 80 -vv nc phpgao.com 80 &amp;lt;&amp;lt;END HEAD / HTTP/1.1 Host: phpgao.com END </description>
    </item>
    
    <item>
      <title>让你的docker支持代理</title>
      <link>https://phpgao.github.io/docker_proxy.html</link>
      <pubDate>Thu, 10 Dec 2015 09:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/docker_proxy.html</guid>
      <description>&lt;p&gt;功夫网越来越猖狂，连docker都不放过。。。&lt;/p&gt;
&lt;p&gt;So，我们需要使用代理去下载、搜索我们需要的镜像！&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过老高的实验，在修改了代理设置后必须重启docker的守护进程！&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>git支持socks5和HTTP代理</title>
      <link>https://phpgao.github.io/git_on_socks5.html</link>
      <pubDate>Thu, 10 Dec 2015 07:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_on_socks5.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/3997949415.png&#34; alt=&#34;git logo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;一直以来，老高都是用proxychains用的git，原来发现git本来就支持socks5代理!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>傻逼铁道部</title>
      <link>https://phpgao.github.io/sb_china_train.html</link>
      <pubDate>Thu, 10 Dec 2015 07:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sb_china_train.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/3859121289.jpg&#34; alt=&#34;中指&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这个&lt;a href=&#34;http://www.12306.cn/mormhweb/zxdt_ggxx/201512/t20151208_4003.html&#34;&gt;通知&lt;/a&gt;真TM扯淡，不会说人话，说的都是鬼话！！还是自己排个序再排个版吧！&lt;/p&gt;
&lt;p&gt;而且票还是抢不到！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sublime-配置-插件-主题总结</title>
      <link>https://phpgao.github.io/go_sublime.html</link>
      <pubDate>Thu, 03 Dec 2015 11:23:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/go_sublime.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/12/3173255088.png&#34; alt=&#34;sublime&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;可自用，可参考，欢迎大家补充！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>本博客二级域名正在转为blog</title>
      <link>https://phpgao.github.io/mv_www2blog.html</link>
      <pubDate>Sat, 28 Nov 2015 07:21:50 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mv_www2blog.html</guid>
      <description>RT</description>
    </item>
    
    <item>
      <title>GO语言开发环境搭建笔记</title>
      <link>https://phpgao.github.io/let_us_go.html</link>
      <pubDate>Wed, 25 Nov 2015 03:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/let_us_go.html</guid>
      <description>&lt;p&gt;开始学一门新的语言，开发环境需要好好配置！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2016/06/3416344597.jpg&#34; alt=&#34;GOLANG&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ss的多用户模式</title>
      <link>https://phpgao.github.io/ss-mutil_users.html</link>
      <pubDate>Fri, 13 Nov 2015 05:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/ss-mutil_users.html</guid>
      <description>&lt;p&gt;多用户模式是什么？&lt;/p&gt;
&lt;p&gt;就是使用一个配置文件，存放多个端口+密码的信息，如果你在共享你的ss，那么这个功能将十分实用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在github的某次commit中close或者fix某个issue</title>
      <link>https://phpgao.github.io/github_fix_or_close_issue.html</link>
      <pubDate>Tue, 10 Nov 2015 05:32:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/github_fix_or_close_issue.html</guid>
      <description>&lt;p&gt;当你在某次提交解决了其他人提出的issue时，你可以使用github中的语法实现自动操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>帝都的初雪@2015.11.6</title>
      <link>https://phpgao.github.io/2047.html</link>
      <pubDate>Fri, 06 Nov 2015 13:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/2047.html</guid>
      <description>&lt;p&gt;在北京出差，眼瞅着马上又要雾霾了，今天打开窗，雪景映入眼帘！&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/11/500160160.jpg&#34; alt=&#34;雪景1&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>入手R6300-V2，大家有什么想说的？</title>
      <link>https://phpgao.github.io/r6300v2.html</link>
      <pubDate>Thu, 05 Nov 2015 12:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/r6300v2.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/11/548519534.jpg&#34; alt=&#34;R6300 V2&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>才发现PHP官方已经提供CHM了</title>
      <link>https://phpgao.github.io/php_chm.html</link>
      <pubDate>Tue, 03 Nov 2015 03:23:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_chm.html</guid>
      <description>&lt;p&gt;丢个链接走人&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/11/2827250856.png&#34; alt=&#34;PHP chm&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MAC下使用proxychain</title>
      <link>https://phpgao.github.io/proxychain.html</link>
      <pubDate>Sun, 25 Oct 2015 14:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/proxychain.html</guid>
      <description>&lt;p&gt;proxychain的功能很强大，让我们不需要使用export指定ssh的http代理就可以***了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/10/3772244129.png&#34; alt=&#34;proxychain&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于内容提取和摘要生成</title>
      <link>https://phpgao.github.io/extractor_and_generator.html</link>
      <pubDate>Thu, 22 Oct 2015 11:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/extractor_and_generator.html</guid>
      <description>&lt;p&gt;整理待用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac必备软件Go2shell</title>
      <link>https://phpgao.github.io/go2shell.html</link>
      <pubDate>Mon, 12 Oct 2015 06:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/go2shell.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/10/418026121.png&#34; alt=&#34;go2shell&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这个软件能够让你在Finder中轻松地在当前路径打开shell！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跟老高一起学laravel吧</title>
      <link>https://phpgao.github.io/learning_laravel.html</link>
      <pubDate>Fri, 11 Sep 2015 04:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/learning_laravel.html</guid>
      <description>http://laravelbase.com/sections/1%7D http://www.kancloud.cn/baidu/laravel5</description>
    </item>
    
    <item>
      <title>pip下使用代理安装包</title>
      <link>https://phpgao.github.io/pip_via_proxy.html</link>
      <pubDate>Wed, 09 Sep 2015 09:09:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pip_via_proxy.html</guid>
      <description>一句话代码
pip install --proxy x.x.x.x:8080 requsets pip install --proxy x.x.x.x:8080 --upgrade pip 帮助文件
pip -h --proxy &amp;lt;proxy&amp;gt; Specify a proxy in the form [user:passwd@]proxy.server:port. </description>
    </item>
    
    <item>
      <title>mac下使用brew配置nginx&#43;php&#43;mysql&#43;PostgreSQL</title>
      <link>https://phpgao.github.io/mac_onmpp.html</link>
      <pubDate>Mon, 07 Sep 2015 09:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mac_onmpp.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/09/1049308967.jpg&#34; alt=&#34;yosemite&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;大家在win下和Linux系统下配置PHP运行环境已经有很多参考资料了，以老高的经验，win下最好用的是UPUPW，linux求方便是centos+kangle，更加复杂的方法可以翻翻老高的&lt;a href=&#34;https://blog.phpgao.com/archives.html&#34;&gt;文章归档&lt;/a&gt;，里面有很多可以参考的内容。&lt;/p&gt;
&lt;p&gt;今天由于工作需要，必须在&lt;strong&gt;OSX&lt;/strong&gt;下配置PHP的开发运行环境，经过一番折腾，终于搞定了！主要参考了&lt;a href=&#34;http://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/&#34;&gt;Install Nginx, PHP-FPM, MySQL and phpMyAdmin on OS X Mavericks or Yosemite&lt;/a&gt;这篇文章，推荐英文好的同学直接看原文。&lt;/p&gt;
&lt;p&gt;下面记录一下！(请按照顺序配置)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>大流量网站怎么优化</title>
      <link>https://phpgao.github.io/large_scale_web_site_optimize.html</link>
      <pubDate>Mon, 24 Aug 2015 10:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/large_scale_web_site_optimize.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/09/1782607352.png&#34; alt=&#34;流量！&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最近面试总是多多少少会出现这个问题，虽然老高的网站流量不大，但是如果解决这个问题，但是在理论上还是能回答的。&lt;/p&gt;
&lt;p&gt;首先能够明确的是，一般问这个问题的人应该没听过&lt;strong&gt;C10K&lt;/strong&gt;这个问题吧，注意修饰词&lt;strong&gt;一般&lt;/strong&gt;。所以你有挺高的概率&lt;strong&gt;不需要&lt;/strong&gt;从更底层的回答这个问题，比如多线程和多进程的取舍，或者使用异步和非阻塞等等。。。不过老高还是建议你去了解一下&lt;strong&gt;C10K&lt;/strong&gt;这个概念！这个地方有原文&lt;a href=&#34;http://www.kegel.com/c10k.html&#34;&gt;点我&lt;/a&gt;，这个地方有翻译&lt;a href=&#34;http://www.cnblogs.com/fll/archive/2008/05/17/1201540.html&#34;&gt;点我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个问题回答的方式，出发点很多。老高认为这样回答比较好：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近的见闻</title>
      <link>https://phpgao.github.io/recent_august.html</link>
      <pubDate>Sat, 22 Aug 2015 11:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/recent_august.html</guid>
      <description>&lt;p&gt;老高最近告别了20多年的西安生活，一人坐火车来到上海，还好有老伙计收留。&lt;/p&gt;
&lt;p&gt;最近没有更新文章，但想写的其实很多。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/08/2886413420.png&#34; alt=&#34;14小时的火车&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tcp链接的几种状态</title>
      <link>https://phpgao.github.io/tcp_status.html</link>
      <pubDate>Wed, 08 Jul 2015 04:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/tcp_status.html</guid>
      <description>&lt;p&gt;转自 &lt;a href=&#34;http://xinaction.iteye.com/blog/1180541&#34;&gt;tcp链接的几种状态&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/07/503433726.jpg&#34; alt=&#34;tcp链接的几种状态&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>快速升级python到2.7</title>
      <link>https://phpgao.github.io/update_python_to_27.html</link>
      <pubDate>Tue, 30 Jun 2015 05:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/update_python_to_27.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/1602052211.png&#34; alt=&#34;python&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(python logo来自互联网)&lt;/p&gt;
&lt;p&gt;摘自 &lt;a href=&#34;https://github.com/h2oai/h2o-2/wiki/Installing-python-2.7-on-centos-6.3.-Follow-this-sequence-exactly-for-centos-machine-only#how-to-install-python-276-on-centos-63-62-and-64-okay-too-probably-others&#34;&gt;Installing python 2.7 on centos 6.3. Follow this sequence exactly for centos machine only&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yunfile文件下载脚本</title>
      <link>https://phpgao.github.io/yum-file-downloader.html</link>
      <pubDate>Mon, 29 Jun 2015 04:25:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/yum-file-downloader.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/4049188365.png&#34; alt=&#34;YUNFILE&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;脚本的诞生源自这里&lt;a href=&#34;https://www.v2ex.com/t/201623&#34;&gt;python 爬虫求助&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单socket编程2</title>
      <link>https://phpgao.github.io/socket-lesson2.html</link>
      <pubDate>Sat, 27 Jun 2015 14:09:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/socket-lesson2.html</guid>
      <description>&lt;p&gt;上一节我们提到了socket编程的基本形式，这一节我们加强服务端的性能！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>http库测试工具---httpbin</title>
      <link>https://phpgao.github.io/how-to-httpbin.html</link>
      <pubDate>Sat, 27 Jun 2015 11:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/how-to-httpbin.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/727407702.jpg&#34; alt=&#34;http&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个人想学习爬虫技术，我会首先推荐他学会使用httpbin！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;httpbin(&lt;a href=&#34;http://httpbin.org&#34;&gt;官网&lt;/a&gt;|&lt;a href=&#34;https://github.com/Runscope/httpbin&#34;&gt;github&lt;/a&gt;)是一个很不错测试工具，你可以放心大胆的&lt;strong&gt;黑&lt;/strong&gt;他，而不用担心他报复你。他有点像一个蜜罐，时刻等待着你的光临，然后根据你的请求，给你返回你想要的东西&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP天坑总结</title>
      <link>https://phpgao.github.io/php-fool.html</link>
      <pubDate>Sat, 27 Jun 2015 01:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php-fool.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/2312350731.jpg&#34; alt=&#34;天坑&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;PHP天坑你懂得，不断总结中。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MAC下快速安装PHP</title>
      <link>https://phpgao.github.io/mac-install-php.html</link>
      <pubDate>Fri, 26 Jun 2015 05:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mac-install-php.html</guid>
      <description>请安装Homebrew先
# 添加源 brew tap josegonzalez/homebrew-php # 一键安装php各个版本 brew install php54 php54-mcrypt brew install php55 php55-xdebug brew install php56 </description>
    </item>
    
    <item>
      <title>简单socket编程1</title>
      <link>https://phpgao.github.io/socket-lesson1.html</link>
      <pubDate>Wed, 24 Jun 2015 04:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/socket-lesson1.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/2605814858.jpg&#34; alt=&#34;socket&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;p&gt;说到socket，学过网络基础的人都听过，他是TCP/IP的抽象，他是网络世界的入口，它无处不在。&lt;/p&gt;
&lt;p&gt;学会了socket编程，就意味着能够更深层次的控制你的流量，之后再看python的urllib*或php的curl，简直就是小儿科！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近距离接触HTTP协议</title>
      <link>https://phpgao.github.io/socket-http.html</link>
      <pubDate>Wed, 24 Jun 2015 00:16:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/socket-http.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/4066750042.png&#34; alt=&#34;HTTP_logo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自WIKI)&lt;/p&gt;
&lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。我们打开浏览器输入网址&lt;code&gt;www.google.com&lt;/code&gt;，不对！刚才那个是一个不存在的网址，我们还是用&lt;code&gt;www.phpgao.com&lt;/code&gt;为例吧。我们(客户端)将老高的域名输入浏览器，浏览器就会为我们呈现老高的网页，首先我们能确定作为客户端，在此期间必定与老高的服务器发生了某种关系！但是具体发送了什么呢？作为一名WEB开发人员，这是我们必须知道的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python中的cookielib的使用方法</title>
      <link>https://phpgao.github.io/python-cookielib.html</link>
      <pubDate>Sun, 21 Jun 2015 11:18:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python-cookielib.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/2635542683.jpg&#34; alt=&#34;cookie&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/cookielib.html&#34;&gt;cookielib&lt;/a&gt;是一个自动处理cookies的模块，如果我们在使用爬虫等技术的时候需要保存cookie，那么cookielib会让你事半功倍！他最常见的搭档模块就是python下的urllib和request。&lt;/p&gt;
&lt;p&gt;但是老高在使用cookielib的时候总是碰到这样那样的问题，在查看cookielib的源码后，有所感悟。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Privoxy将socks5代理转为http代理</title>
      <link>https://phpgao.github.io/privoxy-shadowsocks.html</link>
      <pubDate>Fri, 19 Jun 2015 02:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/privoxy-shadowsocks.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/13067004.png&#34; alt=&#34;访问谷歌&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;大家都知道shadowsocks只提供了SOCKS5的代理，而没有提供http代理，而很多软件仅提供了http代理的支持，比如老高需要使用shell命令行扶墙，或者使用git同步android的源代码，再或者更新android SDK，该怎么办呢？&lt;/p&gt;
&lt;p&gt;老高在此介绍一个软件&lt;a href=&#34;http://www.privoxy.org&#34;&gt;Privoxy&lt;/a&gt;，它可以作为&lt;strong&gt;代理的代理&lt;/strong&gt;，为我们解决上述问题！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Privoxy is a non-caching web proxy with advanced filtering capabilities for enhancing privacy, modifying web page data and HTTP headers, controlling access, and removing ads and other obnoxious Internet junk. Privoxy has a flexible configuration and can be customized to suit individual needs and tastes. It has application for both stand-alone systems and multi-user networks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由介绍看来，privoxy的功能可远远不止http代理这么简单！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新主题基于Bootstrap3</title>
      <link>https://phpgao.github.io/new_theme_bootstrap3.html</link>
      <pubDate>Fri, 19 Jun 2015 01:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/new_theme_bootstrap3.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/3708675869.png&#34; alt=&#34;新主题&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;大家应该注意到了，老高花了两天时间匆忙做的难看的主题终于上线了。&lt;/p&gt;
&lt;p&gt;已经实现的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自适应页面&lt;/li&gt;
&lt;li&gt;lazyload图片加载&lt;/li&gt;
&lt;li&gt;加载速度优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前BS的浏览器支持情况如下表&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP实现常见排序</title>
      <link>https://phpgao.github.io/php-sort.html</link>
      <pubDate>Tue, 09 Jun 2015 15:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php-sort.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/1704156785.png&#34; alt=&#34;排序&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;(图片来自互联网)&lt;/p&gt;
&lt;p&gt;最近老高复习了下数据结构，此文会慢慢更新！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;?php

$count = 1000;

for($i=0;$i&amp;lt;$count;$i++){
    $random_array[$i] = rand(0,$count);
}


# 空白对照
$start = microtime(1);
echo &amp;#39;Do nothing takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;

# 原生方法排序
$test_array = $random_array;
$start = microtime(1);

sort($test_array);
echo &amp;#39;Origin sort takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;

# 冒泡排序
# 两两交换，思路很简单
$test_array = $random_array;
$start = microtime(1);
# 需要把计算个数的时间也考虑到
$count = count($test_array);
# 循环n-1次
for($i=1;$i&amp;lt;$count;$i++){
    # 循环n-1-$i次
    for($j=0;$j&amp;lt;$count-$i;$j++){
        if($test_array[$j] &amp;gt; $test_array[$j+1]){
            $tmp = $test_array[$j];
            $test_array[$j] = $test_array[$j+1];
            $test_array[$j+1] = $tmp;
        }
    }
}
echo &amp;#39;Bubble sort takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;

# 选择排序
# 依次选择最小(大)的元素，等选择完毕自动有序
$test_array = $random_array;
$start = microtime(1);
$count = count($test_array);

for($i=0;$i&amp;lt;$count-1;$i++){
    # $test_array[$i]为当前最小
    for($j=$i+1;$j&amp;lt;$count;$j++){
        # 从下一个开始比较
        if($test_array[$i] &amp;gt; $test_array[$j]){
            $tmp = $test_array[$j];
            $test_array[$j] = $test_array[$i];
            $test_array[$i] = $tmp;
        }
    }
}
echo &amp;#39;Select sort takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;


# 插入排序
# 就像别人给你发扑克牌，拿到一张牌就插到你手上，并使之有序
$test_array = $random_array;
$start = microtime(1);
$count = count($test_array);
# 直接跳过$i=0
for($i=1;$i&amp;lt;$count;$i++){
    # 取$i左边的元素先比，比到最左
    for($j=$i-1;$j&amp;gt;=0;$j--){
        # 共$j+1个元素，其中前$j个有序
        if($test_array[$j] &amp;gt; $test_array[$j+1]){
            $tmp = $test_array[$j];
            $test_array[$j] = $test_array[$j+1];
            $test_array[$j+1] = $tmp;
        }else{
            break;
        }
    }
}

echo &amp;#39;Insertion sort takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;


# 快速排序
# 有点递归的思想，随机一个基准，将集合分为两半，然后继续分解，直到元素个数为1或0个
$test_array = $random_array;
$start = microtime(1);

function quick_sort($arr){
    $len = count($arr);
    # 符合条件&amp;lt;=1即无需分组
    if($len &amp;lt;= 1) return $arr;

    # floor也行，主要是取整
    $index = ceil($len/2);
    $base = $arr[$index];

    $left = array();
    $right = array();

    for($i=0;$i&amp;lt;$len;$i++){
        if($i == $index) continue;
        if($arr[$i] &amp;lt; $base){
            $left[] = $arr[$i];
        }else{
            $right[] = $arr[$i];
        }
    }

    $l = quick_sort($left);
    $r = quick_sort($right);
    return array_merge($l, (array)$base, $r);
}

quick_sort($test_array);
echo &amp;#39;Quick sort takes:&amp;#39; . number_format((microtime(1) - $start), 6);
echo &amp;#34;\n&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>centos下安装使用composer</title>
      <link>https://phpgao.github.io/composer-centos.html</link>
      <pubDate>Tue, 09 Jun 2015 02:20:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/composer-centos.html</guid>
      <description>&lt;p&gt;composer的中文意思为作曲家，是php最新的包管理器。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/3590997597.png&#34; alt=&#34;php composer&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tcpdump命令讲解</title>
      <link>https://phpgao.github.io/tcpdump.html</link>
      <pubDate>Tue, 02 Jun 2015 06:29:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/tcpdump.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/2931030976.png&#34; alt=&#34;tcpdump&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;什么是tcpdump？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A powerful command-line packet analyzer; and libpcap, a portable C/C++ library for network traffic capture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一个强大的抓包命令行工具，还有libpcap，一个跨平台的C/C++网络抓包库。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>typecho插件编写教程7---Helper类</title>
      <link>https://phpgao.github.io/typecho_plugin_tutorial-7.html</link>
      <pubDate>Tue, 02 Jun 2015 03:00:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_plugin_tutorial-7.html</guid>
      <description>&lt;p&gt;&lt;code&gt;Helper&lt;/code&gt;类为我们封装了很多与插件有关的操作，并且全部是公共静态方法，比如获取系统配置、添加路由、添加面板等功能，是开发插件必不可少的工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;插件帮手将默认出现在所有的typecho发行版中.因此你可以放心使用它的功能, 以方便你的插件安装在用户的系统里.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Helper类的注释已经写的很清楚了，老高在此仅挑几个常用的方法讲讲。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shadowsocks相关资源下载</title>
      <link>https://phpgao.github.io/download_shadowsocks.html</link>
      <pubDate>Tue, 26 May 2015 05:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/download_shadowsocks.html</guid>
      <description>&lt;p&gt;鉴于很多同学找不到shadowsocks客户端服务端，老高在此提供最新的下载，如果某软件有更新，请留言提醒！&lt;/p&gt;
&lt;p&gt;请注意&lt;strong&gt;老高不会对下载的软件负责&lt;/strong&gt;，老高也没有做sha1、md5校验，都是直接下载下来的。。。&lt;/p&gt;
&lt;p&gt;如果不放心的话，你有绕道的权利！&lt;/p&gt;
&lt;p&gt;顺便分享几个站&lt;/p&gt;
&lt;p&gt;直接下载Google Play的APK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://apps.evozi.com/apk-downloader/&#34;&gt;apk-downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接下载chrome商店应用&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://chrome-extension-downloader.com/&#34;&gt;chrome-extension-downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网友 &lt;a href=&#34;http://weibo.com/nocheers&#34;&gt;@disonlee&lt;/a&gt; 提供&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://getchrome.sinaapp.com&#34;&gt;getchrome.sinaapp.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让多说支持UA的显示</title>
      <link>https://phpgao.github.io/duoshuo_user_agent.html</link>
      <pubDate>Mon, 25 May 2015 04:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/duoshuo_user_agent.html</guid>
      <description>&lt;p&gt;代码由 huhuhuhu 提供&lt;/p&gt;
&lt;p&gt;地址 &lt;a href=&#34;http://git.oschina.net/huhuhuhu/Make-DUOSHUO-Show-UA&#34;&gt;huhu呼呼 / Make DUOSHUO Show UA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老高的博客目前的评论系统使用了 多说 + typecho多说插件，最近才发现了多说还可以支持显示UA，动手吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>simple_html_dom换行符丢失的问题</title>
      <link>https://phpgao.github.io/simple_html_dom_miss_n.html</link>
      <pubDate>Mon, 18 May 2015 12:10:37 +0000</pubDate>
      
      <guid>https://phpgao.github.io/simple_html_dom_miss_n.html</guid>
      <description>今天老高在更新**Table Of Contents for typecho**的时候，遇到了一个问题。
因为解析文档的时候，换行符\n被无故删除掉了，导致pre中code的解析一片混乱，阅读源代码后发现了这个选项stripRN，默认值是true，即默认删除变量中的换行符，将其关闭即可！
核心代码位于约1147行左右。
if ($stripRN) { $str = str_replace(&amp;#34;\r&amp;#34;, &amp;#34; &amp;#34;, $str); $str = str_replace(&amp;#34;\n&amp;#34;, &amp;#34; &amp;#34;, $str); ... </description>
    </item>
    
    <item>
      <title>模拟登录脚本之搬瓦工bandwagonhost</title>
      <link>https://phpgao.github.io/login_script_for_bandwagonhost.html</link>
      <pubDate>Sun, 17 May 2015 13:15:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/login_script_for_bandwagonhost.html</guid>
      <description>老早写的，都忘了当初想干啥了。。。。
半成品，留个坑，待填。
#!/usr/bin/env python # encoding: utf-8 import cookielib import requests def http_send(url, post_data=&amp;#39;&amp;#39;, **kwargs): cookie_handler = cookielib.MozillaCookieJar(&amp;#39;cookie.txt&amp;#39;) try: cookie_handler.load(ignore_discard=1) except cookielib.LoadError, e: print e + &amp;#34;new cookie file&amp;#34; headers = { &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36&amp;#39;} if post_data: req = requests.post(url, data=post_data, cookies=cookie_handler) else: req = requests.get(url) print req.headers for c in req.cookies: cookie_handler.set_cookie(c) cookie_handler.save(ignore_discard=1) return req.content if __name__ == &amp;#39;__main__&amp;#39;: # init cookie print http_send(&amp;#39;http://localhost/clientarea.</description>
    </item>
    
    <item>
      <title>排查PHP-FPM占用CPU过高</title>
      <link>https://phpgao.github.io/php-fpm-high-cpu-consumption.html</link>
      <pubDate>Fri, 15 May 2015 10:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php-fpm-high-cpu-consumption.html</guid>
      <description>最近老高发现服务器的CPU总是被某个php-fpm占用过高，记录一下如何排查。
发现 如何发现的呢？当然是使用top命令，发现系统的load average&amp;gt;3，这说明系统已经处于比较高的负载中。
尝试解决 当我把php-fpm重启后，没过一会儿又开始cpu狂飙！这是什么鬼？
开始排查 首先，我们开启在php-fmp.conf中开启错误日志，慢执行日志还有常规日志
error_log = /var/log/php/error.log access.log = /var/log/php/access.$pool.log access.format = &amp;#34;%R - %u %t \&amp;#34;%m %r%Q%q\&amp;#34; %s %f %{mili}d %{kilo}M %{system}C%%&amp;#34; slowlog = /var/log/php/slow.$pool.log request_slowlog_timeout = 3s 重启php-fpm后我们开始监视日志
# 查看慢执行日志 [15-May-2015 12:50:22] [pool www] pid 1819 script_filename = /home/ftp/phpergao/wwwroot/index.php [0x00007f2d286c2790] replace() /home/ftp/phpergao/wwwroot/usr/plugins/CdnHelper/Plugin.php:72 [0x00007fff78ab00f0] replace() unknown:0 [0x00007f2d286c2420] call_user_func_array() /home/ftp/phpergao/wwwroot/var/Typecho/Plugin.php:489 [0x00007fff78ab0430] __call() unknown:0 [0x00007f2d286c1f78] contentEx() /home/ftp/phpergao/wwwroot/var/Widget/Abstract/Contents.php:141 [0x00007f2d286c1b78] ___content() /home/ftp/phpergao/wwwroot/var/Typecho/Widget.php:385 [0x00007fff78ab0850] __get() unknown:0 [0x00007f2d286c1870] content() /home/ftp/phpergao/wwwroot/var/Widget/Abstract/Contents.php:783 [0x00007f2d286c1628] content() /home/ftp/phpergao/wwwroot/var/Widget/Archive.</description>
    </item>
    
    <item>
      <title>为SourceTree添加Kaleidoscope的external-diff支持</title>
      <link>https://phpgao.github.io/sourcetree_kaleidoscope.html</link>
      <pubDate>Tue, 12 May 2015 16:41:06 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sourcetree_kaleidoscope.html</guid>
      <description>编辑 ~/.gitconfig
# add [difftool &amp;#34;sourcetree&amp;#34;] cmd = /usr/local/bin/ksdiff -- \&amp;#34;$LOCAL\&amp;#34; \&amp;#34;$REMOTE\&amp;#34; path = [mergetool &amp;#34;sourcetree&amp;#34;] cmd = /usr/local/bin/ksdiff --merge --output \&amp;#34;$MERGED\&amp;#34; --base \&amp;#34;$BASE\&amp;#34; -- \&amp;#34;$LOCAL\&amp;#34; \&amp;#34;$REMOTE\&amp;#34; trustExitCode = true 参考
https://ruby-china.org/topics/14404</description>
    </item>
    
    <item>
      <title>git的submodule的使用总结</title>
      <link>https://phpgao.github.io/git_submodule.html</link>
      <pubDate>Tue, 12 May 2015 06:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_submodule.html</guid>
      <description>&lt;p&gt;老高最近的项目用到了git的submodule，期间遇到了很多坑，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何更新submodule
如何修改并提交submodule
如何将submodule的变更在父项目中提交&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>换一个主题，换一个心情</title>
      <link>https://phpgao.github.io/new_theme_20150512.html</link>
      <pubDate>Tue, 12 May 2015 03:50:31 +0000</pubDate>
      
      <guid>https://phpgao.github.io/new_theme_20150512.html</guid>
      <description>历时2天，使用了Amaze UI，并且移植了Amaze UI的官方博客主题。
目前还有BUG，待修复。。。</description>
    </item>
    
    <item>
      <title>Linux终端美化资源整理</title>
      <link>https://phpgao.github.io/pretty_linux.html</link>
      <pubDate>Wed, 29 Apr 2015 11:26:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pretty_linux.html</guid>
      <description>配色方案 通用主题 https://github.com/chriskempson/tomorrow-theme.git
https://github.com/altercation/solarized.git
iterm2 Monokai-Soda
寻找主题方法 github里随便一搜就是一堆堆
https://github.com/search?q=iterm2+theme</description>
    </item>
    
    <item>
      <title>安装shadowsocks-python并启用chacha20加密</title>
      <link>https://phpgao.github.io/shadowsocks_chacha20.html</link>
      <pubDate>Mon, 27 Apr 2015 14:29:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/shadowsocks_chacha20.html</guid>
      <description>&lt;p&gt;原版shadowsocks使用python写的，源码在此&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks&#34;&gt;https://github.com/shadowsocks/shadowsocks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面老高写一个如何安装shadowsocks并且开启chacha20加密的方法&lt;/p&gt;
&lt;p&gt;老高的运行环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;centos6 + python2.6&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>pillow解决encoder-zip-not-available问题</title>
      <link>https://phpgao.github.io/pillow_solve_encoder_zip_not_available.html</link>
      <pubDate>Mon, 27 Apr 2015 03:46:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pillow_solve_encoder_zip_not_available.html</guid>
      <description>&lt;p&gt;最近写程序用到了这个模块，但是貌似在 &amp;lt;Python2.7 的环境下用总是会出现这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>缓存算法(转载)</title>
      <link>https://phpgao.github.io/algorithm_of_cache.html</link>
      <pubDate>Sat, 28 Mar 2015 05:01:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/algorithm_of_cache.html</guid>
      <description>&lt;p&gt;老高某天吃泡馍的时候在微信里看到此文，而且让我想到了&lt;code&gt;bloom filter&lt;/code&gt;算法，文章很有意思，老高在此推荐给大家！&lt;/p&gt;
&lt;p&gt;以下：&lt;/p&gt;
&lt;p&gt;　　原文：http://www.jtraining.com/component/content/article/35-jtraining-blog/98.html&lt;/p&gt;
&lt;p&gt;　　翻译：http://www.zavakid.com/25&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给程序员推荐几个网站</title>
      <link>https://phpgao.github.io/website_recommend.html</link>
      <pubDate>Fri, 27 Mar 2015 04:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/website_recommend.html</guid>
      <description>&lt;p&gt;写写代码，看看人生！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>获取天气预报的方法</title>
      <link>https://phpgao.github.io/php_weather.html</link>
      <pubDate>Wed, 25 Mar 2015 14:14:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_weather.html</guid>
      <description>&lt;p&gt;老高最近在处理天气预报的问题时总结了一下，备用！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>下一步计划</title>
      <link>https://phpgao.github.io/next_step_201503.html</link>
      <pubDate>Wed, 25 Mar 2015 01:36:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/next_step_201503.html</guid>
      <description>博客 目前博客的百度收录不再像以前一样不稳定了(主要针对百度)，基本上今天发的最迟明天就会收录，可能是因为我的插件的原因吧，看来还是有点用的，最近打算为插件做一个面板，主要功能是展示百度的请求（话说百度还真准时）。
职业 目前正在求职中，希望到南方发展，上海或深圳，求推荐啊！
学习 最近在学习ANDROID，准备开发一个APP，和某论坛有关，源码会公开在github上。
发现一个自学网站的合集：一纳米学习，推荐给大家！
还有准备读一些C方面的书。
生活 家里最近有很多烦心事，需要一步步处理。
最近听了几首达达乐队的歌，还有Niykee Heaton的歌。</description>
    </item>
    
    <item>
      <title>windows环境下快速搭建开发环境</title>
      <link>https://phpgao.github.io/windows_programmer_for_php.html</link>
      <pubDate>Wed, 11 Mar 2015 07:53:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/windows_programmer_for_php.html</guid>
      <description>&lt;p&gt;先留坑，以后慢慢补充&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac关闭自动生成DS_store</title>
      <link>https://phpgao.github.io/mac_ds_store.html</link>
      <pubDate>Sun, 08 Mar 2015 04:58:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mac_ds_store.html</guid>
      <description>&lt;p&gt;参考了&lt;a href=&#34;http://www.zhihu.com/question/20873070/answer/41405748?group_id=557848511253651456&#34;&gt;长短短d的回答 &amp;ndash; 程序员如何优雅地使用 Mac？&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux下windows的换行符</title>
      <link>https://phpgao.github.io/return_in_linux_windows.html</link>
      <pubDate>Wed, 04 Mar 2015 03:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/return_in_linux_windows.html</guid>
      <description>&lt;p&gt;Unix/MAC和windows下换行总会出现以下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unix/MAC下打开windows下的文本会多出一个^M，win下打开Unix/MAC文本会变成一行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是换行机制不一样，Unix下是&lt;code&gt;\n&lt;/code&gt;(0A)，mac下是&lt;code&gt;\r&lt;/code&gt;(0D)，win下是&lt;code&gt;\r\n&lt;/code&gt;(0D0A)。导致的结果是在程序中会造成一定的混乱。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://ww4.sinaimg.cn/large/6735b7fagw1eptjmcjvynj20je03mwh3.jpg&#34; alt=&#34;十六进制的换行&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git仓库删除敏感信息</title>
      <link>https://phpgao.github.io/git_remove_sensitive_data.html</link>
      <pubDate>Fri, 13 Feb 2015 01:59:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_remove_sensitive_data.html</guid>
      <description>如果不小心再某一次commit了一个含有敏感信息的文件，如公共的数据库配置。然后又不小心上传至github或者其他远程仓库中，那么想要彻底把此文件删除确实不是一件简单的事情。
因为如果只是在下一次提交中删除或修改了某文件，在git提交的历史中还是能够找到修改前的版本，这个操作无非是掩耳盗铃。
听说前一阵有人专门写爬虫，专门爬云储存的用户名密码，不少人都被黑了。所以如果不小心在git中可能包含敏感信息，commit前一定要仔细检查。
那么如何用正确的姿势删除git中的敏感信息呢？下面看看官方给出的解决步骤：
git删除敏感信息
Reference:
https://help.github.com/articles/remove-sensitive-data/</description>
    </item>
    
    <item>
      <title>python的飞信发送类</title>
      <link>https://phpgao.github.io/pyfetion.html</link>
      <pubDate>Sat, 31 Jan 2015 14:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pyfetion.html</guid>
      <description>pyfetionpyfetionpyfetion参照着php版的接口写的
目前测试使用没问题，预留了保存cookie和token的功能，可以减少几次请求，以后慢慢加吧！
目前给自己发通知还是妥妥的。</description>
    </item>
    
    <item>
      <title>SVN命令行操作</title>
      <link>https://phpgao.github.io/svn_cli.html</link>
      <pubDate>Thu, 29 Jan 2015 06:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/svn_cli.html</guid>
      <description>&lt;p&gt;svn命令和git很像啊！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常用User-Agent整理</title>
      <link>https://phpgao.github.io/user_agent_collection.html</link>
      <pubDate>Thu, 29 Jan 2015 03:36:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/user_agent_collection.html</guid>
      <description>&lt;p&gt;采集什么的喜欢这个了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mac下vim的美化配置</title>
      <link>https://phpgao.github.io/mac_vim_configure.html</link>
      <pubDate>Wed, 28 Jan 2015 13:51:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mac_vim_configure.html</guid>
      <description>&lt;p&gt;osx系统有些配置文件地方和Linux系统不太一样真是让人捉急&lt;/p&gt;
&lt;p&gt;以VIM为例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git的一些特殊操作</title>
      <link>https://phpgao.github.io/git_useful_command.html</link>
      <pubDate>Mon, 26 Jan 2015 02:54:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_useful_command.html</guid>
      <description>删除本地提交并推至origin # 第一步 ## 删除本地提交(HEAD为最近一次提交,HEAD^上上次) git reset --hard commit-id # 第二步 ## 强制推送 git push origin +master ## 或 git push origin HEAD --force RESET 根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:
 git reset –mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息 git reset –soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容
 关闭ISSUE 在提交的message中添加如下内容会自动与issue #id关联。是不是很方便啊！
 fixes #xxx fixed #xxx fix #xxx closes #xxx close #xxx closed #xxx  Reference：
http://www.cnblogs.com/shure/archive/2012/11/07/2758663.html http://blog.csdn.net/hshl1214/article/details/8084423</description>
    </item>
    
    <item>
      <title>git的tag操作</title>
      <link>https://phpgao.github.io/git_tag.html</link>
      <pubDate>Sun, 25 Jan 2015 12:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_tag.html</guid>
      <description>&lt;h2 id=&#34;什么是tag&#34;&gt;什么是tag&lt;/h2&gt;
&lt;p&gt;很简单，tag的字面意思是标签。在git中tag的功能就是把开发阶段做一个总结，打上标签，方便以后的查看与管理，通常用于版本发布。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编码漫谈</title>
      <link>https://phpgao.github.io/char_encode.html</link>
      <pubDate>Fri, 23 Jan 2015 02:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/char_encode.html</guid>
      <description>&lt;p&gt;编码一定是程序员永远的痛，不知道老高能不能救到你。&lt;/p&gt;
&lt;p&gt;以下命令的操作环境：centos6 + python2.6&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信公众号内容接口</title>
      <link>https://phpgao.github.io/wechat_public_user_api.html</link>
      <pubDate>Thu, 22 Jan 2015 08:39:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/wechat_public_user_api.html</guid>
      <description>今天在V2EX上发现了一个上搜索微信内容的好网站
http://weixin.sogou.com/
练习爬虫的同学有福了，没事儿干可以试试。
接口地址：
http://weixin.sogou.com/gzhjs
获取方式:
GET
参数:
  cb 必须 固定值 sogou.weixin.gzhcb
  openid 必须 公众号的唯一ID，可以通过搜索结果页面获得
  page 可选 页码 默认第一页 每页最多十条记录
  t 可选 请求发送的时间，目测没啥大用
  最近貌似对openid加密了，等高人破解吧。
dmsYotdg%2F1V4oas03wIdducg7w5SL9M%2BYAL3GsHdR%2Fw9aG9Qzsh6XnA%2FUqKuQ66p8tRkK oIWsFt4Dl6kREBsD_KrMA84ThiIA wDssoe6gmmM8o%2FDMnpcWKuHwEPHxqeOZXzd%2FXytWShm4vQlImQmVes2pA7cYWfc%2FwudCK oIWsFt5sM7wz7isNXkl01is9M834 IAsHogvgG8dho2KKG6sO2uI3QooM18Hx%2BZF7o7%2BjinhzOVx5t3EcYmhn93gQQgsYira4N oIWsFt0fiD095kHlyHMIXEM7PrZc M8sGoC2gu6ZRohqri5nKnuau%2FD8g0jkqKyfAW8cjgPLn1e3wwAZSEM%2FMsVhWFQqp7%2Bz%2B9 oIWsFtwFWRis8pbm2-hOgllnpZfw 6Ss7od5gsiLBoala%2BGkVduU4PRslLs6USIzFeWxJXDR4oyMBZNvWwNovVPSmZJ6GVI7PG oIWsFt4UdPREjjItJo-JsJhoTjSU Qqsoo2gg7EDuovYnPkpxGu22Hv1%2FLF9MkC4AtaAGVcP%2B49dhr5tmnOpMZFpMtNQfp%2BnRv oIWsFt-abnxH6yhUGXNtgwhtsvS4 </description>
    </item>
    
    <item>
      <title>python格式化输出dict等集合对象</title>
      <link>https://phpgao.github.io/python_print_formatted.html</link>
      <pubDate>Thu, 22 Jan 2015 02:36:04 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_print_formatted.html</guid>
      <description>调试程序的时候，如果需要打印出变量的信息，在python中很容易，一句print即可，他几乎可以打印任何类型的对象，不像PHP中，有一堆echo(),print(),print_r(),var_dump()，让人头疼！
但是PHP的打印函数有个好处，就是打印格式良好，而Python的打印信息就不是很友好了，如
# 模拟一个很大的键值对 dic = {} for i in xrange(201): dic[i] = &amp;#34;value for %d&amp;#34; % i print dic 其结果我就不打印了，总之很难看！
如何让python那冗长而且没有格式的打印变得更直观，方法有两种。
自定义dump 此方法来自stackoverflow
# 以后需要有格式的打印一个集合对象，直接使用dump(xxx)即可！ # 不要忘了import sys import sys def dump(obj, nested_level=0, output=sys.stdout): spacing = &amp;#39; &amp;#39; if type(obj) == dict: print &amp;gt;&amp;gt; output, &amp;#39;%s{&amp;#39; % ((nested_level) * spacing) for k, v in obj.items(): if hasattr(v, &amp;#39;__iter__&amp;#39;): print &amp;gt;&amp;gt; output, &amp;#39;%s%s:&amp;#39; % ((nested_level + 1) * spacing, k) dump(v, nested_level + 1, output) else: print &amp;gt;&amp;gt; output, &amp;#39;%s%s: %s&amp;#39; % ((nested_level + 1) * spacing, k, v) print &amp;gt;&amp;gt; output, &amp;#39;%s}&amp;#39; % (nested_level * spacing) elif type(obj) == list: print &amp;gt;&amp;gt; output, &amp;#39;%s[&amp;#39; % ((nested_level) * spacing) for v in obj: if hasattr(v, &amp;#39;__iter__&amp;#39;): dump(v, nested_level + 1, output) else: print &amp;gt;&amp;gt; output, &amp;#39;%s%s&amp;#39; % ((nested_level + 1) * spacing, v) print &amp;gt;&amp;gt; output, &amp;#39;%s]&amp;#39; % ((nested_level) * spacing) else: print &amp;gt;&amp;gt; output, &amp;#39;%s%s&amp;#39; % (nested_level * spacing, obj) pprint 此方法来自官方，可以自定义缩进，宽度等信息。</description>
    </item>
    
    <item>
      <title>在路由器下载文件</title>
      <link>https://phpgao.github.io/download_on_router.html</link>
      <pubDate>Thu, 15 Jan 2015 15:06:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/download_on_router.html</guid>
      <description>昨天晚上用wget命令下载了WOW客户端，要是搁到往常，还必须开机电脑下载，现在只需要再路由器的ssh里执行以下即可！
离线下载BT和ED2K还在研究中
wget http://wow.zip 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null &amp;amp; </description>
    </item>
    
    <item>
      <title>将你的git协议由https变为ssh</title>
      <link>https://phpgao.github.io/github_https_to_ssh.html</link>
      <pubDate>Thu, 15 Jan 2015 12:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/github_https_to_ssh.html</guid>
      <description>你是不是已经厌倦了每次git push的时候每次都要输入用户名密码，使用下面的方法可以让你使用ssh协议通过密钥验证的方式让你得到解脱。
有两种修改方法
不过再实施前，请先准备好自己的密钥
ssh-keygen -t rsa -C &amp;#34;your_name&amp;#34; 然后登录https://github.com/settings/ssh，添加当前计算机的~/.ssh/id_rsa.pub公钥内容到github。
之后我们使用ssh git@github.com验证是否添加成功，如果返回以下内容，即代表添加成功！
 Hi phpgao! You&amp;rsquo;ve successfully authenticated, but GitHub does not provide shell access.
 下一步就是让我们的git使用公钥验证。
clone 保存你的最后一次修改并提交。
删除项目
使用下面的命令clone项目
# 采用ssh的方式克隆项目 # someaccount/someproject.git 中 some account为github用户名/someproject为仓库名 git clone git@github.com:phpgao/BaiduSubmit.git 修改https git remote set-url origin git@github.com:someaccount/someproject.git 顺便提一下，老高的git push总是报warning: push.default is unset错误，今天终于知道为啥了。原来是版本兼容性的原因，低版本的git push如果不指定分支名，就会全部推送，而新版只会推送当前分支。
解决的办法也很简单，我们只需要明确指定应该推送方式即可，至于选择哪种方式，It&amp;rsquo;s up to you.
# 全部推送 git config --global push.default matching # 部分推送 git config --global push.default simple 完</description>
    </item>
    
    <item>
      <title>M&#43;字体安装</title>
      <link>https://phpgao.github.io/m_plus_font_on_mac.html</link>
      <pubDate>Tue, 06 Jan 2015 14:51:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/m_plus_font_on_mac.html</guid>
      <description>&lt;p&gt;今天微信推了一篇文章，是讲一个叫M＋的开源字体，貌似MBPR上表现还不错。&lt;/p&gt;
&lt;p&gt;那么如何安装M+字体呢？&lt;/p&gt;
&lt;p&gt;正好老高还没有在OSX下安装过字体，结果发现，原来安装个字体和在win下是一样一样的。。。&lt;/p&gt;
&lt;h2 id=&#34;项目地址&#34;&gt;项目地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://sourceforge.jp/projects/mplus-fonts/&#34;&gt;http://sourceforge.jp/projects/mplus-fonts/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>模拟登录联通10010.com查询宽带余额</title>
      <link>https://phpgao.github.io/china_unicom_broadband_balance.html</link>
      <pubDate>Tue, 06 Jan 2015 06:46:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/china_unicom_broadband_balance.html</guid>
      <description>家里的宽带是包年按天扣费，时间长了就忘了改什么时候续费了。
抽时间写了个模拟登录10010.com的脚本，自动查询余额。
每天中午12点查一次，省得下次又欠费了。
模拟登录的过程很简单，获取查询的cookie需要两步请求，拿到cookie后可以随意查询。
有TX想看源码么？
已贴源码
#!/usr/bin/env python # encoding: utf-8 &amp;#34;&amp;#34;&amp;#34; @version: 0.2 @author: phpergao @license: Apache Licence @contact: endoffight@gmail.com @site: http://www.phpgao.com @software: PyCharm @file: 10010.py @time: 15-1-3 下午6:06 一键查询联通宽带余额 &amp;#34;&amp;#34;&amp;#34; import urllib2 import cookielib import json class Crawl(): def __init__(self, username, passwd, debug=False): (self.username, self.passwd) = (username, passwd) self.cookie = cookielib.CookieJar() cookieHandler = urllib2.HTTPCookieProcessor(self.cookie) self.is_debug = debug if self.is_debug: httpHandler = urllib2.HTTPHandler(debuglevel=1) httpsHandler = urllib2.HTTPSHandler(debuglevel=1) opener = urllib2.build_opener(cookieHandler, httpHandler, httpsHandler) else: opener = urllib2.</description>
    </item>
    
    <item>
      <title>python接受命令选项-h</title>
      <link>https://phpgao.github.io/python_cli_options.html</link>
      <pubDate>Mon, 05 Jan 2015 05:44:54 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_cli_options.html</guid>
      <description>python在用命令行的时候能够接受很多参数，到底是如何接受那些参数和选项呢？
import sys, getopt opts, args = getopt.getopt(sys.argv[1:], &amp;#34;hi:o:&amp;#34;) input_file=&amp;#34;&amp;#34; output_file=&amp;#34;&amp;#34; for op, value in opts: if op == &amp;#34;-i&amp;#34;: input_file = value elif op == &amp;#34;-o&amp;#34;: output_file = value elif op == &amp;#34;-h&amp;#34;: usage() sys.exit() </description>
    </item>
    
    <item>
      <title>在Finder当前目录打开终端</title>
      <link>https://phpgao.github.io/open_terminal_in_finder.html</link>
      <pubDate>Sat, 27 Dec 2014 11:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/open_terminal_in_finder.html</guid>
      <description>&lt;p&gt;在终端里打开Finder很简单，使用&lt;code&gt;open .&lt;/code&gt;即可&lt;/p&gt;
&lt;h2 id=&#34;系统设置&#34;&gt;系统设置&lt;/h2&gt;
&lt;p&gt;在Finder打开terminal这个功能其实是有的，但是系统默认没有打开，我们可以通过如下方法将其打开&lt;/p&gt;
&lt;p&gt;进入系统偏好设置-&amp;gt;键盘-&amp;gt;快捷键-&amp;gt;服务。&lt;/p&gt;
&lt;p&gt;在右边&lt;code&gt;新建位于文件夹位置的终端窗口&lt;/code&gt;上打勾。&lt;/p&gt;
&lt;p&gt;如此设置后，在Finder中右击某文件，在出现的菜单中找到服务，然后点击&lt;code&gt;新建位于文件夹位置的终端窗口&lt;/code&gt;即可！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于一些开源许可和名词</title>
      <link>https://phpgao.github.io/opensrouce_license.html</link>
      <pubDate>Fri, 26 Dec 2014 02:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/opensrouce_license.html</guid>
      <description>以下内容转自：http://my.oschina.net/crooner/blog/101456
在翻译你应该选择什么开源软件许可证 Which Open Source Software License Should I Use?
关于一些开源许可和名词
(1)New BSD License(Modified BSD License):
1)可以用于任何作为版权声明和保证许可的免责声明的目的，可以通过无限长的再分发来得以维持。 2)如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。 3)特殊限制条款，不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。
(2)Simplified BSD License(FreeBSD License): 1)与New BSD License(Modified BSD License)一致，但是少了第3条的特殊限制条款。
(3) MIT License MIT是和BSD一样宽松的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二 进制发布的还是以源代码发布的。 1)复制和修改软件。 2)免费使用软件或出售。 3)唯一的限制是，它是必须附有MIT授权协议。
(4)Apache Licence Apache Licence是著名的非盈利开源组织Apache采用的协议。Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布(作为开源或商业软件)。需要满足的条件： 1)需要给代码的用户一份Apache License。 2)如果你修改了代码，需要在被修改的文件中说明。 3)在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。 4)如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache License。你可以在Notice中增加自己的许可，但不可以表现为对Apache License构成更改。
(5)Microsoft Permissive License 详见( http://msdn.microsoft.com/zh-cn/aa721778)说明。
(6)著佐权(copyleft)
Copyleft是一由自由软件运动所发展的概念，是一种利用现有著作权体制来挑战该体制的授权方式，在自由软件许可证方式中增加copyleft条款之后，该自由软件除了允许用户自由使用、散布、改作之外，copyleft条款更要求用户改作后的派生作品必须要以同等的授权方式发布以回馈社区。 有人将其译为“著佐权”1，以彰显Copyleft是补足著作权（Copyright，版权）不足的意义。另有译为“反版权”、“版权属左”、“脱离版权”、“版权所无”、“版权左派”、“公共版权”或“版责”，但这些译名的其中几个在意义上有所偏差。Copyleft授权方式虽然与常见的著作权授权模式不同：选择copyleft授权方式并不代表作者放弃著作权，反而是贯彻始终，强制被授权者使用同样授权发布派生作品，copyleft许可协议不反对著作权的基本体制，却是通过利用著作权法来进一步地促进创作自由。 Copyleft是将一个程序变为自由软件的通用方法，同时也使得这个程序的修改和扩充版本成为自由软件。提出并使用Copyleft观念的是GNU计划，具体的发布条款包含在GNU通用公共许可协议、GNU宽通用公共许可证和GNU自由文档许可协议里。
详见(http://zh.wikipedia.org/wiki/%E8%91%97%E4%BD%90%E6%AC%8A)说明
最后盗一张来自阮一峰博客的图：
((1),(2),(3),(4)源于 http://zoomquiet.org/res/scrapbook/ZqFLOSS/data/20101030104700/的整理)</description>
    </item>
    
    <item>
      <title>Pycharm创建文件模板</title>
      <link>https://phpgao.github.io/pycharm_template.html</link>
      <pubDate>Tue, 23 Dec 2014 09:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pycharm_template.html</guid>
      <description>进入File-&amp;gt;settings-&amp;gt;Editor-&amp;gt;File and Code Templates-&amp;gt;Python Script
添加以下内容：
#!/usr/bin/env python # encoding: utf-8 #set( $SITE = &amp;#34;http://www.phpgao.com&amp;#34; ) &amp;#34;&amp;#34;&amp;#34; @version: ?? @author: phpergao @license: Apache Licence @contact: endoffight@gmail.com @site: ${SITE} @software: ${PRODUCT_NAME} @file: ${NAME}.py @time: ${DATE} ${TIME} &amp;#34;&amp;#34;&amp;#34; def func(): pass class Main(): def __init__(self): pass if __name__ == &amp;#39;__main__&amp;#39;: pass 脚本中还可以添加自定义变量！
参考链接：
http://wiki.woodpecker.org.cn/moin/CodeCommentingRule http://www.cnblogs.com/ziyouchutuwenwu/archive/2013/12/18/3480035.html https://github.com/phpgao/PyCharm-Python-Templates https://www.jetbrains.com/pycharm/webhelp/creating-and-editing-file-templates.html http://peter-hoffmann.com/2010/python-live-templates-for-pycharm.html</description>
    </item>
    
    <item>
      <title>真•BUG检查方法</title>
      <link>https://phpgao.github.io/way_to_find_bugs.html</link>
      <pubDate>Tue, 23 Dec 2014 07:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/way_to_find_bugs.html</guid>
      <description>以下是老高总结的BUG发现点，每一点都可以神展开
欢迎大家补充
 文件路径是否不一致 操作系统的不一致 数据源是否不一致(数据库配置) 单词是否拼错(很常见) 检查hosts文件 网络是否联通(网线插了没?) 防火墙设置问题 硬盘空间是否已满(df -h) 端口设置是否不一致 域名是否解析正确 编码是否错误 关键字是否被屏蔽(发短信如果带&amp;rsquo;测试&amp;rsquo;二字很可能被短信运营商屏蔽) PHP的BOM(幽灵bug，一般与二进制文件有关，比如输出图片) 服务器配置是否不一致 硬件是否出现错误 数据库索引是否出错(有幸遇见过一次,数据存在，where就是查不出，重建索引解决)  以上
附一些有趣的BUG：
http://www.zhihu.com/question/21747929
http://www.zhihu.com/question/21991014
http://www.zhihu.com/question/19955793
http://www.zhihu.com/question/20212145</description>
    </item>
    
    <item>
      <title>安装Selenum的Chromedriver</title>
      <link>https://phpgao.github.io/selenium_chrome.html</link>
      <pubDate>Sun, 21 Dec 2014 05:37:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/selenium_chrome.html</guid>
      <description>首先我们需要下载Chromedriver：
http://chromedriver.storage.googleapis.com/index.html
截图如下：
下载最新版本（目前2.13）
将下载下来的文件移至/usr/bin目录下
完成！
参考链接： http://damien.co/resources/how-to-install-chromedriver-mac-os-x-selenium-python-7406</description>
    </item>
    
    <item>
      <title>git-fetch和pull的区别</title>
      <link>https://phpgao.github.io/git_fetch_pull.html</link>
      <pubDate>Thu, 11 Dec 2014 01:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/git_fetch_pull.html</guid>
      <description>转自 http://blog.csdn.net/hudashi/article/details/7664457
Git中从远程的分支获取最新的版本到本地有这样2个命令：
1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge
git fetch origin master git log -p master..origin/master git merge origin/master 以上命令的含义：
 首先从远程的origin的master主分支下载最新的版本到origin/master分支上 然后比较本地的master分支和origin/master分支的差别 最后进行合并
 上述过程其实可以用以下更清晰的方式来进行：
git fetch origin master : tmp git diff tmp git merge tmp 从远程获取最新的版本到本地的test分支上 之后再进行比较合并
2.git pull：相当于是从远程获取最新版本并merge到本地
git pull origin master 述命令其实相当于git fetch 和 git merge 在实际使用中，git fetch更安全一些 因为在merge前，我们可以查看更新情况，然后再决定是否合并</description>
    </item>
    
    <item>
      <title>linux无界面(headless)使用selenium抓取数据</title>
      <link>https://phpgao.github.io/headless_selenium.html</link>
      <pubDate>Tue, 09 Dec 2014 09:47:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/headless_selenium.html</guid>
      <description>问题 老高最近遇到一个需求，linux\centos下，使用selenium技术抓取数据。本来很简单的问题，但是由于内存限制，安装X window不现实，所以一个BT的想法诞生了，是否可以在centos命令行界面运行一个虚拟的桌面，然后使用selenium控制Firefox浏览器完成一些操作，Firefox运行在虚拟的桌面中，一切操作都在命令行中完成。
Google之，发现了Xvfb，他可以新建一个虚拟的X窗口，再配合python的pyvirtualdisplay，简直就是神器！
安装 centos下：
# 安装Xvfb和pyvirtualdisplay yum install xorg-x11-server-Xvfb pip install pyvirtualdisplay 安装firefox和selenium
yum install firefox pip install selenium 代码 from pyvirtualdisplay import Display from selenium import webdriver display = Display(visible=0, size=(800, 600)) display.start() browser = webdriver.Firefox() browser.get(&amp;#39;http://www.google.com&amp;#39;) print browser.title browser.quit() display.stop() 参考网站：
http://selenium-python.readthedocs.org/en/latest/getting-started.html http://nullege.com/codes/search/selenium.webdriver.Remote.find_elements_by_class_name http://www.opsview.com/forum/opsview-core/how-do-i/how-do-i-install-selenium-centos-server https://gist.github.com/textarcana/5855427 http://scraping.pro/use-headless-firefox-scraping-linux/ http://serverfault.com/questions/363827/how-can-i-run-firefox-on-centos-with-no-display https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/ https://pypi.python.org/pypi/selenium
http://selenium.googlecode.com/git/docs/api/py/selenium/selenium.selenium.html#module-selenium.selenium
http://www.ibm.com/developerworks/cn/opensource/os-php-designptrns/ http://www.cnblogs.com/fnng/p/3230768.html http://www.cnblogs.com/fnng/p/3157639.html http://www.cnblogs.com/fnng/p/3157639.html</description>
    </item>
    
    <item>
      <title>mysql开发常用SQL</title>
      <link>https://phpgao.github.io/mysql_sql.html</link>
      <pubDate>Tue, 09 Dec 2014 02:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mysql_sql.html</guid>
      <description>主键 -- 为当前表添加主键 ALTER TABLE `tablename` ADD COLUMN id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (id); -- 删除主键  ALTER TABLE `tablename` DROP PRIMARY KEY; 创建数据库 # utf8mb4_unicode_ci更准 CREATE DATABASE IF NOT EXISTS typecho DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci; # utf8mb4_general_ci更快 CREATE DATABASE IF NOT EXISTS typecho DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_general_ci; CREATE DATABASE typecho DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci; 创建用户并提供相应权限 # 只是创建用户 CREATE USER phpergao@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;yourpasswd&amp;#39;; # 赋予权限 GRANT select,update on phpergao.</description>
    </item>
    
    <item>
      <title>File-already-exists--filesystem-解决办法</title>
      <link>https://phpgao.github.io/svn_file_already_exists.html</link>
      <pubDate>Wed, 03 Dec 2014 05:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/svn_file_already_exists.html</guid>
      <description>今天用svn命令行提交版本的时候，碰到了这个比较麻烦的问题
svn: File already exists: filesystem &amp;#39;xxx/svn/xxx/db&amp;#39; 搜了一下解决办法，都是需要两次commit，太麻烦。
直接在提交根目录执行以下命令
svn update path/ --accept=mine-full 一句话解决！</description>
    </item>
    
    <item>
      <title>SVN预提交(Pre-Commit)钩子的利用</title>
      <link>https://phpgao.github.io/svn_pre_commit.html</link>
      <pubDate>Tue, 02 Dec 2014 03:33:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/svn_pre_commit.html</guid>
      <description>转自：http://java.dzone.com/articles/useful-subversion-pre-commit
 Checks whether the commit message is not empty Checks whether the commit message consists of at least 5 characters Checks if the committed files are UTF-8 compliant Checks whether the svn:eol-style property is set to LF on newly added files Checks if the committed files have no TAB characters  The UTF-8 and TAB checks are performed on the following file suffixes
 *.java *.js *.xhtml *.css *.xml *.</description>
    </item>
    
    <item>
      <title>python获取操作系统平台、版本及架构</title>
      <link>https://phpgao.github.io/python_system_version_arch.html</link>
      <pubDate>Wed, 19 Nov 2014 02:14:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_system_version_arch.html</guid>
      <description>转自: http://openwares.net/linux/python_os_version_platform.html
platform模块提供了底层系统平台的相关信息
系统架构 32位还是64位
&amp;gt;&amp;gt;&amp;gt; import platform &amp;gt;&amp;gt;&amp;gt; platform.architecture() (&amp;#39;64bit&amp;#39;, &amp;#39;ELF&amp;#39;) # python 3.3.2+ 64 bits on debian jessie 64 bits (&amp;#39;32bit&amp;#39;, &amp;#39;WindowsPE&amp;#39;) # python 3.3.2 32 bits on windows 8.1 64 bits (&amp;#39;64bit&amp;#39;, &amp;#39;WindowsPE&amp;#39;) # python 3.3.2 64 bits on wndows 8.1 64 bits (&amp;#39;64bit&amp;#39;, &amp;#39;&amp;#39;) # python 3.4.1 64 bits on mac os x 10.9.4 ELF和WindowsPE是可执行文件格式 操作系统 linux,mac还是windows
&amp;gt;&amp;gt;&amp;gt; platform.system() &amp;#39;Linux&amp;#39; # python 3.3.2+ 64 bits on debian jessie 64 bits &amp;#39;Windows&amp;#39; # python 3.</description>
    </item>
    
    <item>
      <title>python中浅拷贝和深拷贝</title>
      <link>https://phpgao.github.io/python_copy.html</link>
      <pubDate>Mon, 10 Nov 2014 09:33:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_copy.html</guid>
      <description>python中浅拷贝和深拷贝 今天写python脚本，遇到了一个问题。先贴代码：
#coding=utf-8 new_list = [] # 声明一个list tmp = {&amp;#39;a&amp;#39;:123,&amp;#39;b&amp;#39;:&amp;#39;ccc&amp;#39;} # 新建一个dict new_list.append(tmp) # 追加 print tmp print new_list tmp[&amp;#39;a&amp;#39;] = 456 # 修改tmp tmp[&amp;#39;b&amp;#39;] = &amp;#39;ddd&amp;#39; new_list.append(tmp) # 追加 print tmp print new_list # 执行结果： {&amp;#39;a&amp;#39;: 123, &amp;#39;b&amp;#39;: &amp;#39;ccc&amp;#39;} [{&amp;#39;a&amp;#39;: 123, &amp;#39;b&amp;#39;: &amp;#39;ccc&amp;#39;}] # 当改变了tmp，list中的值也会变化 {&amp;#39;a&amp;#39;: 456, &amp;#39;b&amp;#39;: &amp;#39;ddd&amp;#39;} [{&amp;#39;a&amp;#39;: 456, &amp;#39;b&amp;#39;: &amp;#39;ddd&amp;#39;}, {&amp;#39;a&amp;#39;: 456, &amp;#39;b&amp;#39;: &amp;#39;ddd&amp;#39;}] 如果是PHP会发生什么？
$b = array(); $a = array(&amp;#39;b&amp;#39;=&amp;gt;123); array_push($b , $a); $a = array(&amp;#39;b&amp;#39;=&amp;gt;456); array_push($b , $a); var_dump($b); $a = new ArrayObject(array(&amp;#39;b&amp;#39;=&amp;gt;123)); $arr = new ArrayObject(); $arr-&amp;gt;append($a); $a[&amp;#39;b&amp;#39;] = 456; $arr-&amp;gt;append($a); var_dump($arr); # 执行结果  array(2) { [0]=&amp;gt; array(1) { [&amp;#34;b&amp;#34;]=&amp;gt; int(123) } [1]=&amp;gt; array(1) { [&amp;#34;b&amp;#34;]=&amp;gt; int(456) } } object(ArrayObject)#2 (1) {  [&amp;#34;storage&amp;#34;:&amp;#34;ArrayObject&amp;#34;:private]=&amp;gt; array(2) { [0]=&amp;gt; object(ArrayObject)#1 (1) {  [&amp;#34;storage&amp;#34;:&amp;#34;ArrayObject&amp;#34;:private]=&amp;gt; array(1) { [&amp;#34;b&amp;#34;]=&amp;gt; int(456) } } [1]=&amp;gt; object(ArrayObject)#1 (1) {  [&amp;#34;storage&amp;#34;:&amp;#34;ArrayObject&amp;#34;:private]=&amp;gt; array(1) { [&amp;#34;b&amp;#34;]=&amp;gt; int(456) } } } } 由结果看，PHP中array_push方法和array_object的结果也不同。</description>
    </item>
    
    <item>
      <title>PHPCMS登陆流程</title>
      <link>https://phpgao.github.io/phpcms_login.html</link>
      <pubDate>Wed, 05 Nov 2014 06:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpcms_login.html</guid>
      <description>  调用phpcms/modules/member/index.php中login。
  读取caches/configs/system.php中phpsso的配置。
  调用phpcms/modules/member/classes/client.class.php的_ps_post()发送登录信息。
  该请求被发送到phpsso_server/phpcms/modules/phpsso/index.php的login方法。
  phpsso读取数据库配置phpsso_server/caches/configs/database.php，连接数据库，执行登陆逻辑
  返回登录结果
  </description>
    </item>
    
    <item>
      <title>git使用笔记</title>
      <link>https://phpgao.github.io/note_for_git.html</link>
      <pubDate>Sun, 02 Nov 2014 13:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/note_for_git.html</guid>
      <description>GIT虽然概念比较难理解，但不得不说他是一款开发利器。
老高总结出了一些GIT中很常见的操作命令，分享给大家。但由于GIT命令繁多，所以我将分为基础和进阶两部分。
基础篇： 帮助 git help # 获取帮助，内容如下 usage: git [--version] [--exec-path[=GIT_EXEC_PATH]] [--html-path] [-p|--paginate|--no-pager] [--no-replace-objects] [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE] [--help] COMMAND [ARGS] The most commonly used git commands are: add Add file contents to the index bisect Find by binary search the change that introduced a bug branch List, create, or delete branches checkout Checkout a branch or paths to the working tree clone Clone a repository into a new directory commit Record changes to the repository diff Show changes between commits, commit and working tree, etc fetch Download objects and refs from another repository grep Print lines matching a pattern init Create an empty git repository or reinitialize an existing one log Show commit logs merge Join two or more development histories together mv Move or rename a file, a directory, or a symlink pull Fetch from and merge with another repository or a local branch push Update remote refs along with associated objects rebase Forward-port local commits to the updated upstream head reset Reset current HEAD to the specified state rm Remove files from the working tree and from the index show Show various types of objects status Show the working tree status tag Create, list, delete or verify a tag object signed with GPG 配置git # 查看配置 git config -l/--list # 以下是可能出现的配置 core.</description>
    </item>
    
    <item>
      <title>PHP文档收藏夹</title>
      <link>https://phpgao.github.io/php_manual_fav.html</link>
      <pubDate>Fri, 31 Oct 2014 10:03:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_manual_fav.html</guid>
      <description>&lt;p&gt;主要记录一些值得研究的PHP文档页面&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Android-Studio可能会遇到的问题</title>
      <link>https://phpgao.github.io/android_studio_faq.html</link>
      <pubDate>Sun, 26 Oct 2014 13:23:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/android_studio_faq.html</guid>
      <description>Error:Execution failed for task &amp;lsquo;:app:processDebugManifest&amp;rsquo;. &amp;gt; Manifest merger failed : uses-sdk:minSdkVersion 8 cannot be smaller than version L declared in library com.android.support:support-v4:21.0.0-rc1
 解决方式： 1、Change compile &amp;lsquo;com.android.support:support-v4:+&amp;rsquo; to compile &amp;lsquo;com.android.support:support-v4:20.+&amp;rsquo; in build.gradle. This will prevent gradle from using v4:21.0.0 that requires version L. 2、Remove/Comment 21.0.0-rc1 in your file /extras/android/m2repository/com/android/support-v4/maven-metadata.xml
 Failed to import Gradle project: Could not fetch model of type &amp;lsquo;IdeaProject&amp;rsquo; using Gradle distribution &amp;lsquo;http://services.gradle.org/distributions/gradle-1.6-bin.zip&#39;.
 解决方法：先从网页上将其下载下来，然后将其解压到任何位置，在环境变量path下配置路径（到gradle的bin目录），可通过cmd命令 gradle -v验证是否成功。</description>
    </item>
    
    <item>
      <title>PYCHARM快捷键</title>
      <link>https://phpgao.github.io/pycharm_hotkey.html</link>
      <pubDate>Fri, 24 Oct 2014 14:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pycharm_hotkey.html</guid>
      <description>提示 CTRL Q: 在参数列表位置，显示可以输入的所有参数。 CTRL Q: 查看选中方法的文档字符串
阅读 CTRL -: 折叠当前代码 CTRL +: 展开当前代码 CTRL SHIFT -: 折叠所有代码 CTRL SHIFT +: 展开所有代码 CTRL SHIFT F7: 将当前单词在整个文件中高亮，F3移动到下一个，ESC取消高亮。 CTRL F11 | F11: 设置书签. SHIFT F11: 显示所有书签。 CTRL F12: 当一个文件中方法太多，要快速跳到某个方法时，可以用此快捷键打开LIST, 除了用上下箭选择外，还可以输入字母。
移动 ALT UP: 移到上一个方法 ALT DOWN: 移到下一个方法 CTRL B | CTRL 单击： 转到方法定义处 CTRL SHIFT UP: 将当前行上移一行 CTRL SHIFT UP: 将当前行下移一行
SHIFT ENTER: 在行中间执行时，智能跳到下一行。
注释 CTRL /: 注释、取消注释行
选择 ALT 左键： 列模式选择 CTRL W: 选中当前单词，继续按，选中它所属的行/IF/方法.</description>
    </item>
    
    <item>
      <title>PHPSTORM快捷键</title>
      <link>https://phpgao.github.io/phpstorm_hotkey.html</link>
      <pubDate>Thu, 23 Oct 2014 06:46:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpstorm_hotkey.html</guid>
      <description>点击菜单：File&amp;gt;Settings&amp;gt;(IDE Settings) Keymap 修改工具栏的字体File-&amp;gt;Setting-&amp;gt;Appearance 如何设置代码自动换行 File-&amp;gt;Setting-&amp;gt;editor-&amp;gt;use soft wrap in editor选项 显示行号 File-&amp;gt;Setting-&amp;gt;editor-&amp;gt;Appearance-&amp;gt; show line numbers选项 phpStorm设置大括号和方法名在同一行显示 ; 大括号和方法名在同一行警告 File -&amp;gt; Settings -&amp;gt; code style -&amp;gt; PHP -&amp;gt; Wrapping and Braces -&amp;gt; Braces placement -&amp;gt;End of line. 在settings-&amp;gt;Plugins里，Browse repositories按钮，搜索vim就会找到 IdeaVim插件该插件是控制phpstorm的keymap(也就是快捷键)的 phpstorm Settings-&amp;gt;Editor-&amp;gt;Highlight全部勾选 Editor tabs -&amp;gt; tab limit 16 Settings-&amp;gt;Editor-&amp;gt;colors&amp;amp;fonts -&amp;gt;font 设置字体大小 navigate/bookmark F11, 设置书签直接切换next bookmark
ctrl+j 插入活动代码提示 ctrl+alt+t 当前位置插入环绕代码 alt+insert 生成代码菜单 Shift + Enter 新一行 ctrl+q 查看代码注释 ctrl+d 复制当前行 ctrl+y 删除当前行 ctrl+alt+y 刷新项目缓存Synchronize 或文件夹右键Synchronize shift+F6 重命名 ctrl+shift+u 字母大小写转换 ctrl+f 查找 ctrl+r 替换 ctrl+shift+I 查看变量或方法定义源 ctrl+g 跳转行 ctrl+alt+F12 跳转至当前文件在磁盘上的位置 alt+down 查看下一个方法 alt+up 查看上一个方法 ctrl+alt+l 重新格式化代码 ctrl+shift+down statement向下移动 ctrl+shift+up statement向上移动 alt+shift+down line向下移动 alt+shift+up line向上移动 ctrl+/ 行注释 ctrl+shift+/ 块注释 Ctrl + Shift + Z redo Ctrl + Shift + F 区域查找 ctrl+shift+n 打开工程中的文件 ctrl+b 跳到变量申明处 ctrl+[] 匹配 {}[] ctrl+shift+]/[ 选中块代码 ctrl+x 剪切行 ctrl+shift+v 复制多个文本 alt+left/right 标签切换 ctrl+p 显示默认参数 ctrl + -/+ 可以折叠项目中的任何代码块</description>
    </item>
    
    <item>
      <title>WIN下phpstorm不能检出svn的问题</title>
      <link>https://phpgao.github.io/phpstorm_svn_authorize.html</link>
      <pubDate>Tue, 21 Oct 2014 03:09:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpstorm_svn_authorize.html</guid>
      <description>今天使用win上的phpstrom发现不能检出svn服务器上的文件，折腾了一番才发现原来是svn设置问题。
解决办法：
进入settings
按照下图设置：
这里我们指定了svn的命令行路径，CollabNet\Subversion Client是CollabNet出的svn客户端命令行工具，换成其他的也可以，只要路径指定正确就行。
附下载地址：
支持各种系统的svn
推荐visualsvn</description>
    </item>
    
    <item>
      <title>xdebug编译安装和开启远程调试</title>
      <link>https://phpgao.github.io/phpstorm_using_xdebug.html</link>
      <pubDate>Wed, 15 Oct 2014 13:49:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpstorm_using_xdebug.html</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.phpgao.com/usr/uploads/2015/06/2802292499.png&#34; alt=&#34;xdebug logo&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typecho源代码解析4---业务逻辑</title>
      <link>https://phpgao.github.io/typecho_source_code_business_logic.html</link>
      <pubDate>Tue, 14 Oct 2014 13:54:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_source_code_business_logic.html</guid>
      <description>上一节
这篇我们就讲讲首页的业务逻辑，首先我们看看路由。
[index] =&amp;gt; Array ( [url] =&amp;gt; / [widget] =&amp;gt; Widget_Archive [action] =&amp;gt; render [regx] =&amp;gt; |^[/]?$| [format] =&amp;gt; / [params] =&amp;gt; Array ( ) ) 由路由表中的正则表达式我们能看出首页的URL为https://blog.phpgao.com/或http://www.phpgao.com，并且不接受任何参数。
下面我们找到了Widget_Archive类，让我们先看看这个类的继承关系（其中Typecho_Widget和Widget_Abstract为抽象类）：
由上一节我们可以得到结论，当路由表匹配到/，会实例化Widget_Archive类，他位于var/Widget/Archive.php，其方法为render。
下面我们一步步跟进，看看到底发生了些什么？
再深入之前，我们需要有一些基本的概念，在此需要讲清楚，便于理解typecho的设计模式：
 基类Typecho_Widget  该类位于var/Typecho/Widget.php，是var/Widget文件夹下所有类的基类，也就是说，几乎所有与业务有关的功能，就是继承此类。
纵观此类，方法不是很多，老高在此挑几个重要的讲解：
/** * 获取对象插件句柄 * 此方法为插件的实现提供了快捷的语法 */ public function pluginHandle($handle = NULL) { return Typecho_Plugin::factory(empty($handle) ? get_class($this) : $handle); } /** * 将类本身赋值 * 模板中很常见，将自己复制给某一个变量，在调用next()方法循环输出 */ public function to(&amp;amp;$variable) { return $variable = $this; } /** * 将每一行的值压入堆栈 * 把数据放到自己的&amp;#39;肚子&amp;#39;里 */ public function push(array $value) { //将行数据按顺序置位  $this-&amp;gt;row = $value; $this-&amp;gt;length ++; $this-&amp;gt;stack[] = $value; return $value; } /** * 返回堆栈每一行的值 * 有点像从数据库中循环读取结果集 * 与push相对应，值得大家参考 */ public function next() { if ($this-&amp;gt;stack) { $this-&amp;gt;row = @$this-&amp;gt;stack[key($this-&amp;gt;stack)]; next($this-&amp;gt;stack); $this-&amp;gt;sequence ++; } if (!</description>
    </item>
    
    <item>
      <title>typecho源代码解析2---插件机制</title>
      <link>https://phpgao.github.io/typecho_source_code_plugin.html</link>
      <pubDate>Sun, 12 Oct 2014 01:24:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_source_code_plugin.html</guid>
      <description>上一节
上次我们讲到了系统完成了初始化，这一篇我们会更加深入typecho，同时会介绍typecho的插件机制。
插件点 热心的读者肯定会问，什么是插件点？当然你会不知道，因为这个名词是老高想出来的ಠ౪ಠ，本次要讲的插件机制的基础知识可以参考我的另一片博文thinkphp钩子的实现。钩子这个词比较粗俗，其实高大上的叫法就是插件，而老高自创的插件点就是事件的意思。
index.php中Typecho_Plugin::factory(&#39;index.php&#39;)-&amp;gt;begin()，其实就是通知挂载到&amp;rsquo;index.php&amp;rsquo;这个事件的插件可以执行了。
具体流程如下：
Typecho_Plugin::factory(&amp;lsquo;index.php&amp;rsquo;)返回了Typecho_Plugin的实例，构造函数中确定了唯一的句柄，即&amp;rsquo;index.php&#39;，紧接着执行了该实例的begin()方法，由于该方法不存在，所以调用了魔术方法__call，最后由__call方法执行所有在这个插件点挂载的插件。
__call方法源代码：
public function __call($component, $args) { $component = $this-&amp;gt;_handle . &amp;#39;:&amp;#39; . $component; $last = count($args); $args[$last] = $last &amp;gt; 0 ? $args[0] : false; if (isset(self::$_plugins[&amp;#39;handles&amp;#39;][$component])) { $args[$last] = NULL; $this-&amp;gt;_signal = true; foreach (self::$_plugins[&amp;#39;handles&amp;#39;][$component] as $callback) { $args[$last] = call_user_func_array($callback, $args); } } return $args[$last]; } 关键点：
 __call是可以带参数的 $callback是二位数组，一个类名，一个方法名 在该类init方法中，activated和handles是分开保存的，因为activated以插件名做键名，而handles以插件点为键，目的不同 插件的关联信息保存在数据库中typecho_options表中的plugins 需要禁用再启用才能使修改后的插件生效  当完成了第一个插件点的挂载后，程序开始路由分发。
下一节
码字不易，转载请注明出处。</description>
    </item>
    
    <item>
      <title>typecho源代码解析3---路由分发</title>
      <link>https://phpgao.github.io/typecho_source_code_dispatch.html</link>
      <pubDate>Sun, 12 Oct 2014 01:24:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_source_code_dispatch.html</guid>
      <description>上一节
时光匆匆，我们终于来到路由工作的地方。几乎每个MVC框架都不会缺少路由功能，因为他实在太重要了。
路由的功能简单的说就是根据请求找到对应业务代码，请求来自外部，业务由系统提供，路由器为二者建立了可靠的链接。
typecho和thinkphp都有路由模块，虽然实现方式不同，但用法却惊人的相似！
thinkphp：
Dispatcher::dispatch(); typecho：
Typecho_Router::dispatch(); typecho的路由实现是保存在数据库中的路由表，使用正则匹配路径，这一点和Django框架有点像，thinkphp则是基于自己设定的一套规则，详见官方文档。
typecho的路由表如下数组组成，路由器类会使用子数组中的regx正则式逐个匹配pathinfo中的路径，如果匹配成功，立即初始化并执行该类对应的action。
以index为例，如果使用正则表达式匹配成功，系统就会新建Widget_Archive类并执行其render方法，看他的名字就知道执行的是渲染页面的方法，也就是之前说的业务。
Array([index] =&amp;gt; Array([url] =&amp;gt; /[widget] =&amp;gt; Widget_Archive[action] =&amp;gt; render[regx] =&amp;gt; |^[/]?$|[format] =&amp;gt; /[params] =&amp;gt; Array())[archive] =&amp;gt; Array([url] =&amp;gt; /blog/[widget] =&amp;gt; Widget_Archive[action] =&amp;gt; render[regx] =&amp;gt; |^/blog[/]?$|[format] =&amp;gt; /blog/[params] =&amp;gt; Array())# .... 有的同学可能会说，typecho的路由表写在数据库里，不够灵活。其实作者也考虑到了，大家可以自由扩展路由表。有兴趣的同学可以去看看Helper类中addRoute和removeRoute的用法。举个例子，如果你需要自定义一个URL,比如www.phpgao.com/robots.txt，就可以在路由表加入如下路由：
[robots] =&amp;gt; Array([url] =&amp;gt; /robots.</description>
    </item>
    
    <item>
      <title>mac快速移动窗口至另一个桌面</title>
      <link>https://phpgao.github.io/mac_move_window_to_other_desktop.html</link>
      <pubDate>Sat, 11 Oct 2014 12:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mac_move_window_to_other_desktop.html</guid>
      <description>Mac系统有一大优势，就是在一台电脑上面，可以设定出很多桌面空间使用，这样我们的桌面就不会很凌乱，像MacGG一般都会用到4个桌面空间。在使用桌面空间的时候，大家可能都会用到一个功能，就是我要移动一个窗口到另一个桌面空间，都会把窗口拖到屏幕右边停留几秒，就回自动的切换到下一个桌面空间。今天MacGG给大家介绍一个方法，可以秒切哈。
什么是秒切，就是你拖动窗口到屏幕边缘，无需停留，就自动切到下一桌面空间。
首先打开“终端”（Finder-&amp;gt;应用程序-&amp;gt;实用工具-&amp;gt;终端），并且输入以下命令：
 defaults write com.apple.dock workspaces-edge-delay -float 0;killall Dock 现在大家试一下秒切吧。哈哈。。很爽不。是不是太快了，如果觉得太快，我们还可以在改改设定，我就设定在屏幕边缘停留半秒切换吧。 再次打开“终端”（Finder-&amp;gt;应用程序-&amp;gt;实用工具-&amp;gt;终端），并且输入以下命令：
defaults write com.apple.dock workspaces-edge-delay -float 0.15;killall Dock 如果你想还原成原样，也很简单，再次打开“终端”（Finder-&amp;gt;应用程序-&amp;gt;实用工具-&amp;gt;终端），并且输入以下命令：
defaults delete com.apple.dock workspaces-edge-delay;killall Dock 转自：http://www.macgg.com/archives/6429.html</description>
    </item>
    
    <item>
      <title>typecho源代码解析1---系统初始化</title>
      <link>https://phpgao.github.io/typecho_source_code_init.html</link>
      <pubDate>Sat, 11 Oct 2014 12:20:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_source_code_init.html</guid>
      <description>首先恭喜typecho v1.0的上线！
其次，这篇文章同thinkphp的源代码解析一样都是老高谋划了很久的文章，国庆节由于单位加班没有时间写，今天终于等来了轮休，果断放开了写。希望大家多多支持！
最后老高想说的是，如果大家有兴趣研究源码，那么问题来了，如何高效的学习研究源代码？
老高的建议是：
 一定要熟悉MVC模式(针对WEB开发) 先看看文档再动手 分辨什么是好的坏的代码，不要搞盲目崇拜 做笔记  以下：
文档 如果有什么不明白的，文档里也许会找到答案。
typecho开发文档
版本 再研究源代码前，如果知道自己使用的typecho的版本呢？
答案写在var/Typecho/Common.php里，Typecho_Common类中的常量VERSION。
例子：
class Typecho_Common{/** 程序版本 */const VERSION = &#39;1.0/14.10.9&#39;;...} 开启DEBUG模式 有些同学可能已经发现，typecho默认对外隐藏了PHP的错误信息，如果我们想要看到真正的报错信息，需要开启typecho的DEBUG模式，也可以叫做开发模式。当我们开启了这个模式后，在开发插件或者了解系统原理的时候就能够得到可视化的错误信息了。
开启方法：
# 修改/config.inc.php # 在代码的第一行加入 /**开启debug模式*/ define(&amp;#39;__TYPECHO_DEBUG__&amp;#39;,1); ps.调试的时候如果你的服务器没有安装xdebug，那么你的var_dump()信息会没有格式。
在此老高推荐使用TP框架内的方法dump()，以后我们就可以使用dump()打印变量信息了。
# 修改/config.inc.php # 在debug后加入  /** * 浏览器友好的变量输出 * @param mixed $var 变量 * @param boolean $echo 是否输出 默认为True 如果为false 则返回输出字符串 * @param string $label 标签 默认为空 * @param boolean $strict 是否严谨 默认为true * @return void|string */ function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ?</description>
    </item>
    
    <item>
      <title>PHP的框架常用函数</title>
      <link>https://phpgao.github.io/php_framework_frequently_used.html</link>
      <pubDate>Sat, 11 Oct 2014 07:58:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_framework_frequently_used.html</guid>
      <description>spl_autoload_register、set_exception_handler和set_error_handler、get_include_path等。
spl_autoload_register 与__autoload函数一样，但是更灵活。他的功能是当程序找不到当前正在使用的类时，在报错前，会调用此函数，如果找到了，就继续工作。
set_exception_handler 接管了原本的异常处理，可以隐藏或者美化输出，可以用throw new Exception触发。
set_error_handler 同上，接管了错误处理。可以用trigger_error触发。</description>
    </item>
    
    <item>
      <title>我们为什么使用框架</title>
      <link>https://phpgao.github.io/framework_faq.html</link>
      <pubDate>Fri, 10 Oct 2014 13:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/framework_faq.html</guid>
      <description>&lt;p&gt;这篇文章于昨日早在215路早读时看到，写的很不错！可以作为学习框架或者写自己的框架之前的读物。&lt;/p&gt;
&lt;p&gt;ps.文章中提到了一个名词——&lt;strong&gt;控制反转&lt;/strong&gt;。这个词可能经常会考倒刚入门程序员。控制反转其实其实是一种外包的思想，将总做交给各个领域的&amp;rsquo;专家&amp;rsquo;去做，而你只负责如何调度他们的工作。明确的分工会给系统带来很多维护上的便利。这个概念常常和&lt;strong&gt;依赖注入&lt;/strong&gt;同时出现，而什么是依赖注入呢？其实他是控制反转的一个实现方式。&lt;/p&gt;
&lt;p&gt;如果你对框架这个概念还不是很理解，那么还可以参考一下老高的系列文章&lt;a href=&#34;https://blog.phpgao.com/thinkphp_init.html&#34;&gt;THINKPHP框架解析&lt;/a&gt;，老高带你深入框架内部，去看看框架到底做了什么，和为什么这么做。希望这篇转帖和老高的文章能够帮助你深入理解框架的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git在公司内部的使用实践</title>
      <link>https://phpgao.github.io/using_git.html</link>
      <pubDate>Wed, 08 Oct 2014 09:52:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/using_git.html</guid>
      <description>&lt;p&gt;搜索git使用方法是发现这篇文章，几经搜索终于找到原作者的博客，找到了原文，现在分享给大家，希望能够普及git的使用。&lt;/p&gt;
&lt;p&gt;以下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Call-to-undefined-function-imagettftext()解决方法</title>
      <link>https://phpgao.github.io/undefined_imagettftext.html</link>
      <pubDate>Fri, 03 Oct 2014 06:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/undefined_imagettftext.html</guid>
      <description>老高在一个新环境中装DEDECMS的时候发现后台验证码无法显示。直接搜索一下这个错误，有人说session错误，有的说权限错误等等，这不胡扯么！只能看源代码了，定位到文件/include/vdimgck.php。出错的函数是imagettftext()，由于织梦使用了@将错误隐去，导致这次莫名的错误。将@去掉，错误立马出现：
 Fatal error: Call to undefined function imagettftext()
 现在我们就明确了，出现错误的原因是PHP编译时没有加上FreeType。
解决办法：
首先编译安装FreeType，以2.4.0为例：
wget http://download.savannah.gnu.org/releases/freetype/freetype-2.4.0.tar.bz2tar -jxf freetype-2.4.0.tar.bz2cd reetype-2.4.0# 安装到/usr/local/freetype./configure --prefix=/usr/local/freetypemake &amp;amp;&amp;amp; make install 下面我们重新编译PHP，加上参数--with-freetype-dir=/usr/local/freetype
./configure \... \... \--with-freetype-dir=/usr/local/freetype 编译完成重启php
kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid` 再GD库中找到FreeType Support说明安装成功！
需要注意的是，如果服务器freetype的版本是1.*，那么你可能需要改变编译参数为--with-ttf[=DIR]，以下转自ChinaUnix论坛：
 字库 配置开关 FreeType 1.x 要激活 FreeType 1.x 的支持，加上 &amp;ndash;with-ttf[=DIR]。
FreeType 2 要激活 FreeType 2 的支持，加上 &amp;ndash;with-freetype-dir=DIR。
T1lib 要激活 T1lib（Type 1 字体），加上 &amp;ndash;with-t1lib[=DIR]。</description>
    </item>
    
    <item>
      <title>thinkphp钩子的实现</title>
      <link>https://phpgao.github.io/thinkphp_hook.html</link>
      <pubDate>Mon, 29 Sep 2014 02:22:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/thinkphp_hook.html</guid>
      <description>&lt;p&gt;钩子概念对初学者来说可能比较抽象难懂，但是只要掌握了他的工作方式，那么自己动手写一个钩子机制也不难。&lt;/p&gt;
&lt;p&gt;Hook这个词很有意思，以下引用自某网络词典：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hook用作名词时意思是“钩”,转化为动词时可表示把某物弯成钩形,也可表示用弯曲的东西把某物体钩住,引申可表示为“吊”“挂”等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个程序猿，老高对钩子的解释是，他就是一个触发机制，把你的软件功能想象成一个陷阱，放到##系统流程##可能经过的路上，如果陷阱被系统踩到，就会执行你的程序，当你挂载的钩子执行完后，系统会根据你的程序的结果继续运行。&lt;/p&gt;
&lt;p&gt;老高最早接触Hook的编程思想是源于windows，当时打dota很入迷，突然想研究一下改键的原理，于是发现了系统钩子这一说法。&lt;/p&gt;
&lt;p&gt;改键的原理，简单地说来就是拦截系统按下键盘时的默认动作，如果需要把小键盘的7映射到Q上，就在拦截时做一个判断，如果的键码是小键盘7，就改为Q的键码，最后发送给系统修改后的键码，即完成了改键操作。&lt;/p&gt;
&lt;p&gt;钩子机制的使用在很多系统上都有体现，如windows、wordpress、thinkphp等，由钩子实现的功能在wordpress中叫做插件，在TP中叫做行为。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>thinkphp框架解析1----只是一个开始</title>
      <link>https://phpgao.github.io/thinkphp_beginning.html</link>
      <pubDate>Mon, 29 Sep 2014 01:07:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/thinkphp_beginning.html</guid>
      <description>&lt;p&gt;接上一篇&lt;a href=&#34;https://blog.phpgao.com/thinkphp_init.html&#34;&gt;起源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ThinkPHP/Library/Think/&lt;/code&gt;下找到App.class.php，他就是应用程序类，他会见证整个应用从创建到消亡的整个过程。&lt;/p&gt;
&lt;p&gt;上次我们分析到系统执行&lt;code&gt;App::run()&lt;/code&gt;，下面开始分析此方法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>thinkphp框架解析0----起源</title>
      <link>https://phpgao.github.io/thinkphp_init.html</link>
      <pubDate>Thu, 25 Sep 2014 14:13:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/thinkphp_init.html</guid>
      <description>&lt;p&gt;THINKPHP是国人开发的PHP框架，如今终于深入内部打探了一番，下面给大家分享老高的心得。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP一些不为人知的使用方法</title>
      <link>https://phpgao.github.io/php_barely_used.html</link>
      <pubDate>Wed, 24 Sep 2014 08:13:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_barely_used.html</guid>
      <description>&lt;p&gt;今天为大家介绍一些比较抽象，但十分有用的关于PHP的用法。老高在通读了THINKPHP源代码后才发现了这一篇天地。合理的使用这些方法或者常量能帮助你更快速的开发或者DEBUG。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP导出项目的数据字典</title>
      <link>https://phpgao.github.io/data_dictionary_exported_by_php.html</link>
      <pubDate>Tue, 23 Sep 2014 03:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/data_dictionary_exported_by_php.html</guid>
      <description>突然想到这个方法，果然已经有人实现了。
有这个脚本也能看出来，数据表的很多信息都保存在INFORMATION_SCHEMA.TABLES表里，还有数据表注释的重要性！
&amp;lt;?php/*** 生成mysql数据字典* @author niming&amp;lt;287384795@qq.com&amp;gt;*///配置数据库$dbserver = &amp;quot;localhost&amp;quot;;$dbusername = &amp;quot;root&amp;quot;;$dbpassword = &amp;quot;root&amp;quot;;$database = &#39;mydb&#39;;//其他配置$title = &#39;系统数据字典&#39;;$mysql_conn = @mysql_connect(&amp;quot;$dbserver&amp;quot;, &amp;quot;$dbusername&amp;quot;, &amp;quot;$dbpassword&amp;quot;) or die(&amp;quot;Mysql connect is error.&amp;quot;);mysql_select_db($database, $mysql_conn);mysql_query(&#39;SET NAMES utf8&#39;, $mysql_conn);$table_result = mysql_query(&#39;show tables&#39;, $mysql_conn);//取得所有的表名while ($row = mysql_fetch_array($table_result)) {$tables[][&#39;TABLE_NAME&#39;] = $row[0];}//循环取得所有表的备注foreach ($tables AS $k=&amp;gt;$v) {$sql = &#39;SELECT * FROM &#39;;$sql .</description>
    </item>
    
    <item>
      <title>在Linux上使用sysstat的iostat监控系统IO</title>
      <link>https://phpgao.github.io/sysstat.html</link>
      <pubDate>Thu, 18 Sep 2014 07:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sysstat.html</guid>
      <description>在Linux上使用sysstat 搜索iostat命令后才发现如此强大的系统监控工具！
安装 centos
yum install sysstat -y Ubuntu
apt-get install sysstat 使用  iostat 工具提供CPU使用率及硬盘吞吐效率的数据； mpstat 工具提供单个处理器或多个处理器相关数据； sar 工具负责收集、报告并存储系统活跃的信息； sa1 工具负责收集并存储每天系统动态信息到一个二进制的文件中。它是通过计划任务工具cron来运行，是为sadc所设计的程序前端程序； sa2 工具负责把每天的系统活跃性息写入总结性的报告中。它是为sar所设计的前端 ，要通过cron来调用 sadc 是系统动态数据收集工具，收集的数据被写一个二进制的文件中，它被用作sar工具的后端； sadf 显示被sar通过多种格式收集的数据；  iostat ➜ /bin iostat &amp;ndash;help 用法: iostat [ 选项 ] [ &amp;lt;时间间隔&amp;gt; [ &amp;lt;次数&amp;gt; ] ] Options are: [ -c ] [ -d ] [ -N ] [ -n ] [ -h ] [ -k | -m ] [ -t ] [ -V ] [ -x ] [ -y ] [ -z ] [ -j { ID | LABEL | PATH | UUID | &amp;hellip; } [ [&amp;hellip;] | ALL ] ] [ [&amp;hellip;] | ALL ] [ -p [ [,&amp;hellip;] | ALL ] ]</description>
    </item>
    
    <item>
      <title>nginx配置详解</title>
      <link>https://phpgao.github.io/nginx_conf.html</link>
      <pubDate>Wed, 17 Sep 2014 03:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/nginx_conf.html</guid>
      <description>#nginx配置详解
用了nginx这么久，很多配置还是记不牢，还是总结一下吧！
基本命令：
service nginx reload service nginx start service nginx stop #检测配置文件是否通过，需要比较高的权限，否则可能会报 Permission denied /usr/sbin/nginx -t #平滑重启 nginx -s reload 当编译安装好nginx后，其配置文件nginx.conf可以在/etc/nginx/下找到！
此文件就是主配置文件了。
##高层的配置
#运行用户 user www; #启动进程,一般等于cpu的总核数 worker_processes auto; #更改worker进程的最大打开文件数限制 worker_rlimit_nofile 100000; #全局错误日志及PID文件 error_log /var/log/nginx/error.log; pid /var/run/nginx.pid; #工作模式及连接数上限 events { #每个工作进程允许最大的同时连接数  worker_connections 65535; #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能  #如果你使用*BSD，你应该使用kqueue  use epoll; #单个后台worker process进程的最大并发链接数  worker_connections 1024; #设置是否允许，Nginx在已经得到一个新连接的通知时，接收尽可能更多的连接  # multi_accept on; } HTTP 模块 HTTP模块控制着nginx http处理的所有核心特性。
#设定http服务器，利用它的反向代理功能提供负载均衡支持 http { #并不会让nginx执行的速度更快，但它可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的  server_tokens off; #设定mime类型,类型由mime.</description>
    </item>
    
    <item>
      <title>修复typecho删除分类后统计文章数的错误</title>
      <link>https://phpgao.github.io/typecho_delete_category_mistake.html</link>
      <pubDate>Thu, 11 Sep 2014 15:28:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/typecho_delete_category_mistake.html</guid>
      <description>博客的文章渐渐多了起来，之前随意的分类就需要好好想整理一下。
为了图方便，直接在数据库里做了替换查询，不料typecho和WP一样，都会在metas表里存着分类和tag的统计信息，统计了这个分类下有多少篇文章，这个统计信息显示在分类和TAG管理页面。
也就是说，如果正常再文章编辑里修改分类并保存，统计信息会走一加一减这个过程，而暴力数据库修改不会触发。
而这种混乱导致老高的瞬间变身不搞不舒服斯基，下面我们一步一步来修复这个统计信息。
首先，找到所有分类（标签同理）
SELECT mid FROM typecho_metas AS m WHERE m.type = &#39;category&#39;; 然后，找到分类关系表，统计文章数
SELECT r.mid,count(cid)FROM typecho_relationships as rWHERE r.mid IN(SELECT midFROM typecho_metas AS mWHERE m.type=&#39;category&#39;)GROUP BY r.mid; 再次，我们提取出分类名称
SELECT r.mid,m.name,count(cid)FROM typecho_relationships as rLEFT JOIN typecho_metas as m ON m.mid=r.midWHERE r.mid IN(SELECT midFROM typecho_metas AS mWHERE m.type=&#39;category&#39;)GROUP BY r.mid; 最后，以上一个查询为基础修改原始表metas</description>
    </item>
    
    <item>
      <title>也谈代码风格</title>
      <link>https://phpgao.github.io/coding_rules.html</link>
      <pubDate>Wed, 10 Sep 2014 03:05:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/coding_rules.html</guid>
      <description>先讲个笑话
 我们程序员分两种，一种是:
if( #condition ){//codes} 另一种是：
if( #condition ){//codes} 你是哪一种呢?
 这个笑话比较冷，但是也说明了一个问题 —— 代码风格难以统一。
一个好的代码风格会使程序更容易阅读，提高团队合作的效率不说，自己看着也会赏心悦目，好像自己淫的一手好湿。
而混乱的代码轻则增加团队沟通成本，重则影响团队和谐。所以我认为不论是作为一个团队还是所谓一名开发者，必须坚持自己的程序编写风格。老高偶尔也会因为考虑到一致性而使用我不喜欢的代码风格，事实上这个行为是很不可取的。
所以今后老高今后要改正这个不良习惯，保持自己的代码风格，之前写的都不算 XD 。
我的风格 下面老高精(HU)心(LUAN)整理了一些PHP编码的习惯，不知道有没有和我一样的TX？
编码 编码推荐UTF-8，所以在处理文字长度的时候请使用mb_*系列函数。
换行 由于UNIX/Linux、Mac与Windows在换行格式上的差别，请搞清楚运行环境， 再搞清楚CR(carriage return, 符号’r’表示, 十进制ASCII代码是13, 十六进制代码为0x0D), LF(line feed,使用’n’符号表示, ASCII代码是10, 十六制为0x0A), CR/LF的概念，然后在编辑器中把换行格式改为对应的格式即可。
   系统 换行编码 正则     UNIX/Linux 换行 \r   Mac 回车 \n   Windows 回车+换行 \r\n    换行回车的历史，来自豆瓣</description>
    </item>
    
    <item>
      <title>PHP时间函数总结</title>
      <link>https://phpgao.github.io/php_time.html</link>
      <pubDate>Mon, 08 Sep 2014 16:13:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_time.html</guid>
      <description>&lt;p&gt;PHP关于时间的函数可以参考&lt;a href=&#34;http://cn2.php.net/manual/zh/ref.datetime.php&#34;&gt;这里&lt;/a&gt;，可以看到PHP已经提供了很多函数以供我们使用，熟练掌握这些函数可以让你摆脱冗长复杂的计算，希望本文能够让你事半功倍！&lt;/p&gt;
&lt;p&gt;ps.关于时间戳与日期的转换工具，博主推荐这个&lt;a href=&#34;http://shijianchuo.911cha.com&#34;&gt;时间戳转换工具&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP编译错误的解决办法</title>
      <link>https://phpgao.github.io/php_configuration_error.html</link>
      <pubDate>Sun, 07 Sep 2014 12:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_configuration_error.html</guid>
      <description>This article is post on https://coderwall.com/p/ggmpfa
 configure: error: xslt-config not found. Please reinstall the libxslt &amp;gt;= 1.1.0 distribution
 yum -y install libxslt-devel  configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation.
 yum -y install net-snmp-devel  configure: error: Please reinstall readline - I cannot find readline.h
 yum -y install readline-devel  configure: error: Cannot find pspell
 yum -y install aspell-devel  checking for unixODBC support&amp;hellip; configure: error: ODBC header file &amp;lsquo;/usr/include/sqlext.</description>
    </item>
    
    <item>
      <title>把python脚本编译成exe</title>
      <link>https://phpgao.github.io/py2exe.html</link>
      <pubDate>Mon, 18 Aug 2014 04:45:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/py2exe.html</guid>
      <description>&lt;p&gt;目前有三种方法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos下安装python-MySQLdb</title>
      <link>https://phpgao.github.io/python_mysqldb.html</link>
      <pubDate>Fri, 15 Aug 2014 04:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_mysqldb.html</guid>
      <description>源码安装： 点击这里下载源码
解压前线装一下必要的包
yum install python-devel mysql-devel zlib-devel openssl-devel 解压
tar xf MySQL-python-1.2.3.tar.gz cd MySQL-python-1.2.3 修改mysite.cfg，指定mysql-config的路径
使用whereis mysql-config找路径
vi mysite.cfg #找到mysql_config = XXX 改为你的路径 继续安装
python setup.py build python setup.py install 工具安装： sudo easy_install mysql-pythonsudo pip install mysql-python 出现错误的解决办法 --- ```bash vi ~/.bash_profile # add export DYLD_LIBRARY_PATH=&amp;#39;/usr/local/mysql/lib&amp;#39;; PATH=&amp;#34;$PATH:/usr/local/mysql/bin&amp;#34; enjoy~
Win下请直接下载编译好的安装包：
请输入链接描述</description>
    </item>
    
    <item>
      <title>php不使用中间变量交换两个变量的值</title>
      <link>https://phpgao.github.io/php_substitution_of_variables.html</link>
      <pubDate>Wed, 13 Aug 2014 08:35:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_substitution_of_variables.html</guid>
      <description>方法一：
$a = $a^$b;$b = $b^$a;$a = $a^$b; 这就是位运算带给我们的奇妙之处！（这种方法只适合于int型和string型，而且位数不能超过8位）
方法二：
list($var1, $var2) = array($var2, $var1); </description>
    </item>
    
    <item>
      <title>软件版本总结</title>
      <link>https://phpgao.github.io/software_verson.html</link>
      <pubDate>Thu, 31 Jul 2014 08:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/software_verson.html</guid>
      <description>&lt;h1 id=&#34;软件版本总结&#34;&gt;软件版本总结&lt;/h1&gt;
&lt;h2 id=&#34;版本号&#34;&gt;版本号&lt;/h2&gt;
&lt;p&gt;V（Version）：即版本，通常用数字表示版本号。(如:EVEREST Ultimate v4.20.1188 Beta )
Build：用数字或日期标示版本号的一种方式。(如:VeryCD eMule v0.48a Build 071112)
SP：Service Pack，升级包。(如:Windows XP SP 2/Vista SP 1)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装Scarpy踩过的坑</title>
      <link>https://phpgao.github.io/scarpy_error.html</link>
      <pubDate>Thu, 31 Jul 2014 04:50:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/scarpy_error.html</guid>
      <description>#安装Scarpy踩过的坑
Scrapy是python下一个著名的爬虫，目前最新版为0.24。
这是他的帮助文档-&amp;gt;Scrapy 0.24 文档
其中**选择器篇**需要好好研究！
帮助文档里的安装指南写得很宽泛，所以安装出错是在正常不过的事了。(再者说，安装出错确实不是Scrapy的错嘛)
So here is the doc to help you with installing Scrapy.
First of all, before installing, please make sure U have already installed these libs or apps below:
 python version &amp;gt;= 2.7 python-devel package libs:  xml2-dev xslt-dev ffi-dev openssl-dev    If not, commands below may help:
on Redhat/Centos:
yum install python-devel libxml2-devel libxslt-devel libffi-devel openssl-devel bzip2-devel  on Debian/Ubuntu:</description>
    </item>
    
    <item>
      <title>升级python2.7和安装pip,easy_install和setuptool</title>
      <link>https://phpgao.github.io/pip-easy_install-setuptool.html</link>
      <pubDate>Wed, 30 Jul 2014 08:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pip-easy_install-setuptool.html</guid>
      <description>&lt;h1 id=&#34;升级python和安装pipeasy_install和setuptool&#34;&gt;升级python和安装pip,easy_install和setuptool&lt;/h1&gt;
&lt;p&gt;新机子装环境什么的最麻烦了，在此记录一下python的升级和包(模块)管理软件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python交互模式下方向键乱码的正确解决方法</title>
      <link>https://phpgao.github.io/python_arrow_key_messup.html</link>
      <pubDate>Tue, 29 Jul 2014 03:10:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_arrow_key_messup.html</guid>
      <description>&lt;h1 id=&#34;python交互模式下方向键乱码的正确解决方法&#34;&gt;python交互模式下方向键乱码的正确解决方法&lt;/h1&gt;
&lt;p&gt;今天升级了python后，发现在交互模式中上下左右变成了乱码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^[[A ^[[D ^[[B ^[[C ^[[D ^[[D ^[[D ^[[D ^[[D ^[[D ^[[D ^[[D 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;搜索了一下，普遍的解决方法是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为方向键被转义了
原因主要是由于缺少readline Module问题导致的。而CentOS默认只有readline模块而没有readline-devel模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法
yum -y install readline-devl
然后重新编译安装python就ok了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再仔细一看，这些问题都是N年前了，yum中的包名早都换了。。。怪不得总是报错，说找不到&lt;code&gt;readline-devl&lt;/code&gt;，貌似现在开发版后面都变成&lt;code&gt;devel&lt;/code&gt;了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bad-interpreter-没有那个文件或目录</title>
      <link>https://phpgao.github.io/bad_interpreter.html</link>
      <pubDate>Tue, 29 Jul 2014 01:56:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/bad_interpreter.html</guid>
      <description>bad interpreter: 没有那个文件或目录
起因 今天在linux上运行一个python脚本，总是报错bad interpreter，开始我以为是解释器的路径问题，可是whereis python告诉我路径没有错！
google之，问题解决：
在windows上编辑的脚本，到linux上执行，会提示上面的错误
解决办法 dos2unix myfilename
报错的话执行一下yum install dos2unix -y
原因 在windows下编辑的脚本，是dos格式的，即每一行的行尾以\r\n来标识, 其ASCII码分别是0x0D, 0x0A。
以后再windows上的写脚本一定要三思！</description>
    </item>
    
    <item>
      <title>#!-usr-bin-env与#!-usr-bin-python的区别</title>
      <link>https://phpgao.github.io/usr_bin_python.html</link>
      <pubDate>Tue, 29 Jul 2014 01:54:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/usr_bin_python.html</guid>
      <description>今天写了个采集脚本，使用了BeautifulSoup，所以在代码中有下面的import语句
from BeautifulSoup import BeautifulSoup as BS 在win下执行，没问题，但是在linux下执行，就报这个错误
 ImportError: No module named BeautifulSoup
 google之
转自快乐&amp;amp;&amp;amp;平凡
脚本语言的第一行，目的就是指出，你想要你的这个文件中的代码用什么可执行程序去运行它，就这么简单
#!/usr/bin/python是告诉操作系统执行这个脚本的时候，调用/usr/bin下的python解释器;#!/usr/bin/env python这种用法是为了防止操作系统用户没有将python装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。#!/usr/bin/python相当于写死了python路径;#!/usr/bin/env python会去环境设置寻找python目录,推荐这种写法。 而我的/usr/bin/python是2.6版本，但是安装BeautifulSoup的是2.7。。。
#mv /usr/bin/python /usr/bin/python2.6.6#ln -s /usr/local/bin/python2.7 /usr/bin/python 成功解决!</description>
    </item>
    
    <item>
      <title>记一次bypy的使用</title>
      <link>https://phpgao.github.io/bypy.html</link>
      <pubDate>Mon, 28 Jul 2014 07:21:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/bypy.html</guid>
      <description>&lt;p&gt;无意间发现了&lt;a href=&#34;https://github.com/houtianze/bypy&#34;&gt;bypy&lt;/a&gt;一个python写得&lt;strong&gt;百度网盘&lt;/strong&gt;的linux客户端&lt;/p&gt;
&lt;p&gt;工具实在难得，记录一下，说不定以后能用上！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在python的urllib2中使用socks代理</title>
      <link>https://phpgao.github.io/python_socks_proxy.html</link>
      <pubDate>Sun, 27 Jul 2014 10:08:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_socks_proxy.html</guid>
      <description>转自潘魏增的博客！
python2.5中的urllib2支持http代理，不支持socks代理。假如代码库或者编码时使用了urllib2，同时又要使用socks，就需要第三方的库来实现。幸运的是，已经有人造好了轮子。
SocksiPy是一个socks module。它提供了一个类socket的接口，支持socks4、socks5和http proxy。下载后在代码中引用socks.py即可，也可以写个setup.py文件安装到python的site-packages目录中。 使用时，将下面的代码放在调用urllib2的代码之前即可：
import socksimport socketsocks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, &amp;quot;127.0.0.1&amp;quot;, 8080)socket.socket = socks.socksocketimport urllib2print urllib2.urlopen(&#39;http://baidu.com&#39;).read() 如果是自己写的程序，也可以尝试使用pycurl这个库。ubuntu使用sudo apt-get install python-pycurl python-pycurl-dbg安装。 示例代码
import pycurlc = pycurl.Curl()c.setopt(pycurl.URL, &#39;http://baidu.com&#39;)c.setopt(pycurl.PROXY, &#39;127.0.0.1&#39;)c.setopt(pycurl.PROXYPORT, 8080)c.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)c.perform() 如果在程序外部使用socks，推荐使用tsocks。ubuntu中直接使用sudo apt-get install tsocks安装。安装完毕以后需要修改/etc/tsocks.conf。配置样例如下
# 默认代理服务器server = 127.0.0.1 # 代理服务器类型 server_type = 5 # 代理服务器端口server_port = 8080 使用时，在命令行输入tsocks 程序名即可。例如ubuntu下的epiphany浏览器没有代理设置，如果想使用socks代理，输入tsocks epiphany-browser即可（注意先关闭其他的epiphany实例）。</description>
    </item>
    
    <item>
      <title>在github写博客</title>
      <link>https://phpgao.github.io/github_blog.html</link>
      <pubDate>Sat, 26 Jul 2014 04:19:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/github_blog.html</guid>
      <description>&lt;p&gt;没想到jekyll这么火啊！&lt;/p&gt;
&lt;p&gt;今天闲来无事，也想试试把博客搬到github玩玩。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP正则表达式的模式修正符</title>
      <link>https://phpgao.github.io/pattern_modifiers.html</link>
      <pubDate>Fri, 25 Jul 2014 09:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/pattern_modifiers.html</guid>
      <description>PHP在处理正则表达式的时候，在最后面可以加上诸如/i, /is, /s, /isU的选项，他们都代表什么含义呢？
其实他们是PHP正则表达式的模式修正符，用于对正则表达式的补充。
[TOC]
优先级概念 正则符号的优先级：
()圆括号因为是内存处理所以第1 * ? + { } 重复匹配内容第2 ^ $ \b 边界处理第3 | 条件处理第4 最后按照运算顺序计算匹配
常用的修正符 i (PCRE_CASELESS)正则内容在匹配时候不区分大小写（默认是区分的）。
如preg_match(&#39;/\[TOC\]/i&#39;,$str) 这句话中的小写字母i，他跟在正则表达式后面，起的作用是匹配时忽略大小写 所以，上述正则表达式可以匹配诸如 [toc]、[ToC]、或者[TOC]。
m (PCRE_MULTILINE) 在匹配首内容或者尾内容时候采用多行识别匹配。默认情况下，PCRE 将目标字符串作为单一的一“行”字符所组成的（甚至其中包含有换行符也是如此）。“行起始”元字符（^）仅仅匹配字符串的起始，“行结束”元字符（$）仅仅匹配字符串的结束，或者最后一个字符是换行符时其前面（除非设定了 D 修正符）。这和 Perl 是一样的。 当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。这和 Perl 的 /m 修正符是等效的。如果目标字符串中没有“/n”字符或者模式中没有 ^ 或 $，则设定此修正符没有任何效果。
S (PCRE_DOTALL) 如果没有使用这个模式修正符号，元字符中的&amp;quot;.&amp;ldquo;默认不能表示换行符号,将字符串视为单行。如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。这和 Perl 的 /s 修正符是等效的。排除字符类例如 [^a] 总是匹配换行符的，无论是否设定了此修正符。
x (PCRE_EXTENDED) 忽略正则中的空白。如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的 # 以及下一个换行符之间的所有字符，包括两头，也都被忽略。
A (PCRE_ANCHORED) 强制从头开始匹配。如果设定了此修正符，模式被强制为“anchored”，即强制仅从目标字符串的开头开始匹配即自动在模式开头加上^。此效果也可以通过适当的模式本身来实现（在 Perl 中实现的唯一方法）。
D (PCRE_DOLLAR_ENDONLY) 强制$匹配尾部无任何内容。如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前（但不会匹配任何其它换行符之前）。如果设定了 m 修正符则忽略此选项。Perl 中没有与其等价的修正符。 S 当一个模式将被使用若干次时，为加速匹配起见值得先对其进行分析。如果设定了此修正符则会进行额外的分析。目前，分析一个模式仅对没有单一固定起始字符的 non-anchored 模式有用。</description>
    </item>
    
    <item>
      <title>php将image转换为base64编码</title>
      <link>https://phpgao.github.io/base64_pic.html</link>
      <pubDate>Fri, 25 Jul 2014 03:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/base64_pic.html</guid>
      <description>&lt;p&gt;引用PHP手册里的一评论&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This will greatly reduce your page load time as the browser will only
need to send one server request for the entire page, rather than
multiple requests for the HTML and the images. Requests need to be
uploaded and 99% of the world are limited on their upload speed to the
server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译一下就是&lt;/p&gt;
&lt;p&gt;这种方式能够大大减少页面载入时间，因为整个页面只需要一个请求，多个针对html文档和图片的请求。请求需要被提(上)交(传)，但是99%的上传速度是被限制的。&lt;/p&gt;
&lt;p&gt;所以减少请求也是一个明确的选择！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单引号和双引号的区别及用法</title>
      <link>https://phpgao.github.io/php_quotation_marks.html</link>
      <pubDate>Tue, 22 Jul 2014 08:07:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_quotation_marks.html</guid>
      <description>&lt;p&gt;双引号，单引号问题自古以来一直处在混沌状态，不懂的人觉得没啥区别，懂的人貌似也说不出来啥区别，其实区别还是有很多，转给大家看看，自己也留一份参考&lt;/p&gt;
&lt;p&gt;转自&lt;a href=&#34;http://blog.sina.com.cn/s/blog_706476980100xapp.html&#34;&gt;http://blog.sina.com.cn/s/blog_706476980100xapp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.单引号和双引号都可以作为字符串的开始符和关闭符，并且只能‍同一种单或者双引号来定义开始和结束；单引号之间的字符都被认为是字符，即使是转义符\和变量符$,例外的是\’标识单引号。
2.双引号之间的字符是需要php解析的，包括$,\，{都保留了php赋予的特殊含义。
3.&amp;quot; &amp;ldquo;双引号里面的字段会经过编译器解释，然后再当作HTML代码输出；而&#39; &amp;lsquo;单引号里面的不进行解释，直接输出。
例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$abc=&#39;my name is tome&#39;;
echo $abc //结果是:my name is tom
echo &#39;$abc&#39; //结果是:$abc
echo &amp;quot;$abc&amp;quot; //结果是:my name is tom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特别在使用MYSQL语句的时候，双引号和单引号的用法让新手不知所措，在这里，举个例子，来进行说明。
假设查询条件中使用的是常量，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select    *    from    abc_table where user_name=&#39;abc&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQL语句可以写成:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SQLstr = &amp;quot;select    *    from abc_table where user _name= &#39;abc&#39;&amp;quot; ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假设查询条件中使用的是变量，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$user_name = $_REQUEST[&#39;user_name&#39;]; //字符串变量
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$user=array (&amp;quot;name&amp;quot;=&amp;gt; $_REQUEST[&#39;user_name‘,&amp;quot;age&amp;quot;=&amp;gt;$_REQUEST[&#39;age&#39;];//数组变量
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQL语句就可以写成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SQLstr = &amp;quot;select    *    from abc_table where user_name = &#39; &amp;quot; . $user_name . &amp;quot; &#39; &amp;quot;;
SQLstr = &amp;quot;select * from abc_table where user_name = &#39; &amp;quot; . $user[&amp;quot;name&amp;quot;] . &amp;quot; &#39; &amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对比一下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SQLstr=&amp;quot;select * from abc_table where user_name = &#39; abc &#39; &amp;quot; ;
SQLstr=&amp;quot;select * from abc_table where user_name =&#39; &amp;quot; . $user _name . &amp;quot; &#39; &amp;quot;;
SQLstr=&amp;quot;select * from abc_table where user_name =&#39; &amp;quot; . $user[&amp;quot;name&amp;quot;] . &amp;quot; &#39; &amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQLstr可以分解为以下3个部分:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1：&amp;quot;select * from table where user_name = &#39; &amp;quot; //固定SQL语句 
2：$user //变量 
3：&amp;quot; &#39; &amp;quot;
1,2,3部分字符串之间用&amp;quot;.&amp;quot; 来连接
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>正则表达式教程</title>
      <link>https://phpgao.github.io/regex_abc.html</link>
      <pubDate>Tue, 22 Jul 2014 07:51:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/regex_abc.html</guid>
      <description>&lt;h1 id=&#34;正则表达式入门&#34;&gt;正则表达式入门&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;字符是计算机软件处理文字时最基本的单位，可能是字母，数字，标点符号，空格，换行符，汉字等等。字符串是0个或更多个字符的序列。文本也就是文字，字符串。
正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在最近的六十年中，正则表达式逐渐从模糊而深奥的数学概念，发展成为在计算机各类工具和软件包应用中的主要功能。不仅仅众多UNIX工具支持正则表达式，近二十年来，在WINDOWS的阵营下，正则表达式的思想和应用在大部分 Windows 开发者工具包中得到支持和嵌入应用！从正则式在Microsoft Visual Basic 6 或 Microsoft VBScript到.NET Framework中的探索和发展，WINDOWS系列产品对正则表达式的支持发展到无与伦比的高度，几乎所有 Microsoft 开发者和所有.NET语言都可以使用正则表达式。如果你是一位接触计算机语言的工作者，那么你会在主流操作系统（*nix[Linux, Unix等]、Windows、HP、BeOS等）、主流的开发语言（PHP、C#、Java、C++、VB、Javascript、Ruby以及python等）、数以亿万计的各种应用软件中，都可以看到正则表达式优美的舞姿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上内容引自百度百科&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>Python程序监控脚本</title>
      <link>https://phpgao.github.io/check_running_python.html</link>
      <pubDate>Tue, 22 Jul 2014 06:00:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/check_running_python.html</guid>
      <description>有些软件虽然卖的很贵，但是稳定性还是让人很无语，经常莫名其妙的崩溃，生产服务器怎么能允许这种事情发生！
一个监控程序运行的就这样诞生了，程序Python 2.7
思路很简单，先写一个监控的函数，判断是否在运行，然后循环调用N次，直到运行成功，实在不行，就发个通知或者记录下来
难点在于如何判断进程在运行。
思路也很简单，主要用到了这两个方法
 os.popen os.system  他们两个都可以直接运行cmd或者shell中的命令，但是前者会返回输出的内容，可以做进一步的处理
而后者只是执行，并把结果打印出来。
下面是程序，注释已经很清晰了
#coding=utf-8 &amp;#34;&amp;#34;&amp;#34; To check program if it is running @author PHPergao @time 2014-7-22 &amp;#34;&amp;#34;&amp;#34; import re import os import time import urllib2 import urllib flag = 1 #check function def checkhct(): #tasklist也可换成linux下打印所有进程的命令 ps aux for line in os.popen(&amp;#39;tasklist&amp;#39;).readlines(): #判断用正则更准确，也可以使用find或者index判断 pattern = re.compile(r&amp;#39;qq.*&amp;#39;, re.I) match = pattern.match(line) if(match): return True return False #repeat 3 times for x in xrange(0,3): if(checkhct() == False): print &amp;#39;error&amp;#39; #程序路径 os.</description>
    </item>
    
    <item>
      <title>netbeans开启xdebug</title>
      <link>https://phpgao.github.io/netbeans_xdebug.html</link>
      <pubDate>Fri, 18 Jul 2014 04:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/netbeans_xdebug.html</guid>
      <description>一直在用everedit做开发，今天开始高大上，用一下netbeans
安装   在netbeans下载页面找到PHP版的netbeans，下载下来并安装，表忘了JRE也要装的
  在xdebug下载页面下载对应PHP版本的xdebug，然后解压至php目录下的ext目录下，同时新建d:\xdebug文件夹
  配置 PHP.INI 在phpinfo()页面中找到INI文件，在文件最后加入以下代码
;注意：我们的版本号可能不同zend_extension=&amp;quot;ext\php_xdebug-2.2.5-5.4-vc9.dll&amp;quot; [Xdebug];是否开启自动跟踪xdebug.auto_trace= On;是否开启异常跟踪xdebug.show_exception_trace= On;是否开启远程调试自动启动xdebug.remote_autostart= On;是否开启远程调试xdebug.remote_enable= On;允许调试的客户端IP;xdebug.remote_host= 192.168.1.1;远程调试的端口（默认9000）xdebug.remote_port=9000;调试插件dbgpxdebug.remote_handler=dbgp;是否收集变量xdebug.collect_vars= On;是否收集返回值xdebug.collect_return= On;是否收集参数xdebug.collect_params= On;跟踪输出路径xdebug.trace_output_dir=&amp;quot;d:\xdebug&amp;quot;;是否开启调试内容xdebug.profiler_enable=On;调试输出路径xdebug.profiler_output_dir=&amp;quot;d:\xdebug&amp;quot;;调试的域名xdebug.remote_host=localhost 修改以后重启服务器，看看有没有出现xdebug，如果出现了，那就成功了一大半
netbeans 设置的地方在tool-&amp;gt;option里找到debug标签，在这里可以修改PHP.EXE的路径，还有调试的工具和端口号等。
注意  如果你用的远程调试，务必打开xdebug.remote_enable 如果你用的域名调试，那么请修改xdebug.remote_host为你的域名，不要忘了加引号，不用带http:// 如果总是显示等待xdebug，那么就换一个web浏览器试试，在tool-&amp;gt;option-&amp;gt;general里可以找到 如果还不行，请留言，老高和你一起搞！  调试 哈哈，这还用讲吗？上个图</description>
    </item>
    
    <item>
      <title>php-bbcode过滤</title>
      <link>https://phpgao.github.io/bbcode-filter.html</link>
      <pubDate>Wed, 16 Jul 2014 06:42:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/bbcode-filter.html</guid>
      <description>BBCODE，即BB代码，属于轻量级标记语言（Lightweight Markup Language）的一种，如字面上所显示的，它主要是使用在BBS、论坛、Blog等网络应用上。BBCode最初由Ultimate Bulletin Board讨论区系统发展出来，因此常见UBB代码的称呼。BBCode的语法通常为[标记]这种形式，即语法左右用两个中括号包围，以作为与正常文字间的区别。系统解译时遇上中括号便知道该处是BBcode，会在解译结果输出到客户端时转换成最为通用的HTML语法。
要过滤他有两个思路，一个是先转化为html，再用strip_tags即可，下面是具体函数
&amp;lt;?phpfunction bb_parse($string){$tags = &#39;b|i|size|color|center|quote|url|img&#39;;while (preg_match_all(&#39;`\[(&#39; . $tags . &#39;)=?(.*?)\](.+?)\[/\1\]`&#39;, $string, $matches)){foreach ($matches[0] as $key =&amp;gt; $match) {list($tag, $param, $innertext) = array($matches[1][$key],$matches[2][$key],$matches[3][$key]);switch ($tag) {case &#39;b&#39;:$replacement = &amp;quot;&amp;lt;strong&amp;gt;$innertext&amp;lt;/strong&amp;gt;&amp;quot;;break;case &#39;i&#39;:$replacement = &amp;quot;&amp;lt;em&amp;gt;$innertext&amp;lt;/em&amp;gt;&amp;quot;;break;case &#39;size&#39;:$replacement = &amp;quot;&amp;lt;span style=\&amp;quot;font-size: $param;\&amp;quot;&amp;gt;$innertext&amp;lt;/span&amp;gt;&amp;quot;;break;case &#39;color&#39;:$replacement = &amp;quot;&amp;lt;span style=\&amp;quot;color: $param;\&amp;quot;&amp;gt;$innertext&amp;lt;/span&amp;gt;&amp;quot;;break;case &#39;center&#39;:$replacement = &amp;quot;&amp;lt;div class=\&amp;quot;centered\&amp;quot;&amp;gt;$innertext&amp;lt;/div&amp;gt;&amp;quot;;break;case &#39;quote&#39;:$replacement = &amp;quot;&amp;lt;blockquote&amp;gt;$innertext&amp;lt;/blockquote&amp;gt;&amp;quot; .</description>
    </item>
    
    <item>
      <title>markdown语法简介</title>
      <link>https://phpgao.github.io/markdown_usage.html</link>
      <pubDate>Wed, 16 Jul 2014 03:08:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/markdown_usage.html</guid>
      <description>&lt;p&gt;最近把之前的文章都用markdown重写了一遍&lt;/p&gt;
&lt;p&gt;之前寄希望于md自动转换，可惜转换后的格式惨不忍睹，同时发现我写得的文章也是惨不忍睹 ::&amp;gt;_&amp;lt;::&lt;/p&gt;
&lt;p&gt;下面简单写一下md的语法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP所有函数列表</title>
      <link>https://phpgao.github.io/php_function_all.html</link>
      <pubDate>Tue, 15 Jul 2014 01:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_function_all.html</guid>
      <description>&lt;p&gt;说所有函数有点夸张，有错误请指正！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>现在都用md，咱也不落后</title>
      <link>https://phpgao.github.io/use_markdown.html</link>
      <pubDate>Thu, 10 Jul 2014 09:09:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/use_markdown.html</guid>
      <description>markdown是个好东西！让我们可以集中精力去写文章，提高文章质量，不过有几个方面还是值得吐槽的：
 超链接的target属性不能自定义 在WP中插入图片太麻烦 没有很好的支持或者支持标准不一 待补充  推荐一个好工具：stackedit
还有他的升级版：stackedit-beta
2014年10月19日补充：
markdown标准语法请参考http://commonmark.org</description>
    </item>
    
    <item>
      <title>thinkphp验证码不显示</title>
      <link>https://phpgao.github.io/thinkphp_verify.html</link>
      <pubDate>Thu, 10 Jul 2014 09:02:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/thinkphp_verify.html</guid>
      <description>&lt;p&gt;今天解决了一个验证码不显示的问题，值得大家注意&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP面向对象的那些事儿</title>
      <link>https://phpgao.github.io/php_ob.html</link>
      <pubDate>Thu, 10 Jul 2014 07:03:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_ob.html</guid>
      <description>&lt;p&gt;PHP的面向对象在进入5版本后得到了加强，很多好用的特性都得到了支持。下面总结了一些开发时用到的简单的概念，希望对你有帮助&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在thinphp的模板中使用U方法传递参数</title>
      <link>https://phpgao.github.io/thinkphp_u_function.html</link>
      <pubDate>Thu, 26 Jun 2014 03:12:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/thinkphp_u_function.html</guid>
      <description>在模板里生成URL如果需要用到模板里的参数时，使用下面代码即可
{:U(&#39;Index/getInfo&#39;,array(&#39;userid&#39;=&amp;gt;$userid))} 如果变量有嵌套，那就要用&amp;quot;[]&amp;ldquo;代替模板中的&amp;rdquo;.&amp;quot;
{:U(&#39;Index/getInfo&#39;,array(&#39;userid&#39;=&amp;gt;$user[&#39;id&#39;]))}  </description>
    </item>
    
    <item>
      <title>误删了phpwind下data-bbscache怎么办？</title>
      <link>https://phpgao.github.io/phpwin_bbscache.html</link>
      <pubDate>Sun, 22 Jun 2014 05:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpwin_bbscache.html</guid>
      <description>今天手残，把上述文件夹给删了，而缺没有备份，网页直接打不开了 网上的回答五花八门，有登陆后台重建缓存的，有分析install.php重建文件夹的。。。各种无语啊 还是自己想的办法好：
自己在本地重建建立一个一模一样的phpwind，然后把生成的bbscache文件夹覆盖回去即可！
难点在于如何搭建一模一样的phpwind，主要是数据库的用户名密码和域名，还有后台管理的用户名密码，讲一下步骤：
 先在host里绑定域名www.abc.com到127.0.0.2 在Apache或其他服务器新建虚拟主机127.0.0.2，别名设为www.abc.com 把俺炸U那个文件拷贝进去，安装吧~  </description>
    </item>
    
    <item>
      <title>Shell中各种奇怪的变量</title>
      <link>https://phpgao.github.io/linux_puzzle.html</link>
      <pubDate>Wed, 18 Jun 2014 02:34:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/linux_puzzle.html</guid>
      <description>这些变量是随系统运行而变化的，灵活使这些变量可简化我们的操作和更好地控制bash shell的行为。
$# 是传给脚本的参数个数 $0 是脚本本身的名字 $1 是传递给该shell脚本的第一个参数 $2 是传递给该shell脚本的第二个参数 $@ 是传给脚本的所有参数的列表 $* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个 $$ 是脚本运行的当前进程ID号 $? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误 </description>
    </item>
    
    <item>
      <title>使用python模拟登陆腾讯微博</title>
      <link>https://phpgao.github.io/t_login.html</link>
      <pubDate>Mon, 16 Jun 2014 06:20:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/t_login.html</guid>
      <description>由于业务需要，研究了一下腾讯微博等登陆，下面分享一些经验给大家： 标题写的是腾讯微博的登陆，其实也可以隐身到腾讯旗下多个产品的登陆，比如QQ空间，webQQ等，想到这儿大伙是不是很激动呢？
[TOC]
表急，等我细细道来。
数据采集 有时候简单的数据不需要这么大费周折！使用某些语言自带的web工具也是可以的！下面我以Python为例：
分析登录过程 登录过程需要抓包，我是用的HttpWatch，大体步骤如下
第一步 手动登陆，抓包，记录登录过程  当输入完账号后想服务器请求验证码 等级登陆按钮后将登录信息发送至认证服务器，实现第一次认证 服务器返回登陆成功信息，其中包含最终URL 第二次认证，获取腾讯微博的cookie  第二步 伪造登录过程  获取验证码 根据验证码计算出加密后的密码以及其他信息，发送GET请求至认证服务器 根据返回URL获取最终cookie  工作难点 本文假设读者理解http协议及数据包的发送原理，以此为基础，工作的难点就集中在数据的准备上。
 密码的加密原理 cookie的处理 header的UA及refer的一致性  密码加密算法 以下提取自登录页面的c_login_2.js文件
function getEncryption(password, uin, vcode) {var str1 = hexchar2bin(md5(password));var str2 = md5(str1 + uin);var str3 = md5(str2 + vcode.toUpperCase());return str3}if (b == &amp;quot;login&amp;quot;) {d.u = encodeURIComponent(pt.plogin.at_accout);d.verifycode = $(&amp;quot;verifycode&amp;quot;).value;if (pt.plogin.needShowNewVc &amp;amp;&amp;amp; pt.</description>
    </item>
    
    <item>
      <title>mysql的多表删除</title>
      <link>https://phpgao.github.io/mysql_multitable_deletion.html</link>
      <pubDate>Thu, 12 Jun 2014 06:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mysql_multitable_deletion.html</guid>
      <description>mysql默认是禁用多表删除语句的，之前的做法都是先把条件缓存，然后逐条执行
delete from a where a.xxx in (123123,123123);delete from b where b.xxxx in (123123,123123); 如果写成下面这种绝对是错误的！
delete * from a,b where xxxx in ... 今天突然发现原来mysql也是可以一条sql删除多表数据的，下面来分析一下 多表删除其实思路还是比较简单的，首先条件就是多个表（一般就两个表，织梦的文章信息存在3个表里，删除起来很麻烦）有关联 其次，删除条件一般都是由关联的这一行组成的，也可能不是，没有关系，我们先写一个试试：
DELETE p.*, pp.* FROM pw_threads p, pw_tmsgs pp WHERE p.tid = pp.tid AND p.tid in(SELECT tid FROM pw_threads WHERE postdate&amp;gt;UNIX_TIMESTAMP(&#39;2014-06-12 00:00:00&#39;) and fid=136) 逻辑都通着，但是会报错
 You can&amp;rsquo;t specify target table &amp;lsquo;A&amp;rsquo; for update in FROM clause 原因是: In general, you cannot modify a table and select from the same table in a subquery.</description>
    </item>
    
    <item>
      <title>记一次goagent的设置</title>
      <link>https://phpgao.github.io/ga.html</link>
      <pubDate>Tue, 10 Jun 2014 06:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/ga.html</guid>
      <description>##下载
项目地址: https://github.com/goagent/goagent
APP配置 到https://appengine.google.com/新建一个或多个app，注意记录下app的ID！
一个appid每天只有1G的流量
上传服务器端脚本 解压至某文件夹，此处假设为d:\app\goagent318\，然后进去server，运行uploader.bat批处理
按提示输入信息即可，可能会很慢。
多个appid请用’|’隔开，即回车键上面那个
貌似现在一个帐号能创建25个app，每天25G流量，够用了吧？
只要在服务器上部署成功，以后就不用管server文件夹了 :-D ，除非你又要添加新的app才会用到！
此步骤只是把goagent的服务器端部署到你的在线APP上，等待你去调用他，所以下一步就是配置本地的文件，以实现对接。
部署成功的标志是看到这里的https://appengine.google.com/应用都在running即可！
本地配置 难点在这一步，废话比较多，我就粘贴一下官网的教程吧
编辑local\proxy.ini，把其中appid = goagent中的goagent 改成你之前申请的应用的appid (用windows的记事本也可以） 如果要使用多个appid，appid之间用|隔开，如：appid1|appid2|appid3，每个appid必须确认上传成功才能使用 格式 如下：
[gae] appid = app-0|app-1|app-3|app-4 运行local下的goagent.exe，测试一下配置是否成功！推荐迅雷的代理测试
高级技巧 修改goagent端口 你可以修改端口以达到分流的作用，比如，使用默认8087端口上网用，再建一个使用8089端口的goagent，然后使用这个端口下载东西或者什么的，只要端口不冲突，你就可以建立多个代理，以达到分流的目的！
怎么修改呢？
先结束goagent进程，复制一份出来命名goagent318-d，原来的那个叫goagent318-w，d means download,w means web! 还是修改那个proxy.ini，找到[listen]，应该在第一行，然后修改port = 8087为port = 8089，端口就改好了 讲appid按需分配给各个端口对应的程序，如我有十个app，给迅雷分5个，web分4个，再留一个备用！
在chrome中使用goagent 这个要用到SwitchySharp，怎么使用，自己百度吧！
goagent的GUI版本 这个挺不错的，方便小白使用，推荐下载绿色版！
围观地址：https://goagent.codeplex.com/
打造自己的网页代理 这个比较酷！不适用google，而是使用自己的网站做代理！只要你的主机在香港或者美国，就可以用PHP模拟成goagent的server端，然后就可以翻越GFW了
设置方法请参考
http://www.blogfeng.com/goagent-space-into-a-proxy-server-for-php.html
2015年1月12日更新：
 更新项目地址 fqrouter2已经停止更新 更好的翻墙方案 shadowsocks  </description>
    </item>
    
    <item>
      <title>用Python写了个日志清理的脚本</title>
      <link>https://phpgao.github.io/log_cleaner.html</link>
      <pubDate>Tue, 10 Jun 2014 03:56:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/log_cleaner.html</guid>
      <description>欢迎吐槽！
#! /usr/bin/env python# -*- coding: utf-8 -*-import os,time,shutilpath = os.getcwd()target_dir = []cal = []target_dir.append(&#39;/var/lib/mysql/log/&#39;)target_dir.append(&#39;/newlogs/&#39;)target_dir.append(&#39;/oldlogs/&#39;)#初始化删除文件名del_ext = [&#39;frm&#39;,&#39;MYD&#39;,&#39;MYI&#39;]#你要保留几天days_before = 5#初始化删除日期for x in xrange(days_before+1,days_before+30):cal.append(time.strftime(&#39;%Y_%m_%d&#39;,time.localtime(time.time() - x*24*3600)))#初始化删除文件名，使用笛卡尔积！fl = map(&#39;.&#39;.join, [[x,y] for x in cal for y in del_ext])#以日期命名的文件夹cal = []for x in xrange(days_before+1,days_before+30):cal.append(time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time.time() - x*24*3600)))fl += cal#获取文件扩展名def get_ext(filename):return filename.</description>
    </item>
    
    <item>
      <title>python时间函数整理</title>
      <link>https://phpgao.github.io/python_time.html</link>
      <pubDate>Mon, 09 Jun 2014 02:44:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_time.html</guid>
      <description>有一些是拷的，自己加了一点，大家凑活看吧
#-*- coding:utf-8 -*-import timeimport datetime#in python is float while in php is intcurrenttime = 1402244512.48print time.time()print time.ctime()print time.ctime(currenttime)print time.localtime()print type(time.localtime())print time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time.time()-3600*24))print time.strftime(&#39;%Y-%m-%d %H:%I:%S&#39;,time.localtime(time.time()))print time.strftime(&#39;%Y-%m-%d %H:%I:%S&#39;,time.gmtime(time.time()))currentstr = &#39;2013-08-21 17:05:01&#39;print time.strptime(currentstr,&#39;%Y-%m-%d %H:%I:%S&#39;)&#39;&#39;&#39;python中时间日期格式化符号：%y 两位数的年份表示（00-99）%Y 四位数的年份表示（000-9999）%m 月份（01-12）%d 月内中的一天（0-31）%H 24小时制小时数（0-23）%I 12小时制小时数（01-12）%M 分钟数（00=59）%S 秒（00-59）%a 本地简化星期名称%A 本地完整星期名称%b 本地简化的月份名称%B 本地完整的月份名称%c 本地相应的日期表示和时间表示%j 年内的一天（001-366）%p 本地A.</description>
    </item>
    
    <item>
      <title>Python标准库urllib2的使用细节</title>
      <link>https://phpgao.github.io/python_urllib.html</link>
      <pubDate>Thu, 05 Jun 2014 02:57:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/python_urllib.html</guid>
      <description>以下转自
http://blog.csdn.net/pleasecallmewhy/article/details/8925978
[TOC]
Python 标准库中有很多实用的工具类，但是在具体使用时，标准库文档上对使用细节描述的并不清楚，比如 urllib2 这个 HTTP 客户端库。这里总结了一些 urllib2 的使用细节。
Proxy 的设置 urllib2 默认会使用环境变量 http_proxy 来设置 HTTP Proxy。如果想在程序中明确控制 Proxy 而不受环境变量的影响，可以使用下面的方式
import urllib2enable_proxy = Trueproxy_handler = urllib2.ProxyHandler({&amp;quot;http&amp;quot; : &#39;http://some-proxy.com:8080&#39;})null_proxy_handler = urllib2.ProxyHandler({})if enable_proxy:opener = urllib2.build_opener(proxy_handler)else:opener = urllib2.build_opener(null_proxy_handler)urllib2.install_opener(opener) 这里要注意的一个细节，使用 urllib2.install_opener() 会设置 urllib2 的全局 opener 。这样后面的使用会很方便，但不能做更细粒度的控制，比如想在程序中使用两个不同的 Proxy 设置等。比较好的做法是不使用 install_opener 去更改全局的设置，而只是直接调用 opener 的 open 方法代替全局的 urlopen 方法。
Timeout 设置 在老版 Python 中，urllib2 的 API 并没有暴露 Timeout 的设置，要设置 Timeout 值，只能更改 Socket 的全局 Timeout 值。</description>
    </item>
    
    <item>
      <title>http_build_query妙用</title>
      <link>https://phpgao.github.io/http_build_query.html</link>
      <pubDate>Wed, 21 May 2014 09:30:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/http_build_query.html</guid>
      <description>http_build_query这个函数可以很方便的构造一个请求所需要的参数。(不分GET,POST)
这个函数可以把一个数组转化为一串字符
栗子1：
&amp;lt;?php$data = array(&#39;foo&#39;=&amp;gt;&#39;bar&#39;,&#39;baz&#39;=&amp;gt;&#39;boom&#39;,&#39;cow&#39;=&amp;gt;&#39;milk&#39;,&#39;php&#39;=&amp;gt;&#39;hypertext processor&#39;);//第二个参数是分割使用的符号echo http_build_query($data) . &amp;quot;\n&amp;quot;;echo http_build_query($data, &#39;&#39;, &#39;&amp;amp;amp;&#39;);# foo=bar&amp;amp;baz=boom&amp;amp;cow=milk&amp;amp;php=hypertext+processor# foo=bar&amp;amp;amp;baz=boom&amp;amp;amp;cow=milk&amp;amp;amp;php=hypertext+processor?&amp;gt; 栗子二：
&amp;lt;?php$data = array(&#39;user&#39;=&amp;gt;array(&#39;name&#39;=&amp;gt;&#39;Bob Smith&#39;,&#39;age&#39;=&amp;gt;47,&#39;sex&#39;=&amp;gt;&#39;M&#39;,&#39;dob&#39;=&amp;gt;&#39;5/12/1956&#39;),&#39;pastimes&#39;=&amp;gt;array(&#39;golf&#39;, &#39;opera&#39;, &#39;poker&#39;, &#39;rap&#39;),&#39;children&#39;=&amp;gt;array(&#39;bobby&#39;=&amp;gt;array(&#39;age&#39;=&amp;gt;12,&#39;sex&#39;=&amp;gt;&#39;M&#39;),&#39;sally&#39;=&amp;gt;array(&#39;age&#39;=&amp;gt;8,&#39;sex&#39;=&amp;gt;&#39;F&#39;)),&#39;CEO&#39;);//第二个参数，如果数组没有键值，则自动添加键值echo http_build_query($data, &#39;flags_&#39;);?&amp;gt; 输出：
 user%5Bname%5D=Bob+Smith&amp;amp;user%5Bage%5D=47&amp;amp;user%5Bsex%5D=M&amp;amp;user%5Bdob%5D=5%2F12%2F1956&amp;amp;pastimes%5B0%5D=golf&amp;amp;pastimes%5B1%5D=opera&amp;amp;pastimes%5B2%5D=poker&amp;amp;pastimes%5B3%5D=rap&amp;amp;children%5Bbobby%5D%5Bage%5D=12&amp;amp;children%5Bbobby%5D%5Bsex%5D=M&amp;amp;children%5Bsally%5D%5Bage%5D=8&amp;amp;children%5Bsally%5D%5Bsex%5D=F&amp;amp;flags_0=CEO
 把上面的请求传给一个PHP文件处理，打印传递来的参数，会得到以下结果：
Array([_GET] =&amp;gt; Array([user] =&amp;gt; Array([name] =&amp;gt; Bob Smith[age] =&amp;gt; 47[sex] =&amp;gt; M[dob] =&amp;gt; 5/12/1956)[pastimes] =&amp;gt; Array([0] =&amp;gt; golf[1] =&amp;gt; opera[2] =&amp;gt; poker[3] =&amp;gt; rap)[children] =&amp;gt; Array([bobby] =&amp;gt; Array([age] =&amp;gt; 12[sex] =&amp;gt; M)[sally] =&amp;gt; Array([age] =&amp;gt; 8[sex] =&amp;gt; F))[flags_0] =&amp;gt; CEO)[_POST] =&amp;gt; Array()[_COOKIE] =&amp;gt; Array([PHPSESSID] =&amp;gt; 5u7l53inhrl5j1ojmn65ok4k44)[_FILES] =&amp;gt; Array()[GLOBALS] =&amp;gt; Array*RECURSION*) 很神奇吧！</description>
    </item>
    
    <item>
      <title>PHP缓冲研究</title>
      <link>https://phpgao.github.io/php_buffering.html</link>
      <pubDate>Wed, 21 May 2014 08:54:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_buffering.html</guid>
      <description>输出缓冲是个让人头大的问题，因为它不仅牵扯到web语言本身，浏览器自身的原因也会导致无内容输出。
所以，在输出前保险的做法是先输出4096个空白字符，然后再使用缓冲输出内容，这样就可以实现程序随时输出内容啦！
以下代码chrome，FF，IE，Safari，手机chrome，UCWEB 都测试通过，需要注意的是：
在网页最开始一定要输出足够多的字符来骗过浏览器 ob_flush,flush需要一起使用
&amp;lt;?php//以下几个函数作用于PHP及服务器的设置，一般不需要更改/*@apache_setenv(&#39;no-gzip&#39;, 1);@ini_set(&#39;zlib.output_compression&#39;, 0);@ini_set(&#39;implicit_flush&#39;, 1); //==ob_implicit_flush(1);*///检测是否开启缓冲if (ob_get_level() == 0) ob_start();//这里的数字可变 FF:1024 CHROME:0 IE:4096echo str_repeat(&#39; &#39; ,4096);//echo str_pad(&#39;&#39;,4096).&amp;quot;\n&amp;quot;;for ($i = 1; $i&amp;lt;=10; $i++){echo &amp;quot;Line $i&amp;lt;br&amp;gt;&amp;quot;;//ob_end_clean(); //如果再此打开，flush将会报错，因为清空了缓冲区//echo &#39; length: &#39;.ob_get_length();ob_flush();flush();sleep(1);}echo &amp;quot;Done.&amp;quot;;/*ob_end_flush(); //送出输出缓冲区内容并关闭缓冲ob_get_clean(); //得到当前缓冲区的内容并删除当前输出缓。ob_get_contents(); //只是得到输出缓冲区的内容，但不清除它。ob_implicit_flush(1); //将打开或关闭绝对（隐式）刷送。绝对（隐式）刷送将导致在每次输出调用后有一次刷送操作，以便不再需要对 flush() 的显式调用。*//*刷新PHP程序的缓冲，而不论PHP执行在何种情况下（CGI ，web服务器等等）。该函数将当前为止程序的所有输出发送到用户的浏览器。flush() 函数不会对服务器或客户端浏览器的缓存模式产生影响。因此，必须同时使用 ob_flush() 和flush() 函数来刷新输出缓冲。个别web服务器程序，特别是Win32下的web服务器程序，在发送结果到浏览器之前，仍然会缓存脚本的输出，直到程序结束为止。有些Apache的模块，比如mod_gzip，可能自己进行输出缓存，这将导致flush()函数产生的结果不会立即被发送到客户端浏览器。甚至浏览器也会在显示之前，缓存接收到的内容。例如 Netscape 浏览器会在接受到换行或 html 标记的开头之前缓存内容，并且在接受到 &amp;lt;/table&amp;gt; 标记之前，不会显示出整个表格。一些版本的 Microsoft Internet Explorer 只有当接受到的256个字节以后才开始显示该页面，所以必须发送一些额外的空格来让这些浏览器显示页面内容。*/ 以下转自http://www.</description>
    </item>
    
    <item>
      <title>使用PHP的CURL模拟POST采集</title>
      <link>https://phpgao.github.io/curl_post.html</link>
      <pubDate>Mon, 19 May 2014 08:35:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/curl_post.html</guid>
      <description>这个函数很不错，curl函数中的header还可以加入随机UA等功能防屏蔽，以后改改做自己的采集类！
/**QQ群:223494678函数:模拟post得到所有分页的页面信息参数:string $EVENTARGUMENTstring $VIEWSTATEstring $EVENTVALIDATIONstring $EVENTTARGET返回:string/**/function getn($EVENTARGUMENT = &amp;quot;&amp;quot;, $VIEWSTATE = &amp;quot;&amp;quot;, $EVENTVALIDATION = &amp;quot;&amp;quot;, $EVENTTARGET = &amp;quot;pager&amp;quot;){$args = array();if($EVENTARGUMENT){$args = array(&#39;__EVENTTARGET&#39;=&amp;gt;$EVENTTARGET,&#39;__EVENTARGUMENT&#39;=&amp;gt;$EVENTARGUMENT,&#39;__VIEWSTATE&#39;=&amp;gt;$VIEWSTATE,&#39;__EVENTVALIDATION&#39;=&amp;gt;$EVENTVALIDATION,&#39;__VIEWSTATEENCRYPTED&#39;=&amp;gt;&#39;&#39;,&#39;search$txtFundName=&#39;=&amp;gt;&#39;&#39;,&#39;search$txtFundManger&#39;=&amp;gt;&#39;&#39;,&#39;search$ddlFoundationDateOperater&#39;=&amp;gt;&#39;1&#39;,&#39;search$txtFoundationDate&#39;=&amp;gt;&#39;&#39;,&#39;search$dltFundType$ctl01$chkFundType&#39;=&amp;gt;&#39;on&#39;,&#39;search$dltFundType$ctl01$chklFundChildType$0&#39;=&amp;gt;&#39;on&#39;,&#39;search$dltFundType$ctl01$chklFundChildType$1&#39;=&amp;gt;&#39;on&#39;,&#39;search$dltFundType$ctl01$chklFundChildType$2&#39;=&amp;gt;&#39;on&#39;,&#39;search$dltFundType$ctl01$chklFundChildType$3&#39;=&amp;gt;&#39;on&#39;,&#39;search$dltFundType$ctl01$chklFundChildType$4&#39;=&amp;gt;&#39;on&#39;,&#39;search$chklFundStatus$0&#39;=&amp;gt;&#39;on&#39;,&#39;search$ddlFundOrg&#39;=&amp;gt;&#39;0&#39;,&#39;search$txtFundOrgName&#39;=&amp;gt;&#39;&#39;,&#39;search$ddlStatisticDateOperater&#39;=&amp;gt;&#39;1&#39;,&#39;search$txtStatisticDate&#39;=&amp;gt;&#39;&#39;,&#39;search$radlStatisticMode&#39;=&amp;gt;&#39;1&#39;);}$user_agent = &amp;quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.</description>
    </item>
    
    <item>
      <title>PHP清除html格式</title>
      <link>https://phpgao.github.io/html_tag_clear.html</link>
      <pubDate>Sun, 18 May 2014 10:14:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/html_tag_clear.html</guid>
      <description>做采集的都知道，一般采集过来的内容难免会带有html标签，如果有太多的标签会影响之后的数据分析或提取，所以需要过滤掉！PHP已经为我们提供了很多清除html格式的方法了，下面就让老高介绍一下。
strip_tags strip_tags($str) 去掉 HTML 及 PHP 的标记 语法: string strip_tags(string str); 传回值: 字串 函式种类: 资料处理 内容说明 : 解析：本函式可去掉字串中包含的任何 HTML 及 PHP 的标记字串。若是字串的 HTML 及 PHP 标签原来就有错，例如少了大于的符号，则也会传回错误。这个函数和 fgetss() 有着相同的功能
例子
echo strip_tags(&amp;#34;Hello &amp;lt;b&amp;gt;world!&amp;lt;/b&amp;gt;&amp;#34;); # Hello world! htmlspecialchars 这个函数把html中的标签转换为html实体，博客的代码展示就必须使用这个函数，要不贴出来的代码就会被执行了。 预定义的字符是： &amp;amp; （和号） 成为 &amp;amp; ” （双引号） 成为 ” ‘ （单引号） 成为 ‘ &amp;lt; （小于） 成为 &amp;lt; &amp;gt; （大于） 成为 &amp;gt;
例子
$new = htmlspecialchars(&amp;#34;&amp;lt;a href=&amp;#39;test&amp;#39;&amp;gt;Test&amp;lt;/a&amp;gt;&amp;#34;, ENT_QUOTES); echo $new; # &amp;amp;lt;a href=&amp;amp;#039;test&amp;amp;#039;&amp;amp;gt;Test&amp;amp;lt;/a&amp;amp;gt; # 如果需要展现&amp;lt;br&amp;gt;，那么浏览器解析HTML的时候会自动将他变为换行 # 但是通过htmlspecialchars就可以让&amp;lt; 变为 &amp;amp;#039;  与htmlspecialchars功能相反的函数是htmlspecialchars_decode，他会把HTML实体转化为字符！</description>
    </item>
    
    <item>
      <title>通过微博的mid获取微博的URL</title>
      <link>https://phpgao.github.io/mid_weibo_url.html</link>
      <pubDate>Fri, 16 May 2014 08:31:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/mid_weibo_url.html</guid>
      <description>代码网上参考的，一共有两种，自己优化了一下：
1.离线方法
参考：http://www.iganlei.cn/demo/186.html
&amp;lt;?phpfunction int10to62($int10){static $str62keys;$str62keys = array(&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;6&amp;quot;,&amp;quot;7&amp;quot;,&amp;quot;8&amp;quot;,&amp;quot;9&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;f&amp;quot;,&amp;quot;g&amp;quot;,&amp;quot;h&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;j&amp;quot;,&amp;quot;k&amp;quot;,&amp;quot;l&amp;quot;,&amp;quot;m&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;p&amp;quot;,&amp;quot;q&amp;quot;,&amp;quot;r&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;t&amp;quot;,&amp;quot;u&amp;quot;,&amp;quot;v&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;x&amp;quot;,&amp;quot;y&amp;quot;,&amp;quot;z&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;E&amp;quot;,&amp;quot;F&amp;quot;,&amp;quot;G&amp;quot;,&amp;quot;H&amp;quot;,&amp;quot;I&amp;quot;,&amp;quot;J&amp;quot;,&amp;quot;K&amp;quot;,&amp;quot;L&amp;quot;,&amp;quot;M&amp;quot;,&amp;quot;N&amp;quot;,&amp;quot;O&amp;quot;,&amp;quot;P&amp;quot;,&amp;quot;Q&amp;quot;,&amp;quot;R&amp;quot;,&amp;quot;S&amp;quot;,&amp;quot;T&amp;quot;,&amp;quot;U&amp;quot;,&amp;quot;V&amp;quot;,&amp;quot;W&amp;quot;,&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;,&amp;quot;Z&amp;quot;);$s62 = &#39;&#39;;$r = 0;while ($int10 != 0) {$r = $int10 % 62;$s62 = $str62keys[$r] . $s62;$int10 = floor($int10 / 62);}return $s62;}function getCodeByMid($mid){$url = &#39;&#39;;for ($i = strlen($mid) - 7; $i &amp;gt; -7; $i -= 7) //从最后往前以7字节为一组读取mid{$offset1 = $i &amp;lt; 0 ? 0 : $i;$offset2 = $i + 7;$num = substr($mid, $offset1, $offset2 - $offset1);$num = int10to62($num);$url = $num .</description>
    </item>
    
    <item>
      <title>数据库持久连接</title>
      <link>https://phpgao.github.io/db_pconnect.html</link>
      <pubDate>Fri, 16 May 2014 03:17:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/db_pconnect.html</guid>
      <description>搜PHP长链接把这个搜出来了，2006年的帖子比较久远了，希望对你有帮助！
转自http://bbs.phpchina.com/forum.php?mod=viewthread&amp;amp;tid=4577&amp;amp;page=1 中forest的回帖：
永久的数据库连接是指在脚本结束运行时不关闭的连接。当收到一个永久连接的请求时。PHP 将检查是否已经存在一个（前面已经开启的）相同的永久连接。如果存在，将直接使用这个连接；如果不存在，则建立一个新的连接。所谓“相同”的连接是指用相同的用户名和密码到相同主机的连接。
对 web 服务器的工作和分布负载没有完全理解的读者可能会错误地理解永久连接的作用。特别的，永久连接不会在相同的连接上提供建立“用户会话”的能力，也不提供有效建立事务的能力。实际上，从严格意义上来讲，永久连接不会提供任何非永久连接无法提供的特殊功能。
为什么？
这和 web 服务器工作的方式有关。web 服务器可以用三种方法来利用 PHP 生成 web 页面。
第一种方法是将 PHP 用作一个“外壳”。以这种方法运行，PHP 会为向 web 服务器提出的每个 PHP 页面请求生成并结束一个 PHP 解释器线程。由于该线程会随每个请求的结束而结束，因此任何在这个线程中利用的任何资源（例如指向 SQL 数据库服务器的连接）都会随线程的结束而关闭。在这种情况下，使用永久连接不会获得任何地改变――因为它们根本不是永久的。
第二，也是最常用的方法，是把 PHP 用作多进程 web 服务器的一个模块，这种方法目前只适用于 Apache。对于一个多进程的服务器，其典型特征是有一个父进程和一组子进程协调运行，其中实际生成 web 页面的是子进程。每当客户端向父进程提出请求时，该请求会被传递给还没有被其它的客户端请求占用的子进程。这也就是说当相同的客户端第二次向服务端提出请求时，它将有可能被一个不同的子进程来处理。在开启了一个永久连接后，所有请求 SQL 服务的后继页面都能够重新使用这个已经建立的 SQL Server 连接。
最后一种方法是将 PHP 用作多线程 web 服务器的一个插件。目前 PHP 4 已经支持 ISAPI、WSAPI 和 NSAPI（在 Windows 环境下），这些使得 PHP 可以被用作诸如 Netscape FastTrack (iPlanet)、Microsoft’s Internet Information Server (IIS) 和 O’Reilly’s WebSite Pro 等多线程 web 服务器的插件。永久连接的行为和前面所描述的多过程模型在本质上是相同的。注意 PHP 3 不支持 SAPI。</description>
    </item>
    
    <item>
      <title>PHP获取新浪微博token</title>
      <link>https://phpgao.github.io/weibo_token.html</link>
      <pubDate>Thu, 15 May 2014 03:04:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/weibo_token.html</guid>
      <description>最近在做采集微博的功能，由于要自动采集，所以必须获得最终的用户的token，获取了这个token以后就可以为所欲为啦！
贴代码
$s = new SaeTOAuthV2 ( WB_AKEY, WB_SKEY);//准备post数据$post [&#39;action&#39;] = &#39;login&#39;;//$post [&#39;display&#39;] = &#39;default&#39;;//$post [&#39;withOfficalFlag&#39;] = 0;//$post [&#39;quick_auth&#39;] = null;//$post [&#39;withOfficalAccount&#39;] = &#39;&#39;;//$post [&#39;scope&#39;] = &#39;&#39;;//$post [&#39;ticket&#39;] = &#39;&#39;;//$post [&#39;isLoginSina&#39;] = &#39;&#39;;//$post [&#39;isLoginSina&#39;] = &#39;code&#39;;//regCallback|appkey62需要预先请求一次拿到//$post [&#39;regCallback&#39;] = $match_regCallback[1];//这里不用urlencode,http_build_query会自动处理$post [&#39;redirect_uri&#39;] = WB_CALLBACK_URL;$post [&#39;client_id&#39;] = WB_AKEY;//$post [&#39;appkey62&#39;] = $match_appkey[1];//$post [&#39;state&#39;] = &#39;&#39;;//$post [&#39;verifyToken&#39;] = null;//$post [&#39;from&#39;] = &#39;&#39;;$post [&#39;userId&#39;] = &#39;*******&#39;;//测试用户名$post [&#39;passwd&#39;] = &#39;*******&#39;;//测试密码,不要有！@￥%……&amp;amp;*（）这些符号，最好全是字符或数字，否则验证会失败$post = http_build_query($post);//UA貌似没有也行，保险起见还是加上吧$UA = &#39;Mozilla/5.</description>
    </item>
    
    <item>
      <title>新浪微博商业API使用参考</title>
      <link>https://phpgao.github.io/sina_weibo_business_api.html</link>
      <pubDate>Mon, 12 May 2014 06:07:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/sina_weibo_business_api.html</guid>
      <description>工作中需要微博的商业API，记录一下 不了解的TX先去看说说明 http://open.weibo.com/wiki/商业数据API
 商业数据API：包括数据分析、舆情监测、获取全量粉丝三大特性，同时还有实时数据推送、历史数据检索、监测粉丝变化趋势、活跃&amp;amp;活动粉丝分析等多项功能，协助和指引企业开展社会化营销，让真实的用户数据变为企业的决策。  申请试用 申请试用的邮箱为 businessapi@staff.sina.com.cn 给这个地址发邮件说明意图即可 这一步挺麻烦的，需要提供很多企业信息，需要注意的是：商业API只提供商业用途，所以如果你的APP的服务对象不是企业，请绕道。 然后填写两张申请单，分别为 订阅服务申请单、REST接口申请单-测试版。 一个是订阅微博，粉丝登上数据用的，另一个是标准API，可以使用搜索等高级接口！
价格 确定试用时间 试用时间一般两周，请充分利用好这宝贵的时间吧！
测试 REST接口很简单，和普通接口一样直接调用。就是订阅接口比较麻烦，当你生成订阅列表后，他会把满足你需要的数据放进一个类似队列的东西，然后你需要不断从这个队列中取出你需要的信息，而且这个获取过程需要HTTP长链接。。。。。。说起来很复杂，其实做起来更复杂 :mad: ！ 下面就来讲讲订阅接口，先看看这两个文档：
 订阅接口的服务手册 http://open.weibo.com/wiki/Subscription_guide 订阅管理接口 http://open.weibo.com/wiki/C/2/subscribe/update_subscribe  看完这两个接口就基本知道了订阅到底是干啥用的。
订阅开启 首先，开启了订阅接口服务以后，你会有推送时间，还有推送IP等很多需要设置的东西，当然完成了这些基本设置后，就可以开始配置订阅规则了，订阅规则基于以下两个条件：
  订阅用户
  订阅关键字 从subscribe/update_subscribe这个接口的示例来看，订阅有以下特点：
 订阅规则即刻生效 规则可以添加，修改 规则可以随时查询 每次修改量很有限（用户：50个；关键词：20个）    使用订阅 添加与删除一样 需要说明的是：
$params[&#39;subid&#39;] = &#39;***&#39;; //你的订阅ID 新浪提供$params[&#39;source&#39;] = &#39;***&#39;; //你的APPidsession_start();include_once( &#39;config.php&#39; );include_once( &#39;saetv2.ex.class.php&#39; );$c = new SaeTClientV2( WB_AKEY , WB_SKEY , $_SESSION[&#39;token&#39;][&#39;access_token&#39;] );$uid_get = $c-&amp;gt;get_uid();$uid = $uid_get[&#39;uid&#39;];//获取所有关注，默认一次50个，可以自己写循环$friends = $c-&amp;gt;friends_by_id($uid);$subscribe = &#39;&#39;;foreach( $friends[&#39;users&#39;] as $value ){$subscribe .</description>
    </item>
    
    <item>
      <title>mysql忘记root密码解决方法</title>
      <link>https://phpgao.github.io/iforget_mysql.html</link>
      <pubDate>Sat, 10 May 2014 01:27:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/iforget_mysql.html</guid>
      <description>Windows 步骤如下： 1.停止mysql服务(以管理员身份,在cmd命令行下运行)
net stop mysql 2.使用 mysqld –skip-grant-tables 命令启动mysql数据库
&amp;gt;D:\&amp;gt;net stop mysql MySQL 服务正在停止. MySQL 服务已成功停止。 D:\&amp;gt;mysqld --skip-grant-tables&amp;lt;/pre&amp;gt;  3.新开一个cmd窗口，进行如下操作
D:\&amp;gt;mysql -uroot Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 1 Server version: 5.1.26-rc-community MySQL Community Server (GPL) Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help. Type &amp;#39;\c&amp;#39; to clear the buffer. mysql&amp;gt; update mysql.user set password=password(&amp;#39;root&amp;#39;) where user=&amp;#39;root&amp;#39;; Query OK, 1 row affected (0.</description>
    </item>
    
    <item>
      <title>各种编码字符长度</title>
      <link>https://phpgao.github.io/characters_length.html</link>
      <pubDate>Fri, 09 May 2014 15:49:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/characters_length.html</guid>
      <description>测试源码如下
header(&amp;#34;Content-type: text/html; charset=utf-8&amp;#34;); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#34;ascii &amp;#34;, strlen(&amp;#39;hello&amp;#39;); //ascii echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; function strlentest($str) { echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo $str, &amp;#34;:&amp;#34;; echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#34;utf8 &amp;#34;, strlen($str); //utf8 echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#34;gbk &amp;#34;, strlen(iconv(&amp;#39;utf-8&amp;#39;, &amp;#39;GBK&amp;#39;, $str)); //gbk echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; echo &amp;#34;gb2312 &amp;#34;, strlen(iconv(&amp;#39;utf-8&amp;#39;, &amp;#39;gb2312&amp;#39;, $str)); //gb2312 echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; } $str = &amp;#34;中国人&amp;#34;; strlentest($str); $str = &amp;#34;A人1&amp;#34;; strlentest($str); $str = &amp;#34;AAA&amp;#34;; strlentest($str); $str = &amp;#34;111&amp;#34;; strlentest($str); 结论： 自己总结吧</description>
    </item>
    
    <item>
      <title>dede-常用SQL总结</title>
      <link>https://phpgao.github.io/dede_sql.html</link>
      <pubDate>Fri, 09 May 2014 15:48:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/dede_sql.html</guid>
      <description>织梦cms不知大家用过没有，功能比较强大，但是对于我还是有一些不够，所以我总结了一些经常会使用的SQL，比如批量修改文章发布人、替换栏目字符串、批量修改文章点击数、批量修改文章命名规则等，这些SQL使用dedecmsv5.7测试，其他版本不保证。
老高温馨提醒：使用此SQL务必备份数据库清空所有文章 TRUNCATE TABLE dede_addonarticle; TRUNCATE TABLE dede_archives; TRUNCATE TABLE dede_arctiny; 批量修改文章发布人 UPDATE dede_arctiny AS aSET a.mid=2;UPDATE dede_archives AS aSET a.mid=2;/*mid为管理员ID*/ 替换栏目字符串 UPDATE dede_arctype as aSET a.typename=REPLACE(a.typename,&#39;AAA&#39;,&#39;BBB&#39;)#AAA替换为BBB 修改文章点击数 /*随机数为300-1300*/UPDATE dede_archives AS aSET a.click=FLOOR(300 + (RAND() * 1001)); 批量修改文章命名规则 UPDATEdede_arctype AS aSETa.namerule=&#39;{typedir}/{aid}.html&#39; 查看栏目表 SELECT dede_arctype.typename,dede_arctype.description,dede_arctype.keywords,dede_arctype.seotitle,dede_arctype.namerule,dede_arctype.namerule2FROM dede_arctypeORDER BY typename; 所有文章都改为动态 #ismake的值为1时为静态，-1 时表示动态update dede_archives set ismake=-1;#将所有栏目设置为“使用静态页”，update dede_arctype set isdefault=1  </description>
    </item>
    
    <item>
      <title>常用正则表达式速查</title>
      <link>https://phpgao.github.io/regex_fast_reference.html</link>
      <pubDate>Mon, 28 Apr 2014 15:46:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/regex_fast_reference.html</guid>
      <description>“^\d+$”　//非负整数（正整数 + 0）“^[0-9]*[1-9][0-9]*$”　//正整数“^((-\d+)|(0+))$”　//非正整数（负整数 + 0）“^-[0-9]*[1-9][0-9]*$”　//负整数“^-?\d+$”　//整数“^\d+(\.\d+)?$”　//非负浮点数（正浮点数 + 0）“^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$”　//正浮点数“^((-\d+(\.\d+)?)|(0+(\.0+)?))$”　//非正浮点数（负浮点数 + 0）“^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$”　//负浮点数“^(-?\d+)(\.\d+)?$”　//浮点数“^[A-Za-z]+$”　//由26个英文字母组成的字符串“^[A-Z]+$”　//由26个英文字母的大写组成的字符串“^[a-z]+$”　//由26个英文字母的小写组成的字符串“^[A-Za-z0-9]+$”　//由数字和26个英文字母组成的字符串“^\w+$”　//由数字、26个英文字母或者下划线组成的字符串“^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$”　//email地址“^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$”　//url/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/ // 年-月-日/^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年“^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$” //Emil/^((\+?[0-9]{2,4}\-[0-9]{3,4}\-)|([0-9]{3,4}\-))?([0-9]{7,8})(\-[0-9]+)?$/ //电话号码“^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$” //IP地址 匹配中文字符的正则表达式： [\u4e00-\u9fa5] 匹配双字节字符(包括汉字在内)：[^\x00-\xff] 匹配空行的正则表达式：\n[\s| ]*\r 匹配HTML标记的正则表达式：/&amp;lt;(.*)&amp;gt;.*&amp;lt;\/\1&amp;gt;|&amp;lt;(.*) \/&amp;gt;/ 匹配首尾空格的正则表达式：(^\s*)|(\s*$) 匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
匹配网址URL的正则表达式：^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$ 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})? 匹配腾讯QQ号：^[1-9]*[1-9][0-9]*$
元字符及其在正则表达式上下文中的行为：
\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个后向引用、或一个八进制转义符。^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的Multiline 属性，^ 也匹配 ’\n’ 或 ’\r’ 之后的位置。$ 匹配输入字符串的结束位置。如果设置了 RegExp 对象的Multiline 属性，$ 也匹配 ’\n’ 或 ’\r’ 之前的位置。* 匹配前面的子表达式零次或多次。+ 匹配前面的子表达式一次或多次。+ 等价于 {1,}。?</description>
    </item>
    
    <item>
      <title>PHP方法总结</title>
      <link>https://phpgao.github.io/php.html</link>
      <pubDate>Thu, 10 Apr 2014 15:43:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php.html</guid>
      <description>编程时间长了，大家见过很多函数功能吧，比如获取用户IP等等，现在我将常用的PHP函数做个总结，方便大家COPY和使用。
&amp;lt;?php//获取用户IPfunction getIp(){$ip = &amp;quot;&amp;quot;;if (getenv(&#39;HTTP_CLIENT_IP&#39;) &amp;amp;&amp;amp; strcasecmp(getenv(&#39;HTTP_CLIENT_IP&#39;), &#39;unknow&#39;)) {$ip = getenv(&#39;HTTP_CLIENT_IP&#39;);} elseif (getenv(&#39;REMOTE_ADD&#39;) &amp;amp;&amp;amp; strcasecmp(getenv(&#39;REMOTE_ADD&#39;), &#39;unknow&#39;)) {$ip = getenv(&#39;REMOTE_ADD&#39;);} elseif (isset($_SERVER[&#39;REMOTE_ADDR&#39;]) &amp;amp;&amp;amp; strcasecmp($_SERVER[&#39;REMOTE_ADDR&#39;], &#39;unknow&#39;)) {$ip = $_SERVER[&#39;REMOTE_ADDR&#39;];}return $ip;}//快速替换字符串//$arrayName = array(&#39;h&#39;=&amp;gt;&#39;s&#39;,&#39;o&#39;=&amp;gt;&#39;t&#39;,&#39;l&#39;=&amp;gt;&#39;xx&#39;);//echo strsReplace(&#39;hello&#39;,$arrayName);function strsReplace($str, $replaces){$subject=$str;foreach ($replaces as $k =&amp;gt; $v)$subject = str_replace($k, $v, $subject);return $subject;}//规范文件名//$filename=&#39;&amp;quot;&amp;lt;&amp;gt;/\\\asda/.,psd|&amp;quot;&#39;;//echo tripFilename($filename);function tripFilename($filename){//$s=array(&amp;quot;/&amp;quot;,&amp;quot;\\&amp;quot;,&amp;quot;?</description>
    </item>
    
    <item>
      <title>彻底解决WP中文标签404错误</title>
      <link>https://phpgao.github.io/chinese_tag_404.html</link>
      <pubDate>Wed, 19 Mar 2014 15:38:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/chinese_tag_404.html</guid>
      <description>找到网站个目录下文件夹：wp-include文件夹下的class-wp.php，定位此代码段（V3.6在144行）
老高温馨提示：使用本教程前请备份数据库及相关文件if ( isset($_SERVER[&amp;#39;PATH_INFO&amp;#39;]) ) $pathinfo = $_SERVER[&amp;#39;PATH_INFO&amp;#39;]; else $pathinfo = &amp;#39;&amp;#39;; $pathinfo_array = explode(&amp;#39;?&amp;#39;, $pathinfo); $pathinfo = str_replace(&amp;#34;%&amp;#34;, &amp;#34;%25&amp;#34;, $pathinfo_array[0]); $req_uri = $_SERVER[&amp;#39;REQUEST_URI&amp;#39;]; 修改为 if ( isset($_SERVER[&amp;#39;PATH_INFO&amp;#39;]) ) $pathinfo = mb_convert_encoding($_SERVER[&amp;#39;PATH_INFO&amp;#39;], &amp;#34;UTF-8&amp;#34;, &amp;#34;GBK&amp;#34;); else $pathinfo = &amp;#39;&amp;#39;; $pathinfo_array = explode(&amp;#39;?&amp;#39;, $pathinfo); $pathinfo = str_replace(&amp;#34;%&amp;#34;, &amp;#34;%25&amp;#34;, $pathinfo_array[0]); $req_uri = mb_convert_encoding($_SERVER[&amp;#39;REQUEST_URI&amp;#39;], &amp;#34;UTF-8&amp;#34;, &amp;#34;GBK&amp;#34;); 至此，wordpress已经学会读中文了。
还有一种解决方式，即给每一个标签都设置一个英文别名，这样设置的标签还是不能使用中文，可以使用下面的代码将所有的标签格式化：
&amp;lt;?php header(&amp;#34;Content-type: text/html; charset=utf-8&amp;#34;); // 修改:LAOGAO https://blog.phpgao.com/ define(&amp;#39;MYSQL_HOSTNAME&amp;#39;, &amp;#39;localhost&amp;#39;); define(&amp;#39;MYSQL_USERNAME&amp;#39;, &amp;#39;yourusername&amp;#39;); define(&amp;#39;MYSQL_PASSWORD&amp;#39;, &amp;#39;yourpassword&amp;#39;); define(&amp;#39;MYSQL_DATABASE&amp;#39;, &amp;#39;yourdatabase&amp;#39;); define(&amp;#39;MYSQL_TABLEPRE&amp;#39;, &amp;#39;wp_&amp;#39;); // 表前缀 error_reporting(E_ALL); ini_set(&amp;#39;display_errors&amp;#39;, &amp;#39;On&amp;#39;); $link = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_PASSWORD); if (!</description>
    </item>
    
    <item>
      <title>PHP教程</title>
      <link>https://phpgao.github.io/php_lessons_online.html</link>
      <pubDate>Thu, 13 Mar 2014 15:12:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_lessons_online.html</guid>
      <description>最近在线教程如雨后春笋，现在我把我看过的PHP教程分享给大家
韩顺平 PHP入门到精通
燕十八 PHP高手之路
参考文档 链接: http://pan.baidu.com/s/1kTgcxHP
密码: x00l</description>
    </item>
    
    <item>
      <title>使用debug_backtrace()做PHP调试</title>
      <link>https://phpgao.github.io/debug_with_backtrace.html</link>
      <pubDate>Tue, 11 Mar 2014 15:09:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/debug_with_backtrace.html</guid>
      <description>问题？ 今天迁站的时候PHP突然报错：  is_readable() [function.is-readable]: open_basedir restriction in effect. File(D:\phpnow\vhosts\wordpress.com/wp-content/plugins/D:\phpnow\vhosts\wordpress.com\wp-content\plugins\crayon-syntax-highlighter/trans/crayon-syntax-highlighter-zh_CN.mo) is not within the allowed path(s): (D:\phpnow\vhosts\wordpress.com;C:\Windows\Temp;) in D:\phpnow\vhosts\wordpress.com\wp-includes\l10n.php on line 339 好吧，看来是crayon-syntax-highlighter插件出错了，下面我们就一起找找出错的地方吧。
 如何解决 确定出错地点 根据出错提示我们找到了 D:\phpnow\vhosts\wordpress.com\wp-includes\l10n.php的第339行，代码如下：
if ( !is_readable( $mofile ) ) return false; 这个$mofile哪里来的呢?把整个函数贴出来找找看！
function load_textdomain( $domain, $mofile ) {global $l10n;$plugin_override = apply_filters( &#39;override_load_textdomain&#39;, false, $domain, $mofile );if ( true == $plugin_override ) {return true;}do_action( &#39;load_textdomain&#39;, $domain, $mofile );$mofile = apply_filters( &#39;load_textdomain_mofile&#39;, $mofile, $domain );if ( !</description>
    </item>
    
    <item>
      <title>PHP经典函数收集</title>
      <link>https://phpgao.github.io/php_functions.html</link>
      <pubDate>Mon, 10 Mar 2014 15:05:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/php_functions.html</guid>
      <description>PHP经典函数 sys_getloadavg() 这个函数返回当前系统的负载均值信息（当然 Windows 下不适用），详细文档可以翻阅 PHP的相关文档。文档中有段示例代码，基本上也就能看出它的用途了。
$load = sys_getloadavg();if ($load[0] &amp;gt; 80) {header(&#39;HTTP/1.1 503 Too busy, try again later&#39;);die(&#39;Server too busy. Please try again later.&#39;);}//PS，如果“很不幸”你的 PHP 环境中没有这个函数，可以考虑使用下面这段代码if (!function_exists(&#39;sys_getloadavg&#39;)) {function sys_getloadavg(){$loadavg_file = &#39;/proc/loadavg&#39;;if (file_exists($loadavg_file)) {return explode(chr(32),file_get_contents($loadavg_file));}return array(0,0,0);}} debug_backtrace兄弟 使用请参考使用debug_backtrace()做PHP调试
get_browser() 该方法参考一个名叫browscap.ini的文件，该文件收录了各种浏览器信息，通过比对实现查找客户浏览器的功能。 两个使用方法：
1.下载最新的browscap.ini,放入PHP的安装目录或者C:\Windows文件夹下
下载地址
2.在PHP.INI文件中加入以下配置
[browscap];https://blog.phpgao.com/classic_code/browscap = php_browscap.ini 3.使用代码如下
http://www.phpgao.com&amp;lt;/a&amp;gt;print_r($browser); 返回结果如下</description>
    </item>
    
    <item>
      <title>网站无法选择和复制文字</title>
      <link>https://phpgao.github.io/rightclick-enable.html</link>
      <pubDate>Fri, 07 Mar 2014 14:55:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/rightclick-enable.html</guid>
      <description>有些网站真是可恶，把右键屏蔽了不给复制，这样还不行（因为可以使用快捷键CTRL+C复制） 他们竟然不让我们选择文字。。。这样下来我们既不能复制，连源代码都不能看了。是可忍孰不可忍，既然这样，那我就不客气了！
找到病根是关键 原来是JS捣的鬼 纯html是无法实现屏蔽右键等功能的，所以很简单就能想到是js的问题，那么我们就找找到底是那些代码段使得我们无法使用邮件功能呢？ 既然右键被禁止了，那我们如何才能看到网页的源代码呢？ 其实很简单，PHP@老高建议你使用chrome浏览器打开你想要破解的网站，使用快捷键CTRL+U即可轻易查看网页的源代码！怎么样，很简单吧？ 好了既然我们已经找到源代码，那就开始找那个害人的代码段吧！
代码一 这个是比较难找的代码，一般隐藏在网页的头部或者藏在某些引用的js文件中 &amp;lt;SCRIPT language=javascript type=text/javascript&amp;gt;&amp;lt;!--document.oncontextmenu=new Function(&#39;event.returnValue=false;&#39;);//屏蔽右键document.onselectstart=new Function(&#39;event.returnValue=false;&#39;);//屏蔽选择--&amp;gt;&amp;lt;/SCRIPT&amp;gt; 代码二 这个比较容易找到,直接找到标签，之后就是此句，与代码一异曲同工
&amp;lt;body oncontextmenu=&amp;quot;self.event.returnValue=false&amp;quot; onselectstart=&amp;quot;return false&amp;quot;&amp;gt; 解决方法 IE浏览器 使用IE的童鞋可以试试在浏览器的地址栏输入 javascript:alert(document.oncontextmenu=document.onselectstart=&amp;quot;OK&amp;quot;) 或者
javascript:alert(document.body.oncontextmenu=document.body.onselectstart=&amp;quot;OK&amp;quot;) 之后弹出对话框，点击确认即可！现在点击右键或者选择文字试试，是不是已经被破解了？ 请注意！该方法可能已经失效，因为新一代浏览器对安全性有了很大的提高，所以在地址栏输入脚本可能会被禁止！
接下来就是将他删除掉即可： 在代码上点击右键：选择第二项Edit Attribute,将其属性删除，结果代码变成这样： 不用怀疑了，刚才限制的功能已经恢复啦！
其他浏览器 以chrome为例 首先，在被屏蔽的网站上点击F12，出现了如下图所示代码(注：老高@PHPer使用的是chrome v30，不同版本的界面留有不同)
当然，您的火眼金睛可能立即发现了蓝色标记的一行代码
&amp;lt;body oncontextmenu=”self.event.returnValue=false” onselectstart=”return false”&amp;gt; 接下来就是将他删除掉即可：
在代码上点击右键：选择第二项Edit Attribute,将其属性删除，不用怀疑了，限制的功能已经恢复啦！
终极方法 在浏览器中将以下代码存为书签，名为解锁，在被禁网址中点击一下解锁，即可解开~
javascript:(function() { function R(a){ona = &amp;quot;on&amp;quot;+a; if(window.addEventListener) window.addEventListener(a, function (e) { for(var n=e.originalTarget; n; n=n.</description>
    </item>
    
    <item>
      <title>开启phpMyAdmin的远程登录</title>
      <link>https://phpgao.github.io/phpmyadmin_remote_server.html</link>
      <pubDate>Wed, 05 Mar 2014 14:49:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/phpmyadmin_remote_server.html</guid>
      <description>phpMyAdmin一般只能本地登录，即地址为localhost，如果想管理如192.168.1.254（非本机IP）的mysql应该如何做到呢？其实很简单，phpMyAdmin已经实现，但是默认并没有开启此功能。 3步搞定
 在phpMyAdmin目录下libraries目录中config.default.php文件并打开 找到此选项$cfg[&#39;AllowArbitraryServer&#39;] = false; 将false改为true 补充： 如果登录的是本地服务器，那么登录的时候可以把服务器一栏留空。  </description>
    </item>
    
    <item>
      <title>开发中经常用到的代码</title>
      <link>https://phpgao.github.io/frequently-used-code.html</link>
      <pubDate>Mon, 03 Mar 2014 14:41:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/frequently-used-code.html</guid>
      <description>[TOC]
短链接 http://surl.sinaapp.com/引入百度CDN公共库 地址:http://t.cn/zYDC8wj引入文件 &amp;lt;script src=&amp;quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;quot;http://libs.baidu.com/bootstrap/2.0.4/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;link href=&amp;quot;http://libs.baidu.com/bootstrap/2.0.4/css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&amp;lt;script src=&amp;quot;http://libs.baidu.com/jquerytools/1.2.7/jquery.tools.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; PHP //申明页面编码开启session并设置时区session_start();header(&amp;quot;Content-Type: text/html; charset=UTF-8&amp;quot;);ini_set(&#39;date.timezone&#39;,&#39;Asia/Shanghai&#39;);////windows下这个页面执行时间还是在php.ini里控制，修改max_execution_time。set_time_limit(0);//获取变量的整数值intval(&#39;adasdasd&#39;);//heredoc==双引号$name=MyName;echo &amp;lt;&amp;lt;&amp;lt;EOTMy name is &amp;quot;$name&amp;quot;. I am printing some $foo-&amp;gt;foo.Now, I am printing some {$foo-&amp;gt;bar[1]}.This should print a capital &#39;A&#39;: \x41EOT;/*以上例程会输出：My name is &amp;quot;MyName&amp;quot;. I am printing some Foo.Now, I am printing some Bar2.This should print a capital &#39;A&#39;: A*///Nowdoc==单引号echo &amp;lt;&amp;lt;&amp;lt;&#39;EOT&#39;My name is &amp;quot;$name&amp;quot;.</description>
    </item>
    
    <item>
      <title>PHP_cURL初始化和执行方法</title>
      <link>https://phpgao.github.io/curl_init.html</link>
      <pubDate>Sun, 02 Mar 2014 14:27:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/curl_init.html</guid>
      <description>这个是采集基础，最好熟悉一下
$ch = curl_init(); # 设定url和把结果返回，是否返回头部 curl_setopt($ch, CURLOPT_URL, &amp;#39;http://www.baidu.com/&amp;#39;); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($this-&amp;gt;ch, CURLOPT_HEADER, 1); # cookie文件设定 curl_setopt($this-&amp;gt;ch, CURLOPT_COOKIEJAR, $cookie_file); curl_setopt($this-&amp;gt;ch, CURLOPT_COOKIEFILE, $cookie_file); # 额外头部 curl_setopt($this-&amp;gt;ch, CURLOPT_HTTPHEADER, array(&amp;#39;User-Agent: Mozilla/5.0&amp;#39;)); # 设定post curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $poststring); # 连接、执行过期时间 curl_setopt($this-&amp;gt;ch, CURLOPT_CONNECTTIMEOUT, 5); curl_setopt($this-&amp;gt;ch, CURLOPT_TIMEOUT, 30); # 是否跟随301 302 curl_setopt($this-&amp;gt;ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($this-&amp;gt;ch, CURLOPT_MAXREDIRS, 10); # refer curl_setopt($this-&amp;gt;ch, CURLOPT_REFERER, $refer); # http版本和端口重用设置 curl_setopt($this-&amp;gt;ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1); curl_setopt($this-&amp;gt;ch, CURLOPT_FORBID_REUSE, 1); # 支持https curl_setopt($this-&amp;gt;ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($this-&amp;gt;ch, CURLOPT_SSL_VERIFYHOST, 0); # 如果需要进行毫秒超时，需要增加： curl_setopt($this-&amp;gt;ch, CURLOPT_NOSIGNAL, 1); # 执行 $response = curl_exec($ch); if(curl_errno($ch)){ curl_error($ch); exit(); } curl_close($ch); </description>
    </item>
    
    <item>
      <title>jQuery平滑分栏标签切换特效</title>
      <link>https://phpgao.github.io/jquery_slider.html</link>
      <pubDate>Sat, 01 Mar 2014 14:03:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/jquery_slider.html</guid>
      <description>此代码简洁明了，层次清晰，有不错的兼容性，很适合作为企业首页的图片轮播！ 实例在这：
http://www.gayadesign.com/scripts/tabbed/原理很简单： 使用TabbedContent.init()检测鼠标是否mouseover，然后调用slideContent滚动下面的内容！
&amp;lt;span style=&amp;quot;color: #ff0000;&amp;quot;&amp;gt;（注意类名的使用，可以在js文件中更改！）&amp;lt;/span&amp;gt;  下载链接：</description>
    </item>
    
    <item>
      <title>让你的IE也支持placeholder属性</title>
      <link>https://phpgao.github.io/placeholder.html</link>
      <pubDate>Fri, 28 Feb 2014 13:32:00 +0000</pubDate>
      
      <guid>https://phpgao.github.io/placeholder.html</guid>
      <description>placeholder属性是html5新加入的，所以非现代浏览器当然不会支持了。 已有牛人写了一下jquery插件实现了placeholder
项目主页 https://github.com/mathiasbynens/jquery-placeholder使用方法 html &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; placeholder=&amp;quot;e.g. John Doe&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; placeholder=&amp;quot;e.g. address@example.ext&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;url&amp;quot; name=&amp;quot;url&amp;quot; placeholder=&amp;quot;e.g. http://mathiasbynens.be/&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;tel&amp;quot; name=&amp;quot;tel&amp;quot; placeholder=&amp;quot;e.g. +32 472 77 69 88&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; placeholder=&amp;quot;e.g. h4x0rpr00fz&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;search&amp;quot; name=&amp;quot;search&amp;quot; placeholder=&amp;quot;Search this site…&amp;quot;&amp;gt;&amp;lt;textarea name=&amp;quot;message&amp;quot; placeholder=&amp;quot;Your message goes here&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt; js这样写： $(&#39;input, textarea&#39;).placeholder(); css提示 这个插件会自动添加一个名为class=&amp;ldquo;placeholder&amp;rdquo; ，如果想自己区分来，那就使用下面的css定义
input, textarea { color: #000; }.placeholder { color: #aaa; } 动手试试吧！</description>
    </item>
    
  </channel>
</rss>
